zend_version	;	Gets the version of the current Zend engine	;	string zend_version ( void )	;	Returns a string containing the version of the currently running Zend Engine.
func_num_args	;	Returns the number of arguments passed to the function	;	int func_num_args ( void )	;	Gets the number of arguments passed to the function.
func_get_arg	;	Return an item from the argument list	;	mixed func_get_arg ( int $arg_num )	;	Gets the specified argument from a user-defined function's argument list.
func_get_args	;	Returns an array comprising a function's argument list	;	array func_get_args ( void )	;	Gets an array of the function's argument list.
strlen	;	Get string length	;	int strlen ( string $string )	;	Returns the length of the given string.
strcmp	;	Binary safe string comparison	;	int strcmp ( string $str1, string $str2 )	;	
strncmp	;	Binary safe string comparison of the first n characters	;	int strncmp ( string $str1, string $str2, int $len )	;	This function is similar to strcmp() , with the difference that you can specify the (upper limit of the) number of characters from each string to be used in the comparison.
strcasecmp	;	Binary safe case-insensitive string comparison	;	int strcasecmp ( string $str1, string $str2 )	;	Binary safe case-insensitive string comparison.
strncasecmp	;	Binary safe case-insensitive string comparison of the first n characters	;	int strncasecmp ( string $str1, string $str2, int $len )	;	This function is similar to strcasecmp() , with the difference that you can specify the (upper limit of the) number of characters from each string to be used in the comparison.
each	;	Return the current key and value pair from an array and advance the array cursor	;	array each ( array &$array )	;	Return the current key and value pair from an array and advance the array cursor.
error_reporting	;	Sets which PHP errors are reported	;	int error_reporting ([ int $level ] )	;	The error_reporting() function sets the error_reporting directive at runtime. PHP has many levels of errors, using this function sets that level for the duration (runtime) of your script. If the optional level is not set, error_reporting() will just return the current error reporting level.
define	;	Defines a named constant	;	bool define ( string $name, mixed $value [, bool $case_insensitive = false ] )	;	Defines a named constant at runtime.
defined	;	Checks whether a given named constant exists	;	bool defined ( string $name )	;	Checks whether the given constant exists and is defined.
get_class	;	Returns the name of the class of an object	;	string get_class ([ object $object = NULL ] )	;	Gets the name of the class of the given object.
get_called_class	;	the "Late Static Binding" class name	;	string get_called_class ( void )	;	Gets the name of the class the static method is called in.
get_parent_class	;	Retrieves the parent class name for object or class	;	string get_parent_class ([ mixed $object ] )	;	Retrieves the parent class name for object or class.
method_exists	;	Checks if the class method exists	;	bool method_exists ( mixed $object, string $method_name )	;	Checks if the class method exists in the given object.
property_exists	;	Checks if the object or class has a property	;	bool property_exists ( mixed $class, string $property )	;	This function checks if the given property exists in the specified class.
class_exists	;	Checks if the class has been defined	;	bool class_exists ( string $class_name [, bool $autoload = true ] )	;	This function checks whether or not the given class has been defined.
interface_exists	;	Checks if the interface has been defined	;	bool interface_exists ( string $interface_name [, bool $autoload = true ] )	;	Checks if the given interface has been defined.
function_exists	;	Return TRUE if the given function has been defined	;	bool function_exists ( string $function_name )	;	Checks the list of defined functions, both built-in (internal) and user-defined, for function_name.
class_alias	;	Creates an alias for a class	;	bool class_alias ( string $original, string $alias [, bool $autoload = TRUE ] )	;	Creates an alias named alias based on the defined class original. The aliased class is exactly the same as the original class.
get_included_files	;	Returns an array with the names of included or required files	;	array get_included_files ( void )	;	Gets the names of all files that have been included using include , include_once , require or require_once .
get_required_files	;	Alias of  get_included_files()	;		;	
is_subclass_of	;	Checks if the object has this class as one of its parents	;	bool is_subclass_of ( mixed $object, string $class_name [, bool $allow_string = TRUE ] )	;	Checks if the given object has the class class_name as one of its parents.
is_a	;	Checks if the object is of this class or has this class as one of its parents	;	bool is_a ( object $object, string $class_name [, bool $allow_string = FALSE ] )	;	Checks if the given object is of this class or has this class as one of its parents.
get_class_vars	;	Get the default properties of the class	;	array get_class_vars ( string $class_name )	;	Get the default properties of the given class.
get_object_vars	;	Gets the properties of the given object	;	array get_object_vars ( object $object )	;	Gets the accessible non-static properties of the given object according to scope.
get_class_methods	;	Gets the class methods' names	;	array get_class_methods ( mixed $class_name )	;	Gets the class methods names.
trigger_error	;	Generates a user-level error/warning/notice message	;	bool trigger_error ( string $error_msg [, int $error_type = E_USER_NOTICE ] )	;	Used to trigger a user error condition, it can be used by in conjunction with the built-in error handler, or with a user defined function that has been set as the new error handler ( set_error_handler() ).
user_error	;	Alias of  trigger_error()	;		;	
set_error_handler	;	Sets a user-defined error handler function	;	handler ( int $errno, string $errstr [, string $errfile [, int $errline [, array $errcontext ]]] )	;	Sets a user function (error_handler) to handle errors in a script.
restore_error_handler	;	Restores the previous error handler function	;	bool restore_error_handler ( void )	;	Used after changing the error handler function using set_error_handler() , to revert to the previous error handler (which could be the built-in or a user defined function).
set_exception_handler	;	Sets a user-defined exception handler function	;	callable set_exception_handler ( callable $exception_handler )	;	Sets the default exception handler if an exception is not caught within a try/catch block. Execution will stop after the exception_handler is called.
restore_exception_handler	;	Restores the previously defined exception handler function	;	bool restore_exception_handler ( void )	;	Used after changing the exception handler function using set_exception_handler() , to revert to the previous exception handler (which could be the built-in or a user defined function).
get_declared_classes	;	Returns an array with the name of the defined classes	;	array get_declared_classes ( void )	;	Gets the declared classes.
get_declared_interfaces	;	Returns an array of all declared interfaces	;	array get_declared_interfaces ( void )	;	Gets the declared interfaces.
get_defined_functions	;	Returns an array of all defined functions	;	array get_defined_functions ( void )	;	Gets an array of all defined functions.
get_defined_vars	;	Returns an array of all defined variables	;	array get_defined_vars ( void )	;	This function returns a multidimensional array containing a list of all defined variables, be them environment, server or user-defined variables, within the scope that get_defined_vars() is called.
create_function	;	Create an anonymous (lambda-style) function	;	string create_function ( string $args, string $code )	;	Creates an anonymous function from the parameters passed, and returns a unique name for it.
get_resource_type	;	Returns the resource type	;	string get_resource_type ( resource $handle )	;	This function gets the type of the given resource.
get_loaded_extensions	;	Returns an array with the names of all modules compiled and loaded	;	array get_loaded_extensions ([ bool $zend_extensions = false ] )	;	This function returns the names of all the modules compiled and loaded in the PHP interpreter.
extension_loaded	;	Find out whether an extension is loaded	;	bool extension_loaded ( string $name )	;	Finds out whether the extension is loaded.
get_extension_funcs	;	Returns an array with the names of the functions of a module	;	array get_extension_funcs ( string $module_name )	;	This function returns the names of all the functions defined in the module indicated by module_name.
get_defined_constants	;	Returns an associative array with the names of all the constants and their values	;	array get_defined_constants ([ bool $categorize = false ] )	;	Returns the names and values of all the constants currently defined. This includes those created by extensions as well as those created with the define() function.
debug_backtrace	;	Generates a backtrace	;	array debug_backtrace ([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = 0 ]] )	;	debug_backtrace() generates a PHP backtrace.
debug_print_backtrace	;	Prints a backtrace	;	void debug_print_backtrace ([ int $options = 0 [, int $limit = 0 ]] )	;	debug_print_backtrace() prints a PHP backtrace. It prints the function calls, included/required files and eval() ed stuff.
gc_collect_cycles	;	Forces collection of any existing garbage cycles	;	int gc_collect_cycles ( void )	;	Forces collection of any existing garbage cycles.
gc_enabled	;	Returns status of the circular reference collector	;	bool gc_enabled ( void )	;	Returns status of the circular reference collector.
gc_enable	;	Activates the circular reference collector	;	void gc_enable ( void )	;	Activates the circular reference collector, setting zend.enable_gc to 1.
gc_disable	;	Deactivates the circular reference collector	;	void gc_disable ( void )	;	Deactivates the circular reference collector, setting zend.enable_gc to 0.
strtotime	;	Parse about any English textual datetime description into a Unix timestamp	;	int strtotime ( string $time [, int $now = time() ] )	;	
date	;	Format a local time/date	;	string date ( string $format [, int $timestamp = time() ] )	;	Returns a string formatted according to the given format string using the given integer timestamp or the current time if no timestamp is given. In other words, timestamp is optional and defaults to the value of time() .
idate	;	Format a local time/date as integer	;	int idate ( string $format [, int $timestamp = time() ] )	;	Returns a number formatted according to the given format string using the given integer timestamp or the current local time if no timestamp is given. In other words, timestamp is optional and defaults to the value of time() .
gmdate	;	Format a GMT/UTC date/time	;	string gmdate ( string $format [, int $timestamp = time() ] )	;	Identical to the date() function except that the time returned is Greenwich Mean Time (GMT).
mktime	;	Get Unix timestamp for a date	;	int mktime ([ int $hour = date("H") [, int $minute = date("i") [, int $second = date("s") [, int $month = date("n") [, int $day = date("j") [, int $year = date("Y") [, int $is_dst = -1 ]]]]]]] )	;	Returns the Unix timestamp corresponding to the arguments given. This timestamp is a long integer containing the number of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified.
gmmktime	;	Get Unix timestamp for a GMT date	;	int gmmktime ([ int $hour = gmdate("H") [, int $minute = gmdate("i") [, int $second = gmdate("s") [, int $month = gmdate("n") [, int $day = gmdate("j") [, int $year = gmdate("Y") [, int $is_dst = -1 ]]]]]]] )	;	Identical to mktime() except the passed parameters represents a GMT date. gmmktime() internally uses mktime() so only times valid in derived local time can be used.
checkdate	;	Validate a Gregorian date	;	bool checkdate ( int $month, int $day, int $year )	;	Checks the validity of the date formed by the arguments. A date is considered valid if each parameter is properly defined.
strftime	;	Format a local time/date according to locale settings	;	string strftime ( string $format [, int $timestamp = time() ] )	;	Format the time and/or date according to locale settings. Month and weekday names and other language-dependent strings respect the current locale set with setlocale() .
gmstrftime	;	Format a GMT/UTC time/date according to locale settings	;	string gmstrftime ( string $format [, int $timestamp = time() ] )	;	Behaves the same as strftime() except that the time returned is Greenwich Mean Time (GMT). For example, when run in Eastern Standard Time (GMT -0500), the first line below prints "Dec 31 1998 20:00:00", while the second prints "Jan 01 1999 01:00:00".
time	;	Return current Unix timestamp	;	int time ( void )	;	Returns the current time measured in the number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT).
localtime	;	Get the local time	;	array localtime ([ int $timestamp = time() [, bool $is_associative = false ]] )	;	The localtime() function returns an array identical to that of the structure returned by the C function call.
getdate	;	Get date/time information	;	array getdate ([ int $timestamp = time() ] )	;	Returns an associative array containing the date information of the timestamp, or the current local time if no timestamp is given.
date_create	;	Alias of  DateTime::__construct()	;		;	
date_create_from_format	;	Alias of  DateTime::createFromFormat()	;		;	
date_parse	;	Returns associative array with detailed info about given date	;	array date_parse ( string $date )	;	
date_parse_from_format	;	Get info about given date formatted according to the specified format	;	array date_parse_from_format ( string $format, string $date )	;	Returns associative array with detailed info about given date.
date_get_last_errors	;	Alias of  DateTime::getLastErrors()	;		;	
date_format	;	Alias of  DateTime::format()	;		;	
date_modify	;	Alias of  DateTime::modify()	;		;	
date_add	;	Alias of  DateTime::add()	;		;	
date_sub	;	Alias of  DateTime::sub()	;		;	
date_timezone_get	;	Alias of  DateTime::getTimezone()	;		;	
date_timezone_set	;	Alias of  DateTime::setTimezone()	;		;	
date_offset_get	;	Alias of  DateTime::getOffset()	;		;	
date_diff	;	Alias of  DateTime::diff()	;		;	
date_time_set	;	Alias of  DateTime::setTime()	;		;	
date_date_set	;	Alias of  DateTime::setDate()	;		;	
date_isodate_set	;	Alias of  DateTime::setISODate()	;		;	
date_timestamp_set	;	Alias of  DateTime::setTimestamp()	;		;	
date_timestamp_get	;	Alias of  DateTime::getTimestamp()	;		;	
timezone_open	;	Alias of  DateTimeZone::__construct()	;		;	
timezone_name_get	;	Alias of  DateTimeZone::getName()	;		;	
timezone_name_from_abbr	;	Returns the timezone name from abbreviation	;	string timezone_name_from_abbr ( string $abbr [, int $gmtOffset = -1 [, int $isdst = -1 ]] )	;	
timezone_offset_get	;	Alias of  DateTimeZone::getOffset()	;		;	
timezone_transitions_get	;	Alias of  DateTimeZone::getTransitions()	;		;	
timezone_location_get	;	Alias of  DateTimeZone::getLocation()	;		;	
timezone_identifiers_list	;	Alias of  DateTimeZone::listIdentifiers()	;		;	
timezone_abbreviations_list	;	Alias of  DateTimeZone::listAbbreviations()	;		;	
timezone_version_get	;	Gets the version of the timezonedb	;	string timezone_version_get ( void )	;	Returns the current version of the timezonedb.
date_interval_create_from_date_string	;	Alias of  DateInterval::createFromDateString()	;		;	
date_interval_format	;	Alias of  DateInterval::format()	;		;	
date_default_timezone_set	;	Sets the default timezone used by all date/time functions in a script	;	bool date_default_timezone_set ( string $timezone_identifier )	;	date_default_timezone_set() sets the default timezone used by all date/time functions.
date_default_timezone_get	;	Gets the default timezone used by all date/time functions in a script	;	string date_default_timezone_get ( void )	;	In order of preference, this function returns the default timezone by: Reading the timezone set using the date_default_timezone_set() function (if any) Prior to PHP 5.4.0 only: Reading the TZ environment variable (if non empty) Reading the value of the date.timezone ini option (if set) Prior to PHP 5.4.0 only: Querying the host operating system (if supported and allowed by the OS). This uses an algorithm that has to guess the timezone. This is by no means going to work correctly for every situation. A warning is shown when this stage is reached. Do not rely on it to be guessed correctly, and set date.timezone to the correct timezone instead.
date_sunrise	;	Returns time of sunrise for a given day and location	;	mixed date_sunrise ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get("date.default_latitude") [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get("date.sunrise_zenith") [, float $gmt_offset = 0 ]]]]] )	;	date_sunrise() returns the sunrise time for a given day (specified as a timestamp) and location.
date_sunset	;	Returns time of sunset for a given day and location	;	mixed date_sunset ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get("date.default_latitude") [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get("date.sunset_zenith") [, float $gmt_offset = 0 ]]]]] )	;	date_sunset() returns the sunset time for a given day (specified as a timestamp) and location.
date_sun_info	;	Returns an array with information about sunset/sunrise and twilight begin/end	;	array date_sun_info ( int $time, float $latitude, float $longitude )	;	
ereg	;	Regular expression match	;	int ereg ( string $pattern, string $string [, array &$regs ] )	;	
ereg_replace	;	Replace regular expression	;	string ereg_replace ( string $pattern, string $replacement, string $string )	;	
eregi	;	Case insensitive regular expression match	;	int eregi ( string $pattern, string $string [, array &$regs ] )	;	This function is identical to ereg() except that it ignores case distinction when matching alphabetic characters.
eregi_replace	;	Replace regular expression case insensitive	;	string eregi_replace ( string $pattern, string $replacement, string $string )	;	This function is identical to ereg_replace() except that this ignores case distinction when matching alphabetic characters.
split	;	Split string into array by regular expression	;	array split ( string $pattern, string $string [, int $limit = -1 ] )	;	Splits a string into array by regular expression.
spliti	;	Split string into array by regular expression case insensitive	;	array spliti ( string $pattern, string $string [, int $limit = -1 ] )	;	Splits a string into array by regular expression.
sql_regcase	;	Make regular expression for case insensitive match	;	string sql_regcase ( string $string )	;	Creates a regular expression for a case insensitive match.
libxml_set_streams_context	;	Set the streams context for the next libxml document load or write	;	void libxml_set_streams_context ( resource $streams_context )	;	Sets the streams context for the next libxml document load or write.
libxml_use_internal_errors	;	Disable libxml errors and allow user to fetch error information as needed	;	bool libxml_use_internal_errors ([ bool $use_errors = false ] )	;	libxml_use_internal_errors() allows you to disable standard libxml errors and enable user error handling.
libxml_get_last_error	;	Retrieve last error from libxml	;	LibXMLError libxml_get_last_error ( void )	;	Retrieve last error from libxml.
libxml_clear_errors	;	Clear libxml error buffer	;	void libxml_clear_errors ( void )	;	libxml_clear_errors() clears the libxml error buffer.
libxml_get_errors	;	Retrieve array of errors	;	array libxml_get_errors ( void )	;	Retrieve array of errors.
libxml_disable_entity_loader	;	Disable the ability to load external entities	;	bool libxml_disable_entity_loader ([ bool $disable = true ] )	;	Disable/enable the ability to load external entities.
openssl_pkey_free	;	Frees a private key	;	void openssl_pkey_free ( resource $key )	;	This function frees a private key created by openssl_pkey_new() .
openssl_pkey_new	;	Generates a new private key	;	resource openssl_pkey_new ([ array $configargs ] )	;	openssl_pkey_new() generates a new private and public key pair. The public component of the key can be obtained using openssl_pkey_get_public() .
openssl_pkey_export	;	Gets an exportable representation of a key into a string	;	bool openssl_pkey_export ( mixed $key, string &$out [, string $passphrase [, array $configargs ]] )	;	openssl_pkey_export() exports key as a PEM encoded string and stores it into out (which is passed by reference).
openssl_pkey_export_to_file	;	Gets an exportable representation of a key into a file	;	bool openssl_pkey_export_to_file ( mixed $key, string $outfilename [, string $passphrase [, array $configargs ]] )	;	openssl_pkey_export_to_file() saves an ascii-armoured (PEM encoded) rendition of key into the file named by outfilename.
openssl_pkey_get_private	;	Get a private key	;	resource openssl_pkey_get_private ( mixed $key [, string $passphrase = "" ] )	;	openssl_get_privatekey() parses key and prepares it for use by other functions.
openssl_pkey_get_public	;	Extract public key from certificate and prepare it for use	;	resource openssl_pkey_get_public ( mixed $certificate )	;	openssl_get_publickey() extracts the public key from certificate and prepares it for use by other functions.
openssl_pkey_get_details	;	Returns an array with the key details	;	array openssl_pkey_get_details ( resource $key )	;	This function returns the key details (bits, key, type).
openssl_free_key	;	Free key resource	;	void openssl_free_key ( resource $key_identifier )	;	openssl_free_key() frees the key associated with the specified key_identifier from memory.
openssl_get_privatekey	;	Alias of  openssl_pkey_get_private()	;		;	
openssl_get_publickey	;	Alias of  openssl_pkey_get_public()	;		;	
openssl_x509_read	;	Parse an X.509 certificate and return a resource identifier for   it	;	resource openssl_x509_read ( mixed $x509certdata )	;	openssl_x509_read() parses the certificate supplied by x509certdata and returns a resource identifier for it.
openssl_x509_free	;	Free certificate resource	;	void openssl_x509_free ( resource $x509cert )	;	openssl_x509_free() frees the certificate associated with the specified x509cert resource from memory.
openssl_x509_parse	;	Parse an X509 certificate and return the information as an array	;	array openssl_x509_parse ( mixed $x509cert [, bool $shortnames = true ] )	;	openssl_x509_parse() returns information about the supplied x509cert, including fields such as subject name, issuer name, purposes, valid from and valid to dates etc.
openssl_x509_checkpurpose	;	Verifies if a certificate can be used for a particular purpose	;	int openssl_x509_checkpurpose ( mixed $x509cert, int $purpose [, array $cainfo = array() [, string $untrustedfile ]] )	;	openssl_x509_checkpurpose() examines a certificate to see if it can be used for the specified purpose.
openssl_x509_check_private_key	;	Checks if a private key corresponds to a certificate	;	bool openssl_x509_check_private_key ( mixed $cert, mixed $key )	;	Checks whether the given key is the private key that corresponds to cert.
openssl_x509_export	;	Exports a certificate as a string	;	bool openssl_x509_export ( mixed $x509, string &$output [, bool $notext = TRUE ] )	;	openssl_x509_export() stores x509 into a string named by output in a PEM encoded format.
openssl_x509_export_to_file	;	Exports a certificate to file	;	bool openssl_x509_export_to_file ( mixed $x509, string $outfilename [, bool $notext = TRUE ] )	;	openssl_x509_export_to_file() stores x509 into a file named by outfilename in a PEM encoded format.
openssl_pkcs12_export	;	Exports a PKCS#12 Compatible Certificate Store File to variable.	;	bool openssl_pkcs12_export ( mixed $x509, string &$out, mixed $priv_key, string $pass [, array $args ] )	;	openssl_pkcs12_export() stores x509 into a string named by out in a PKCS#12 file format.
openssl_pkcs12_export_to_file	;	Exports a PKCS#12 Compatible Certificate Store File	;	bool openssl_pkcs12_export_to_file ( mixed $x509, string $filename, mixed $priv_key, string $pass [, array $args ] )	;	openssl_pkcs12_export_to_file() stores x509 into a file named by filename in a PKCS#12 file format.
openssl_pkcs12_read	;	Parse a PKCS#12 Certificate Store into an array	;	bool openssl_pkcs12_read ( string $pkcs12, array &$certs, string $pass )	;	openssl_pkcs12_read() parses the PKCS#12 certificate store supplied by pkcs12 into a array named certs.
openssl_csr_new	;	Generates a CSR	;	mixed openssl_csr_new ( array $dn, resource &$privkey [, array $configargs [, array $extraattribs ]] )	;	openssl_csr_new() generates a new CSR (Certificate Signing Request) based on the information provided by dn, which represents the Distinguished Name to be used in the certificate.
openssl_csr_export	;	Exports a CSR as a string	;	bool openssl_csr_export ( resource $csr, string &$out [, bool $notext = true ] )	;	openssl_csr_export() takes the Certificate Signing Request represented by csr and stores it as ascii-armoured text into out, which is passed by reference.
openssl_csr_export_to_file	;	Exports a CSR to a file	;	bool openssl_csr_export_to_file ( resource $csr, string $outfilename [, bool $notext = true ] )	;	openssl_csr_export_to_file() takes the Certificate Signing Request represented by csr and saves it as ascii-armoured text into the file named by outfilename.
openssl_csr_sign	;	Sign a CSR with another certificate (or itself) and generate a certificate	;	resource openssl_csr_sign ( mixed $csr, mixed $cacert, mixed $priv_key, int $days [, array $configargs [, int $serial = 0 ]] )	;	openssl_csr_sign() generates an x509 certificate resource from the given CSR.
openssl_csr_get_subject	;	Returns the subject of a CERT	;	array openssl_csr_get_subject ( mixed $csr [, bool $use_shortnames = true ] )	;	
openssl_csr_get_public_key	;	Returns the public key of a CERT	;	resource openssl_csr_get_public_key ( mixed $csr [, bool $use_shortnames = true ] )	;	
openssl_digest	;	Computes a digest	;	string openssl_digest ( string $data, string $method [, bool $raw_output = false ] )	;	Computes a digest hash value for the given data using a given method, and returns a raw or binhex encoded string.
openssl_encrypt	;	Encrypts data	;	string openssl_encrypt ( string $data, string $method, string $password [, bool $raw_output = false [, string $iv = "" ]] )	;	Encrypts given data with given method and key, returns a raw or base64 encoded string
openssl_decrypt	;	Decrypts data	;	string openssl_decrypt ( string $data, string $method, string $password [, bool $raw_input = false [, string $iv = "" ]] )	;	Takes a raw or base64 encoded string and decrypts it using a given method and key.
openssl_cipher_iv_length	;	Gets the cipher iv length	;	int openssl_cipher_iv_length ( string $method )	;	Gets the cipher iv length.
openssl_sign	;	Generate signature	;	bool openssl_sign ( string $data, string &$signature, mixed $priv_key_id [, int $signature_alg = OPENSSL_ALGO_SHA1 ] )	;	openssl_sign() computes a signature for the specified data by using SHA1 for hashing followed by encryption using the private key associated with priv_key_id. Note that the data itself is not encrypted.
openssl_verify	;	Verify signature	;	int openssl_verify ( string $data, string $signature, mixed $pub_key_id [, int $signature_alg = OPENSSL_ALGO_SHA1 ] )	;	openssl_verify() verifies that the signature is correct for the specified data using the public key associated with pub_key_id. This must be the public key corresponding to the private key used for signing.
openssl_seal	;	Seal (encrypt) data	;	int openssl_seal ( string $data, string &$sealed_data, array &$env_keys, array $pub_key_ids [, string $method ] )	;	openssl_seal() seals (encrypts) data by using RC4 with a randomly generated secret key. The key is encrypted with each of the public keys associated with the identifiers in pub_key_ids and each encrypted key is returned in env_keys. This means that one can send sealed data to multiple recipients (provided one has obtained their public keys). Each recipient must receive both the sealed data and the envelope key that was encrypted with the recipient's public key.
openssl_open	;	Open sealed data	;	bool openssl_open ( string $sealed_data, string &$open_data, string $env_key, mixed $priv_key_id [, string $method ] )	;	openssl_open() opens (decrypts) sealed_data using the private key associated with the key identifier priv_key_id and the envelope key env_key, and fills open_data with the decrypted data. The envelope key is generated when the data are sealed and can only be used by one specific private key. See openssl_seal() for more information.
openssl_pkcs7_verify	;	Verifies the signature of an S/MIME signed message	;	mixed openssl_pkcs7_verify ( string $filename, int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content ]]]] )	;	openssl_pkcs7_verify() reads the S/MIME message contained in the given file and examines the digital signature.
openssl_pkcs7_decrypt	;	Decrypts an S/MIME encrypted message	;	bool openssl_pkcs7_decrypt ( string $infilename, string $outfilename, mixed $recipcert [, mixed $recipkey ] )	;	Decrypts the S/MIME encrypted message contained in the file specified by infilename using the certificate and its associated private key specified by recipcert and recipkey.
openssl_pkcs7_sign	;	Sign an S/MIME message	;	bool openssl_pkcs7_sign ( string $infilename, string $outfilename, mixed $signcert, mixed $privkey, array $headers [, int $flags = PKCS7_DETACHED [, string $extracerts ]] )	;	openssl_pkcs7_sign() takes the contents of the file named infilename and signs them using the certificate and its matching private key specified by signcert and privkey parameters.
openssl_pkcs7_encrypt	;	Encrypt an S/MIME message	;	bool openssl_pkcs7_encrypt ( string $infile, string $outfile, mixed $recipcerts, array $headers [, int $flags = 0 [, int $cipherid = OPENSSL_CIPHER_RC2_40 ]] )	;	openssl_pkcs7_encrypt() takes the contents of the file named infile and encrypts them using an RC2 40-bit cipher so that they can only be read by the intended recipients specified by recipcerts.
openssl_private_encrypt	;	Encrypts data with private key	;	bool openssl_private_encrypt ( string $data, string &$crypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )	;	openssl_private_encrypt() encrypts data with private key and stores the result into crypted. Encrypted data can be decrypted via openssl_public_decrypt() .
openssl_private_decrypt	;	Decrypts data with private key	;	bool openssl_private_decrypt ( string $data, string &$decrypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )	;	openssl_private_decrypt() decrypts data that was previous encrypted via openssl_public_encrypt() and stores the result into decrypted.
openssl_public_encrypt	;	Encrypts data with public key	;	bool openssl_public_encrypt ( string $data, string &$crypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )	;	openssl_public_encrypt() encrypts data with public key and stores the result into crypted. Encrypted data can be decrypted via openssl_private_decrypt() .
openssl_public_decrypt	;	Decrypts data with public key	;	bool openssl_public_decrypt ( string $data, string &$decrypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )	;	openssl_public_decrypt() decrypts data that was previous encrypted via openssl_private_encrypt() and stores the result into decrypted.
openssl_get_md_methods	;	Gets available digest methods	;	array openssl_get_md_methods ([ bool $aliases = false ] )	;	Gets a list of available digest methods.
openssl_get_cipher_methods	;	Gets available cipher methods	;	array openssl_get_cipher_methods ([ bool $aliases = false ] )	;	Gets a list of available cipher methods.
openssl_dh_compute_key	;	Computes shared secret for public value of remote DH key and local DH key	;	string openssl_dh_compute_key ( string $pub_key, resource $dh_key )	;	
openssl_random_pseudo_bytes	;	Generate a pseudo-random string of bytes	;	string openssl_random_pseudo_bytes ( int $length [, bool &$crypto_strong ] )	;	Generates a string of pseudo-random bytes, with the number of bytes determined by the length parameter.
openssl_error_string	;	Return openSSL error message	;	string openssl_error_string ( void )	;	openssl_error_string() returns the last error from the openSSL library. Error messages are queued, so this function should be called multiple times to collect all of the information. The last error will be the most recent one.
preg_match	;	Perform a regular expression match	;	int preg_match ( string $pattern, string $subject [, array &$matches [, int $flags = 0 [, int $offset = 0 ]]] )	;	Searches subject for a match to the regular expression given in pattern.
preg_match_all	;	Perform a global regular expression match	;	int preg_match_all ( string $pattern, string $subject [, array &$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0 ]]] )	;	Searches subject for all matches to the regular expression given in pattern and puts them in matches in the order specified by flags.
preg_replace	;	Perform a regular expression search and replace	;	mixed preg_replace ( mixed $pattern, mixed $replacement, mixed $subject [, int $limit = -1 [, int &$count ]] )	;	Searches subject for matches to pattern and replaces them with replacement.
preg_replace_callback	;	Perform a regular expression search and replace using a callback	;	mixed preg_replace_callback ( mixed $pattern, callable $callback, mixed $subject [, int $limit = -1 [, int &$count ]] )	;	The behavior of this function is almost identical to preg_replace() , except for the fact that instead of replacement parameter, one should specify a callback.
preg_filter	;	Perform a regular expression search and replace	;	mixed preg_filter ( mixed $pattern, mixed $replacement, mixed $subject [, int $limit = -1 [, int &$count ]] )	;	preg_filter() is identical to preg_replace() except it only returns the (possibly transformed) subjects where there was a match. For details about how this function works, read the preg_replace() documentation.
preg_split	;	Split string by a regular expression	;	array preg_split ( string $pattern, string $subject [, int $limit = -1 [, int $flags = 0 ]] )	;	Split the given string by a regular expression.
preg_quote	;	Quote regular expression characters	;	string preg_quote ( string $str [, string $delimiter = NULL ] )	;	preg_quote() takes str and puts a backslash in front of every character that is part of the regular expression syntax. This is useful if you have a run-time string that you need to match in some text and the string may contain special regex characters.
preg_grep	;	Return array entries that match the pattern	;	array preg_grep ( string $pattern, array $input [, int $flags = 0 ] )	;	Returns the array consisting of the elements of the input array that match the given pattern.
preg_last_error	;	Returns the error code of the last PCRE regex execution	;	int preg_last_error ( void )	;	Returns the error code of the last PCRE regex execution.
readgzfile	;	Output a gz-file	;	int readgzfile ( string $filename [, int $use_include_path = 0 ] )	;	Reads a file, decompresses it and writes it to standard output.
gzrewind	;	Rewind the position of a gz-file pointer	;	bool gzrewind ( resource $zp )	;	Sets the file position indicator of the given gz-file pointer to the beginning of the file stream.
gzclose	;	Close an open gz-file pointer	;	bool gzclose ( resource $zp )	;	Closes the given gz-file pointer.
gzeof	;	Test for EOF on a gz-file pointer	;	int gzeof ( resource $zp )	;	Tests the given GZ file pointer for EOF.
gzgetc	;	Get character from gz-file pointer	;	string gzgetc ( resource $zp )	;	Returns a string containing a single (uncompressed) character read from the given gz-file pointer.
gzgets	;	Get line from file pointer	;	string gzgets ( resource $zp, int $length )	;	Gets a (uncompressed) string of up to length - 1 bytes read from the given file pointer. Reading ends when length - 1 bytes have been read, on a newline, or on EOF (whichever comes first).
gzgetss	;	Get line from gz-file pointer and strip HTML tags	;	string gzgetss ( resource $zp, int $length [, string $allowable_tags ] )	;	Identical to gzgets() , except that gzgetss() attempts to strip any HTML and PHP tags from the text it reads.
gzread	;	Binary-safe gz-file read	;	string gzread ( resource $zp, int $length )	;	gzread() reads up to length bytes from the given gz-file pointer. Reading stops when length (uncompressed) bytes have been read or EOF is reached, whichever comes first.
gzopen	;	Open gz-file	;	resource gzopen ( string $filename, string $mode [, int $use_include_path = 0 ] )	;	Opens a gzip (.gz) file for reading or writing.
gzpassthru	;	Output all remaining data on a gz-file pointer	;	int gzpassthru ( resource $zp )	;	Reads to EOF on the given gz-file pointer from the current position and writes the (uncompressed) results to standard output.
gzseek	;	Seek on a gz-file pointer	;	int gzseek ( resource $zp, int $offset [, int $whence = SEEK_SET ] )	;	Sets the file position indicator for the given file pointer to the given offset byte into the file stream. Equivalent to calling (in C) gzseek(zp, offset, SEEK_SET).
gztell	;	Tell gz-file pointer read/write position	;	int gztell ( resource $zp )	;	Gets the position of the given file pointer; i.e., its offset into the uncompressed file stream.
gzwrite	;	Binary-safe gz-file write	;	int gzwrite ( resource $zp, string $string [, int $length ] )	;	gzwrite() writes the contents of string to the given gz-file.
gzputs	;	Alias of  gzwrite()	;		;	
gzfile	;	Read entire gz-file into an array	;	array gzfile ( string $filename [, int $use_include_path = 0 ] )	;	This function is identical to readgzfile() , except that it returns the file in an array.
gzcompress	;	Compress a string	;	string gzcompress ( string $data [, int $level = -1 ] )	;	This function compress the given string using the ZLIB data format.
gzuncompress	;	Uncompress a compressed string	;	string gzuncompress ( string $data [, int $length = 0 ] )	;	This function uncompress a compressed string.
gzdeflate	;	Deflate a string	;	string gzdeflate ( string $data [, int $level = -1 ] )	;	This function compress the given string using the DEFLATE data format.
gzinflate	;	Inflate a deflated string	;	string gzinflate ( string $data [, int $length = 0 ] )	;	This function inflate a deflated string.
gzencode	;	Create a gzip compressed string	;	string gzencode ( string $data [, int $level = -1 [, int $encoding_mode = FORCE_GZIP ]] )	;	This function returns a compressed version of the input data compatible with the output of the gzip program.
ob_gzhandler	;	ob_start callback function to gzip output buffer	;	string ob_gzhandler ( string $buffer, int $mode )	;	ob_gzhandler() is intended to be used as a callback function for ob_start() to help facilitate sending gz-encoded data to web browsers that support compressed web pages. Before ob_gzhandler() actually sends compressed data, it determines what type of content encoding the browser will accept ("gzip", "deflate" or none at all) and will return its output accordingly. All browsers are supported since it's up to the browser to send the correct header saying that it accepts compressed web pages. If a browser doesn't support compressed pages this function returns FALSE.
zlib_get_coding_type	;	Returns the coding type used for output compression	;	string zlib_get_coding_type ( void )	;	Returns the coding type used for output compression.
bcadd	;	Add two arbitrary precision numbers	;	string bcadd ( string $left_operand, string $right_operand [, int $scale ] )	;	Sums left_operand and right_operand.
bcsub	;	Subtract one arbitrary precision number from another	;	string bcsub ( string $left_operand, string $right_operand [, int $scale ] )	;	Subtracts the right_operand from the left_operand.
bcmul	;	Multiply two arbitrary precision number	;	string bcmul ( string $left_operand, string $right_operand [, int $scale ] )	;	Multiply the left_operand by the right_operand.
bcdiv	;	Divide two arbitrary precision numbers	;	string bcdiv ( string $left_operand, string $right_operand [, int $scale ] )	;	Divides the left_operand by the right_operand.
bcmod	;	Get modulus of an arbitrary precision number	;	string bcmod ( string $left_operand, string $modulus )	;	Get the modulus of the left_operand using modulus.
bcpow	;	Raise an arbitrary precision number to another	;	string bcpow ( string $left_operand, string $right_operand [, int $scale ] )	;	Raise left_operand to the power right_operand.
bcsqrt	;	Get the square root of an arbitrary precision number	;	string bcsqrt ( string $operand [, int $scale ] )	;	Return the square root of the operand.
bcscale	;	Set default scale parameter for all bc math functions	;	bool bcscale ( int $scale )	;	Sets the default scale parameter for all subsequent calls to bc math functions that do not explicitly specify a scale parameter.
bccomp	;	Compare two arbitrary precision numbers	;	int bccomp ( string $left_operand, string $right_operand [, int $scale ] )	;	Compares the left_operand to the right_operand and returns the result as an integer.
bcpowmod	;	Raise an arbitrary precision number to another, reduced by a specified modulus	;	string bcpowmod ( string $left_operand, string $right_operand, string $modulus [, int $scale ] )	;	Use the fast-exponentiation method to raise left_operand to the power right_operand with respect to the modulus modulus.
bzopen	;	Opens a bzip2 compressed file	;	resource bzopen ( string $filename, string $mode )	;	bzopen() opens a bzip2 (.bz2) file for reading or writing.
bzread	;	Binary safe bzip2 file read	;	string bzread ( resource $bz [, int $length = 1024 ] )	;	bzread() reads from the given bzip2 file pointer.
bzwrite	;	Binary safe bzip2 file write	;	int bzwrite ( resource $bz, string $data [, int $length ] )	;	bzwrite() writes a string into the given bzip2 file stream.
bzflush	;	Force a write of all buffered data	;	int bzflush ( resource $bz )	;	Forces a write of all buffered bzip2 data for the file pointer bz.
bzclose	;	Close a bzip2 file	;	int bzclose ( resource $bz )	;	Closes the given bzip2 file pointer.
bzerrno	;	Returns a bzip2 error number	;	int bzerrno ( resource $bz )	;	Returns the error number of any bzip2 error returned by the given file pointer.
bzerrstr	;	Returns a bzip2 error string	;	string bzerrstr ( resource $bz )	;	Gets the error string of any bzip2 error returned by the given file pointer.
bzerror	;	Returns the bzip2 error number and error string in an array	;	array bzerror ( resource $bz )	;	Returns the error number and error string of any bzip2 error returned by the given file pointer.
bzcompress	;	Compress a string into bzip2 encoded data	;	mixed bzcompress ( string $source [, int $blocksize = 4 [, int $workfactor = 0 ]] )	;	bzcompress() compresses the given string and returns it as bzip2 encoded data.
bzdecompress	;	Decompresses bzip2 encoded data	;	mixed bzdecompress ( string $source [, int $small = 0 ] )	;	bzdecompress() decompresses the given string containing bzip2 encoded data.
jdtogregorian	;	Converts Julian Day Count to Gregorian date	;	string jdtogregorian ( int $julianday )	;	Converts Julian Day Count to a string containing the Gregorian date in the format of "month/day/year".
gregoriantojd	;	Converts a Gregorian date to Julian Day Count	;	int gregoriantojd ( int $month, int $day, int $year )	;	Valid Range for Gregorian Calendar 4714 B.C. to 9999 A.D.
jdtojulian	;	Converts a Julian Day Count to a Julian Calendar Date	;	string jdtojulian ( int $julianday )	;	Converts Julian Day Count to a string containing the Julian Calendar Date in the format of "month/day/year".
juliantojd	;	Converts a Julian Calendar date to Julian Day Count	;	int juliantojd ( int $month, int $day, int $year )	;	Valid Range for Julian Calendar 4713 B.C. to 9999 A.D.
jdtojewish	;	Converts a Julian day count to a Jewish calendar date	;	string jdtojewish ( int $juliandaycount [, bool $hebrew = false [, int $fl = 0 ]] )	;	Converts a Julian Day Count to the Jewish Calendar.
jewishtojd	;	Converts a date in the Jewish Calendar to Julian Day Count	;	int jewishtojd ( int $month, int $day, int $year )	;	Although this function can handle dates all the way back to the year 1 (3761 B.C.), such use may not be meaningful. The Jewish calendar has been in use for several thousand years, but in the early days there was no formula to determine the start of a month. A new month was started when the new moon was first observed.
jdtofrench	;	Converts a Julian Day Count to the French Republican Calendar	;	string jdtofrench ( int $juliandaycount )	;	Converts a Julian Day Count to the French Republican Calendar.
frenchtojd	;	Converts a date from the French Republican Calendar to a Julian Day Count	;	int frenchtojd ( int $month, int $day, int $year )	;	Converts a date from the French Republican Calendar to a Julian Day Count.
jddayofweek	;	Returns the day of the week	;	mixed jddayofweek ( int $julianday [, int $mode = CAL_DOW_DAYNO ] )	;	Returns the day of the week. Can return a string or an integer depending on the mode.
jdmonthname	;	Returns a month name	;	string jdmonthname ( int $julianday, int $mode )	;	Returns a string containing a month name. mode tells this function which calendar to convert the Julian Day Count to, and what type of month names are to be returned. Calendar modes Mode Meaning Values 0 Gregorian - abbreviated Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec 1 Gregorian January, February, March, April, May, June, July, August, September, October, November, December 2 Julian - abbreviated Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec 3 Julian January, February, March, April, May, June, July, August, September, October, November, December 4 Jewish Tishri, Heshvan, Kislev, Tevet, Shevat, AdarI, AdarII, Nisan, Iyyar, Sivan, Tammuz, Av, Elul 5 French Republican Vendemiaire, Brumaire, Frimaire, Nivose, Pluviose, Ventose, Germinal, Floreal, Prairial, Messidor, Thermidor, Fructidor, Extra
easter_date	;	Get Unix timestamp for midnight on Easter of a given year	;	int easter_date ([ int $year ] )	;	Returns the Unix timestamp corresponding to midnight on Easter of the given year.
easter_days	;	Get number of days after March 21 on which Easter falls for a given year	;	int easter_days ([ int $year [, int $method = CAL_EASTER_DEFAULT ]] )	;	Returns the number of days after March 21 on which Easter falls for a given year. If no year is specified, the current year is assumed.
unixtojd	;	Convert Unix timestamp to Julian Day	;	int unixtojd ([ int $timestamp = time() ] )	;	Return the Julian Day for a Unix timestamp (seconds since 1.1.1970), or for the current day if no timestamp is given.
jdtounix	;	Convert Julian Day to Unix timestamp	;	int jdtounix ( int $jday )	;	This function will return a Unix timestamp corresponding to the Julian Day given in jday or FALSE if jday is not inside the Unix epoch (Gregorian years between 1970 and 2037 or 2440588 <= jday <= 2465342 ). The time returned is localtime (and not GMT).
cal_to_jd	;	Converts from a supported calendar to Julian Day Count	;	int cal_to_jd ( int $calendar, int $month, int $day, int $year )	;	cal_to_jd() calculates the Julian day count for a date in the specified calendar. Supported calendars are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.
cal_from_jd	;	Converts from Julian Day Count to a supported calendar	;	array cal_from_jd ( int $jd, int $calendar )	;	cal_from_jd() converts the Julian day given in jd into a date of the specified calendar. Supported calendar values are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.
cal_days_in_month	;	Return the number of days in a month for a given year and calendar	;	int cal_days_in_month ( int $calendar, int $month, int $year )	;	This function will return the number of days in the month of year for the specified calendar.
cal_info	;	Returns information about a particular calendar	;	array cal_info ([ int $calendar = -1 ] )	;	cal_info() returns information on the specified calendar.
ctype_alnum	;	Check for alphanumeric character(s)	;	bool ctype_alnum ( string $text )	;	Checks if all of the characters in the provided string , text, are alphanumeric.
ctype_alpha	;	Check for alphabetic character(s)	;	bool ctype_alpha ( string $text )	;	Checks if all of the characters in the provided string , text, are alphabetic. In the standard C locale letters are just [A-Za-z] and ctype_alpha() is equivalent to (ctype_upper($text) || ctype_lower($text)) if $text is just a single character, but other languages have letters that are considered neither upper nor lower case.
ctype_cntrl	;	Check for control character(s)	;	bool ctype_cntrl ( string $text )	;	Checks if all of the characters in the provided string , text, are control characters. Control characters are e.g. line feed, tab, escape.
ctype_digit	;	Check for numeric character(s)	;	bool ctype_digit ( string $text )	;	Checks if all of the characters in the provided string , text, are numerical.
ctype_lower	;	Check for lowercase character(s)	;	bool ctype_lower ( string $text )	;	Checks if all of the characters in the provided string , text, are lowercase letters.
ctype_graph	;	Check for any printable character(s) except space	;	bool ctype_graph ( string $text )	;	Checks if all of the characters in the provided string , text, creates visible output.
ctype_print	;	Check for printable character(s)	;	bool ctype_print ( string $text )	;	Checks if all of the characters in the provided string , text, are printable.
ctype_punct	;	Check for any printable character which is not whitespace or an    alphanumeric character	;	bool ctype_punct ( string $text )	;	Checks if all of the characters in the provided string , text, are punctuation character.
ctype_space	;	Check for whitespace character(s)	;	bool ctype_space ( string $text )	;	Checks if all of the characters in the provided string , text, creates whitespace.
ctype_upper	;	Check for uppercase character(s)	;	bool ctype_upper ( string $text )	;	Checks if all of the characters in the provided string , text, are uppercase characters.
ctype_xdigit	;	Check for character(s) representing a hexadecimal digit	;	bool ctype_xdigit ( string $text )	;	Checks if all of the characters in the provided string , text, are hexadecimal 'digits'.
curl_init	;	Initialize a cURL session	;	resource curl_init ([ string $url = NULL ] )	;	Initializes a new session and return a cURL handle for use with the curl_setopt() , curl_exec() , and curl_close() functions.
curl_copy_handle	;	Copy a cURL handle along with all of its preferences	;	resource curl_copy_handle ( resource $ch )	;	Copies a cURL handle keeping the same preferences.
curl_version	;	Gets cURL version information	;	array curl_version ([ int $age = CURLVERSION_NOW ] )	;	Returns information about the cURL version.
curl_setopt	;	Set an option for a cURL transfer	;	bool curl_setopt ( resource $ch, int $option, mixed $value )	;	Sets an option on the given cURL session handle.
curl_setopt_array	;	Set multiple options for a cURL transfer	;	bool curl_setopt_array ( resource $ch, array $options )	;	Sets multiple options for a cURL session. This function is useful for setting a large amount of cURL options without repetitively calling curl_setopt() .
curl_exec	;	Perform a cURL session	;	mixed curl_exec ( resource $ch )	;	Execute the given cURL session.
curl_getinfo	;	Get information regarding a specific transfer	;	mixed curl_getinfo ( resource $ch [, int $opt = 0 ] )	;	Gets information about the last transfer.
curl_error	;	Return a string containing the last error for the current session	;	string curl_error ( resource $ch )	;	Returns a clear text error message for the last cURL operation.
curl_errno	;	Return the last error number	;	int curl_errno ( resource $ch )	;	Returns the error number for the last cURL operation.
curl_close	;	Close a cURL session	;	void curl_close ( resource $ch )	;	Closes a cURL session and frees all resources. The cURL handle, ch, is also deleted.
curl_multi_init	;	Returns a new cURL multi handle	;	resource curl_multi_init ( void )	;	Allows the processing of multiple cURL handles in parallel.
curl_multi_add_handle	;	Add a normal cURL handle to a cURL multi handle	;	int curl_multi_add_handle ( resource $mh, resource $ch )	;	Adds the ch handle to the multi handle mh
curl_multi_remove_handle	;	Remove a multi handle from a set of cURL handles	;	int curl_multi_remove_handle ( resource $mh, resource $ch )	;	Removes a given ch handle from the given mh handle. When the ch handle has been removed, it is again perfectly legal to run curl_exec() on this handle. Removing the ch handle while being used, will effectively halt the transfer in progress involving that handle.
curl_multi_select	;	Wait for activity on any curl_multi connection	;	int curl_multi_select ( resource $mh [, float $timeout = 1.0 ] )	;	Blocks until there is activity on any of the curl_multi connections.
curl_multi_exec	;	Run the sub-connections of the current cURL handle	;	int curl_multi_exec ( resource $mh, int &$still_running )	;	Processes each of the handles in the stack. This method can be called whether or not a handle needs to read or write data.
curl_multi_getcontent	;	Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set	;	string curl_multi_getcontent ( resource $ch )	;	If CURLOPT_RETURNTRANSFER is an option that is set for a specific handle, then this function will return the content of that cURL handle in the form of a string.
curl_multi_info_read	;	Get information about the current transfers	;	array curl_multi_info_read ( resource $mh [, int &$msgs_in_queue = NULL ] )	;	Ask the multi handle if there are any messages or information from the individual transfers. Messages may include information such as an error code from the transfer or just the fact that a transfer is completed.
curl_multi_close	;	Close a set of cURL handles	;	void curl_multi_close ( resource $mh )	;	Closes a set of cURL handles.
dba_open	;	Open database	;	resource dba_open ( string $path, string $mode [, string $handler [, mixed $... ]] )	;	dba_open() establishes a database instance for path with mode using handler.
dba_popen	;	Open database persistently	;	resource dba_popen ( string $path, string $mode [, string $handler [, mixed $... ]] )	;	dba_popen() establishes a persistent database instance for path with mode using handler.
dba_close	;	Close a DBA database	;	void dba_close ( resource $handle )	;	dba_close() closes the established database and frees all resources of the specified database handle.
dba_delete	;	Delete DBA entry specified by key	;	bool dba_delete ( string $key, resource $handle )	;	dba_delete() deletes the specified entry from the database.
dba_exists	;	Check whether key exists	;	bool dba_exists ( string $key, resource $handle )	;	dba_exists() checks whether the specified key exists in the database.
dba_fetch	;	Fetch data specified by key	;	string dba_fetch ( string $key, int $skip, resource $handle )	;	dba_fetch() fetches the data specified by key from the database specified with handle.
dba_insert	;	Insert entry	;	bool dba_insert ( string $key, string $value, resource $handle )	;	dba_insert() inserts the entry described with key and value into the database.
dba_replace	;	Replace or insert entry	;	bool dba_replace ( string $key, string $value, resource $handle )	;	dba_replace() replaces or inserts the entry described with key and value into the database specified by handle.
dba_firstkey	;	Fetch first key	;	string dba_firstkey ( resource $handle )	;	dba_firstkey() returns the first key of the database and resets the internal key pointer. This permits a linear search through the whole database.
dba_nextkey	;	Fetch next key	;	string dba_nextkey ( resource $handle )	;	dba_nextkey() returns the next key of the database and advances the internal key pointer.
dba_optimize	;	Optimize database	;	bool dba_optimize ( resource $handle )	;	dba_optimize() optimizes the underlying database.
dba_sync	;	Synchronize database	;	bool dba_sync ( resource $handle )	;	dba_sync() synchronizes the database. This will probably trigger a physical write to the disk, if supported.
dba_handlers	;	List all the handlers available	;	array dba_handlers ([ bool $full_info = false ] )	;	dba_handlers() list all the handlers supported by this extension.
dba_list	;	List all open database files	;	array dba_list ( void )	;	dba_list() list all open database files.
dba_key_split	;	Splits a key in string representation into array representation	;	mixed dba_key_split ( mixed $key )	;	dba_key_split() splits a key (string representation) into an array representation.
dom_import_simplexml	;	Gets a DOMElement object from a    SimpleXMLElement object	;	DOMElement dom_import_simplexml ( SimpleXMLElement $node )	;	This function takes the node node of class SimpleXML and makes it into a DOMElement node. This new object can then be used as a native DOMElement node.
exif_read_data	;	Reads the EXIF headers from JPEG or TIFF	;	array exif_read_data ( string $filename [, string $sections = NULL [, bool $arrays = false [, bool $thumbnail = false ]]] )	;	exif_read_data() reads the EXIF headers from a JPEG or TIFF image file. This way you can read meta data generated by digital cameras.
read_exif_data	;	Alias of  exif_read_data()	;		;	
exif_tagname	;	Get the header name for an index	;	string exif_tagname ( int $index )	;	
exif_thumbnail	;	Retrieve the embedded thumbnail of a TIFF or JPEG image	;	string exif_thumbnail ( string $filename [, int &$width [, int &$height [, int &$imagetype ]]] )	;	exif_thumbnail() reads the embedded thumbnail of a TIFF or JPEG image.
exif_imagetype	;	Determine the type of an image	;	int exif_imagetype ( string $filename )	;	exif_imagetype() reads the first bytes of an image and checks its signature.
finfo_open	;	Create a new fileinfo resource	;	finfo::__construct() ([ int $options = FILEINFO_NONE [, string $magic_file = NULL ]] )	;	This function opens a magic database and returns its resource.
finfo_close	;	Close fileinfo resource	;	bool finfo_close ( resource $finfo )	;	This function closes the resource opened by finfo_open() .
finfo_set_flags	;	Set libmagic configuration options	;	bool finfo::set_flags ( int $options )	;	This function sets various Fileinfo options. Options can be set also directly in finfo_open() or other Fileinfo functions.
finfo_file	;	Return information about a file	;	string finfo::file ( string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )	;	This function is used to get information about a file.
finfo_buffer	;	Return information about a string buffer	;	string finfo::buffer ( string $string = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )	;	This function is used to get information about binary data in a string.
mime_content_type	;	Detect MIME Content-type for a file (deprecated)	;	string mime_content_type ( string $filename )	;	Returns the MIME content type for a file as determined by using information from the magic.mime file.
filter_input	;	Gets a specific external variable by name and optionally filters it	;	mixed filter_input ( int $type, string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options ]] )	;	
filter_var	;	Filters a variable with a specified filter	;	mixed filter_var ( mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options ]] )	;	
filter_input_array	;	Gets external variables and optionally filters them	;	mixed filter_input_array ( int $type [, mixed $definition ] )	;	This function is useful for retrieving many values without repetitively calling filter_input() .
filter_var_array	;	Gets multiple variables and optionally filters them	;	mixed filter_var_array ( array $data [, mixed $definition ] )	;	This function is useful for retrieving many values without repetitively calling filter_var() .
filter_list	;	Returns a list of all supported filters	;	array filter_list ( void )	;	
filter_has_var	;	Checks if variable of specified type exists	;	bool filter_has_var ( int $type, string $variable_name )	;	
filter_id	;	Returns the filter ID belonging to a named filter	;	int filter_id ( string $filtername )	;	
ftp_connect	;	Opens an FTP connection	;	resource ftp_connect ( string $host [, int $port = 21 [, int $timeout = 90 ]] )	;	ftp_connect() opens an FTP connection to the specified host.
ftp_ssl_connect	;	Opens an Secure SSL-FTP connection	;	resource ftp_ssl_connect ( string $host [, int $port = 21 [, int $timeout = 90 ]] )	;	ftp_ssl_connect() opens an explicit SSL-FTP connection to the specified host.
ftp_login	;	Logs in to an FTP connection	;	bool ftp_login ( resource $ftp_stream, string $username, string $password )	;	Logs in to the given FTP stream.
ftp_pwd	;	Returns the current directory name	;	string ftp_pwd ( resource $ftp_stream )	;	
ftp_cdup	;	Changes to the parent directory	;	bool ftp_cdup ( resource $ftp_stream )	;	Changes to the parent directory.
ftp_chdir	;	Changes the current directory on a FTP server	;	bool ftp_chdir ( resource $ftp_stream, string $directory )	;	Changes the current directory to the specified one.
ftp_exec	;	Requests execution of a command on the FTP server	;	bool ftp_exec ( resource $ftp_stream, string $command )	;	Sends a SITE EXEC command request to the FTP server.
ftp_raw	;	Sends an arbitrary command to an FTP server	;	array ftp_raw ( resource $ftp_stream, string $command )	;	Sends an arbitrary command to the FTP server.
ftp_mkdir	;	Creates a directory	;	string ftp_mkdir ( resource $ftp_stream, string $directory )	;	Creates the specified directory on the FTP server.
ftp_rmdir	;	Removes a directory	;	bool ftp_rmdir ( resource $ftp_stream, string $directory )	;	Removes the specified directory on the FTP server.
ftp_chmod	;	Set permissions on a file via FTP	;	int ftp_chmod ( resource $ftp_stream, int $mode, string $filename )	;	Sets the permissions on the specified remote file to mode.
ftp_alloc	;	Allocates space for a file to be uploaded	;	bool ftp_alloc ( resource $ftp_stream, int $filesize [, string &$result ] )	;	Sends an ALLO command to the remote FTP server to allocate space for a file to be uploaded.
ftp_nlist	;	Returns a list of files in the given directory	;	array ftp_nlist ( resource $ftp_stream, string $directory )	;	
ftp_rawlist	;	Returns a detailed list of files in the given directory	;	array ftp_rawlist ( resource $ftp_stream, string $directory [, bool $recursive = false ] )	;	ftp_rawlist() executes the FTP LIST command, and returns the result as an array.
ftp_systype	;	Returns the system type identifier of the remote FTP server	;	string ftp_systype ( resource $ftp_stream )	;	Returns the system type identifier of the remote FTP server.
ftp_pasv	;	Turns passive mode on or off	;	bool ftp_pasv ( resource $ftp_stream, bool $pasv )	;	ftp_pasv() turns on or off passive mode. In passive mode, data connections are initiated by the client, rather than by the server. It may be needed if the client is behind firewall.
ftp_get	;	Downloads a file from the FTP server	;	bool ftp_get ( resource $ftp_stream, string $local_file, string $remote_file, int $mode [, int $resumepos = 0 ] )	;	ftp_get() retrieves a remote file from the FTP server, and saves it into a local file.
ftp_fget	;	Downloads a file from the FTP server and saves to an open file	;	bool ftp_fget ( resource $ftp_stream, resource $handle, string $remote_file, int $mode [, int $resumepos = 0 ] )	;	ftp_fget() retrieves remote_file from the FTP server, and writes it to the given file pointer.
ftp_put	;	Uploads a file to the FTP server	;	bool ftp_put ( resource $ftp_stream, string $remote_file, string $local_file, int $mode [, int $startpos = 0 ] )	;	ftp_put() stores a local file on the FTP server.
ftp_fput	;	Uploads from an open file to the FTP server	;	bool ftp_fput ( resource $ftp_stream, string $remote_file, resource $handle, int $mode [, int $startpos = 0 ] )	;	ftp_fput() uploads the data from a file pointer to a remote file on the FTP server.
ftp_size	;	Returns the size of the given file	;	int ftp_size ( resource $ftp_stream, string $remote_file )	;	ftp_size() returns the size of the given file in bytes.
ftp_mdtm	;	Returns the last modified time of the given file	;	int ftp_mdtm ( resource $ftp_stream, string $remote_file )	;	ftp_mdtm() gets the last modified time for a remote file.
ftp_rename	;	Renames a file or a directory on the FTP server	;	bool ftp_rename ( resource $ftp_stream, string $oldname, string $newname )	;	ftp_rename() renames a file or a directory on the FTP server.
ftp_delete	;	Deletes a file on the FTP server	;	bool ftp_delete ( resource $ftp_stream, string $path )	;	ftp_delete() deletes the file specified by path from the FTP server.
ftp_site	;	Sends a SITE command to the server	;	bool ftp_site ( resource $ftp_stream, string $command )	;	ftp_site() sends the given SITE command to the FTP server.
ftp_close	;	Closes an FTP connection	;	bool ftp_close ( resource $ftp_stream )	;	ftp_close() closes the given link identifier and releases the resource .
ftp_set_option	;	Set miscellaneous runtime FTP options	;	bool ftp_set_option ( resource $ftp_stream, int $option, mixed $value )	;	This function controls various runtime options for the specified FTP stream.
ftp_get_option	;	Retrieves various runtime behaviours of the current FTP stream	;	mixed ftp_get_option ( resource $ftp_stream, int $option )	;	This function returns the value for the requested option from the specified FTP connection.
ftp_nb_fget	;	Retrieves a file from the FTP server and writes it to an open file (non-blocking)	;	int ftp_nb_fget ( resource $ftp_stream, resource $handle, string $remote_file, int $mode [, int $resumepos = 0 ] )	;	ftp_nb_fget() retrieves a remote file from the FTP server.
ftp_nb_get	;	Retrieves a file from the FTP server and writes it to a local file (non-blocking)	;	int ftp_nb_get ( resource $ftp_stream, string $local_file, string $remote_file, int $mode [, int $resumepos = 0 ] )	;	ftp_nb_get() retrieves a remote file from the FTP server, and saves it into a local file.
ftp_nb_continue	;	Continues retrieving/sending a file (non-blocking)	;	int ftp_nb_continue ( resource $ftp_stream )	;	Continues retrieving/sending a file non-blocking.
ftp_nb_put	;	Stores a file on the FTP server (non-blocking)	;	int ftp_nb_put ( resource $ftp_stream, string $remote_file, string $local_file, int $mode [, int $startpos = 0 ] )	;	ftp_nb_put() stores a local file on the FTP server.
ftp_nb_fput	;	Stores a file from an open file to the FTP server (non-blocking)	;	int ftp_nb_fput ( resource $ftp_stream, string $remote_file, resource $handle, int $mode [, int $startpos = 0 ] )	;	ftp_nb_fput() uploads the data from a file pointer to a remote file on the FTP server.
ftp_quit	;	Alias of  ftp_close()	;		;	
gd_info	;	Retrieve information about the currently installed GD library	;	array gd_info ( void )	;	Gets information about the version and capabilities of the installed GD library.
imagearc	;	Draws an arc	;	bool imagearc ( resource $image, int $cx, int $cy, int $width, int $height, int $start, int $end, int $color )	;	imagearc() draws an arc of circle centered at the given coordinates.
imageellipse	;	Draw an ellipse	;	bool imageellipse ( resource $image, int $cx, int $cy, int $width, int $height, int $color )	;	Draws an ellipse centered at the specified coordinates.
imagechar	;	Draw a character horizontally	;	bool imagechar ( resource $image, int $font, int $x, int $y, string $c, int $color )	;	imagechar() draws the first character of c in the image identified by image with its upper-left at x,y (top left is 0, 0) with the color color.
imagecharup	;	Draw a character vertically	;	bool imagecharup ( resource $image, int $font, int $x, int $y, string $c, int $color )	;	Draws the character c vertically at the specified coordinate on the given image.
imagecolorat	;	Get the index of the color of a pixel	;	int imagecolorat ( resource $image, int $x, int $y )	;	Returns the index of the color of the pixel at the specified location in the image specified by image.
imagecolorallocate	;	Allocate a color for an image	;	int imagecolorallocate ( resource $image, int $red, int $green, int $blue )	;	Returns a color identifier representing the color composed of the given RGB components.
imagepalettecopy	;	Copy the palette from one image to another	;	void imagepalettecopy ( resource $destination, resource $source )	;	imagepalettecopy() copies the palette from the source image to the destination image.
imagecreatefromstring	;	Create a new image from the image stream in the string	;	resource imagecreatefromstring ( string $image )	;	imagecreatefromstring() returns an image identifier representing the image obtained from the given image. These types will be automatically detected if your build of PHP supports them: JPEG, PNG, GIF, WBMP, and GD2.
imagecolorclosest	;	Get the index of the closest color to the specified color	;	int imagecolorclosest ( resource $image, int $red, int $green, int $blue )	;	Returns the index of the color in the palette of the image which is "closest" to the specified RGB value.
imagecolorclosesthwb	;	Get the index of the color which has the hue, white and blackness	;	int imagecolorclosesthwb ( resource $image, int $red, int $green, int $blue )	;	Get the index of the color which has the hue, white and blackness nearest the given color.
imagecolordeallocate	;	De-allocate a color for an image	;	bool imagecolordeallocate ( resource $image, int $color )	;	De-allocates a color previously allocated with imagecolorallocate() or imagecolorallocatealpha() .
imagecolorresolve	;	Get the index of the specified color or its closest possible alternative	;	int imagecolorresolve ( resource $image, int $red, int $green, int $blue )	;	This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative.
imagecolorexact	;	Get the index of the specified color	;	int imagecolorexact ( resource $image, int $red, int $green, int $blue )	;	Returns the index of the specified color in the palette of the image.
imagecolorset	;	Set the color for the specified palette index	;	void imagecolorset ( resource $image, int $index, int $red, int $green, int $blue [, int $alpha = 0 ] )	;	This sets the specified index in the palette to the specified color. This is useful for creating flood-fill-like effects in palleted images without the overhead of performing the actual flood-fill.
imagecolortransparent	;	Define a color as transparent	;	int imagecolortransparent ( resource $image [, int $color ] )	;	Sets the transparent color in the given image.
imagecolorstotal	;	Find out the number of colors in an image's palette	;	int imagecolorstotal ( resource $image )	;	Returns the number of colors in an image palette.
imagecolorsforindex	;	Get the colors for an index	;	array imagecolorsforindex ( resource $image, int $index )	;	Gets the color for a specified index.
imagecopy	;	Copy part of an image	;	bool imagecopy ( resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h )	;	Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.
imagecopymerge	;	Copy and merge part of an image	;	bool imagecopymerge ( resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h, int $pct )	;	Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.
imagecopymergegray	;	Copy and merge part of an image with gray scale	;	bool imagecopymergegray ( resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h, int $pct )	;	imagecopymergegray() copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.
imagecopyresized	;	Copy and resize part of an image	;	bool imagecopyresized ( resource $dst_image, resource $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_w, int $dst_h, int $src_w, int $src_h )	;	imagecopyresized() copies a rectangular portion of one image to another image. dst_image is the destination image, src_image is the source image identifier.
imagecreate	;	Create a new palette based image	;	resource imagecreate ( int $width, int $height )	;	imagecreate() returns an image identifier representing a blank image of specified size.
imagecreatetruecolor	;	Create a new true color image	;	resource imagecreatetruecolor ( int $width, int $height )	;	imagecreatetruecolor() returns an image identifier representing a black image of the specified size.
imageistruecolor	;	Finds whether an image is a truecolor image	;	bool imageistruecolor ( resource $image )	;	imageistruecolor() finds whether the image image is a truecolor image.
imagetruecolortopalette	;	Convert a true color image to a palette image	;	bool imagetruecolortopalette ( resource $image, bool $dither, int $ncolors )	;	imagetruecolortopalette() converts a truecolor image to a palette image. The code for this function was originally drawn from the Independent JPEG Group library code, which is excellent. The code has been modified to preserve as much alpha channel information as possible in the resulting palette, in addition to preserving colors as well as possible. This does not work as well as might be hoped. It is usually best to simply produce a truecolor output image instead, which guarantees the highest output quality.
imagesetthickness	;	Set the thickness for line drawing	;	bool imagesetthickness ( resource $image, int $thickness )	;	imagesetthickness() sets the thickness of the lines drawn when drawing rectangles, polygons, ellipses etc. etc. to thickness pixels.
imagefilledarc	;	Draw a partial arc and fill it	;	bool imagefilledarc ( resource $image, int $cx, int $cy, int $width, int $height, int $start, int $end, int $color, int $style )	;	Draws a partial arc centered at the specified coordinate in the given image.
imagefilledellipse	;	Draw a filled ellipse	;	bool imagefilledellipse ( resource $image, int $cx, int $cy, int $width, int $height, int $color )	;	Draws an ellipse centered at the specified coordinate on the given image.
imagealphablending	;	Set the blending mode for an image	;	bool imagealphablending ( resource $image, bool $blendmode )	;	imagealphablending() allows for two different modes of drawing on truecolor images. In blending mode, the alpha channel component of the color supplied to all drawing function, such as imagesetpixel() determines how much of the underlying color should be allowed to shine through. As a result, gd automatically blends the existing color at that point with the drawing color, and stores the result in the image. The resulting pixel is opaque. In non-blending mode, the drawing color is copied literally with its alpha channel information, replacing the destination pixel. Blending mode is not available when drawing on palette images.
imagesavealpha	;	Set the flag to save full alpha channel information (as opposed to single-color transparency) when saving PNG images	;	bool imagesavealpha ( resource $image, bool $saveflag )	;	imagesavealpha() sets the flag to attempt to save full alpha channel information (as opposed to single-color transparency) when saving PNG images.
imagecolorallocatealpha	;	Allocate a color for an image	;	int imagecolorallocatealpha ( resource $image, int $red, int $green, int $blue, int $alpha )	;	imagecolorallocatealpha() behaves identically to imagecolorallocate() with the addition of the transparency parameter alpha.
imagecolorresolvealpha	;	Get the index of the specified color + alpha or its closest possible alternative	;	int imagecolorresolvealpha ( resource $image, int $red, int $green, int $blue, int $alpha )	;	This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative.
imagecolorclosestalpha	;	Get the index of the closest color to the specified color + alpha	;	int imagecolorclosestalpha ( resource $image, int $red, int $green, int $blue, int $alpha )	;	Returns the index of the color in the palette of the image which is "closest" to the specified RGB value and alpha level.
imagecolorexactalpha	;	Get the index of the specified color + alpha	;	int imagecolorexactalpha ( resource $image, int $red, int $green, int $blue, int $alpha )	;	Returns the index of the specified color+alpha in the palette of the image.
imagecopyresampled	;	Copy and resize part of an image with resampling	;	bool imagecopyresampled ( resource $dst_image, resource $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_w, int $dst_h, int $src_w, int $src_h )	;	imagecopyresampled() copies a rectangular portion of one image to another image, smoothly interpolating pixel values so that, in particular, reducing the size of an image still retains a great deal of clarity.
imagerotate	;	Rotate an image with a given angle	;	resource imagerotate ( resource $image, float $angle, int $bgd_color [, int $ignore_transparent = 0 ] )	;	Rotates the image image using the given angle in degrees.
imageantialias	;	Should antialias functions be used or not	;	bool imageantialias ( resource $image, bool $enabled )	;	Activate the fast drawing antialiased methods for lines and wired polygons. It does not support alpha components. It works using a direct blend operation. It works only with truecolor images.
imagesettile	;	Set the tile image for filling	;	bool imagesettile ( resource $image, resource $tile )	;	imagesettile() sets the tile image to be used by all region filling functions (such as imagefill() and imagefilledpolygon() ) when filling with the special color IMG_COLOR_TILED.
imagesetbrush	;	Set the brush image for line drawing	;	bool imagesetbrush ( resource $image, resource $brush )	;	imagesetbrush() sets the brush image to be used by all line drawing functions (such as imageline() and imagepolygon() ) when drawing with the special colors IMG_COLOR_BRUSHED or IMG_COLOR_STYLEDBRUSHED.
imagesetstyle	;	Set the style for line drawing	;	bool imagesetstyle ( resource $image, array $style )	;	imagesetstyle() sets the style to be used by all line drawing functions (such as imageline() and imagepolygon() ) when drawing with the special color IMG_COLOR_STYLED or lines of images with color IMG_COLOR_STYLEDBRUSHED.
imagecreatefrompng	;	Create a new image from file or URL	;	resource imagecreatefrompng ( string $filename )	;	imagecreatefrompng() returns an image identifier representing the image obtained from the given filename.
imagecreatefromgif	;	Create a new image from file or URL	;	resource imagecreatefromgif ( string $filename )	;	imagecreatefromgif() returns an image identifier representing the image obtained from the given filename.
imagecreatefromjpeg	;	Create a new image from file or URL	;	resource imagecreatefromjpeg ( string $filename )	;	imagecreatefromjpeg() returns an image identifier representing the image obtained from the given filename.
imagecreatefromwbmp	;	Create a new image from file or URL	;	resource imagecreatefromwbmp ( string $filename )	;	imagecreatefromwbmp() returns an image identifier representing the image obtained from the given filename.
imagecreatefromxbm	;	Create a new image from file or URL	;	resource imagecreatefromxbm ( string $filename )	;	imagecreatefromxbm() returns an image identifier representing the image obtained from the given filename.
imagecreatefromgd	;	Create a new image from GD file or URL	;	resource imagecreatefromgd ( string $filename )	;	Create a new image from GD file or URL.
imagecreatefromgd2	;	Create a new image from GD2 file or URL	;	resource imagecreatefromgd2 ( string $filename )	;	Create a new image from GD2 file or URL.
imagecreatefromgd2part	;	Create a new image from a given part of GD2 file or URL	;	resource imagecreatefromgd2part ( string $filename, int $srcX, int $srcY, int $width, int $height )	;	Create a new image from a given part of GD2 file or URL.
imagepng	;	Output a PNG image to either the browser or a file	;	bool imagepng ( resource $image [, string $filename [, int $quality [, int $filters ]]] )	;	Outputs or saves a PNG image from the given image.
imagegif	;	Output image to browser or file	;	bool imagegif ( resource $image [, string $filename ] )	;	imagegif() creates the GIF file in filename from the image image. The image argument is the return from the imagecreate() or imagecreatefrom* function.
imagejpeg	;	Output image to browser or file	;	bool imagejpeg ( resource $image [, string $filename [, int $quality ]] )	;	imagejpeg() creates a JPEG file from the given image.
imagewbmp	;	Output image to browser or file	;	bool imagewbmp ( resource $image [, string $filename [, int $foreground ]] )	;	imagewbmp() outputs or save a WBMP version of the given image.
imagegd	;	Output GD image to browser or file	;	bool imagegd ( resource $image [, string $filename ] )	;	Outputs a GD image to the given filename.
imagegd2	;	Output GD2 image to browser or file	;	bool imagegd2 ( resource $image [, string $filename [, int $chunk_size [, int $type = IMG_GD2_RAW ]]] )	;	Outputs a GD2 image to the given filename.
imagedestroy	;	Destroy an image	;	bool imagedestroy ( resource $image )	;	imagedestroy() frees any memory associated with image image.
imagegammacorrect	;	Apply a gamma correction to a GD image	;	bool imagegammacorrect ( resource $image, float $inputgamma, float $outputgamma )	;	Applies gamma correction to the given gd image given an input and an output gamma.
imagefill	;	Flood fill	;	bool imagefill ( resource $image, int $x, int $y, int $color )	;	Performs a flood fill starting at the given coordinate (top left is 0, 0) with the given color in the image.
imagefilledpolygon	;	Draw a filled polygon	;	bool imagefilledpolygon ( resource $image, array $points, int $num_points, int $color )	;	imagefilledpolygon() creates a filled polygon in the given image.
imagefilledrectangle	;	Draw a filled rectangle	;	bool imagefilledrectangle ( resource $image, int $x1, int $y1, int $x2, int $y2, int $color )	;	Creates a rectangle filled with color in the given image starting at point 1 and ending at point 2. 0, 0 is the top left corner of the image.
imagefilltoborder	;	Flood fill to specific color	;	bool imagefilltoborder ( resource $image, int $x, int $y, int $border, int $color )	;	imagefilltoborder() performs a flood fill whose border color is defined by border. The starting point for the fill is x, y (top left is 0, 0) and the region is filled with color color.
imagefontwidth	;	Get font width	;	int imagefontwidth ( int $font )	;	Returns the pixel width of a character in font.
imagefontheight	;	Get font height	;	int imagefontheight ( int $font )	;	Returns the pixel height of a character in the specified font.
imageinterlace	;	Enable or disable interlace	;	int imageinterlace ( resource $image [, int $interlace = 0 ] )	;	imageinterlace() turns the interlace bit on or off.
imageline	;	Draw a line	;	bool imageline ( resource $image, int $x1, int $y1, int $x2, int $y2, int $color )	;	Draws a line between the two given points.
imageloadfont	;	Load a new font	;	int imageloadfont ( string $file )	;	imageloadfont() loads a user-defined bitmap and returns its identifier.
imagepolygon	;	Draws a polygon	;	bool imagepolygon ( resource $image, array $points, int $num_points, int $color )	;	imagepolygon() creates a polygon in the given image.
imagerectangle	;	Draw a rectangle	;	bool imagerectangle ( resource $image, int $x1, int $y1, int $x2, int $y2, int $color )	;	imagerectangle() creates a rectangle starting at the specified coordinates.
imagesetpixel	;	Set a single pixel	;	bool imagesetpixel ( resource $image, int $x, int $y, int $color )	;	imagesetpixel() draws a pixel at the specified coordinate.
imagestring	;	Draw a string horizontally	;	bool imagestring ( resource $image, int $font, int $x, int $y, string $string, int $color )	;	Draws a string at the given coordinates.
imagestringup	;	Draw a string vertically	;	bool imagestringup ( resource $image, int $font, int $x, int $y, string $string, int $color )	;	Draws a string vertically at the given coordinates.
imagesx	;	Get image width	;	int imagesx ( resource $image )	;	Returns the width of the given image resource.
imagesy	;	Get image height	;	int imagesy ( resource $image )	;	Returns the height of the given image resource.
imagedashedline	;	Draw a dashed line	;	bool imagedashedline ( resource $image, int $x1, int $y1, int $x2, int $y2, int $color )	;	This function is deprecated. Use combination of imagesetstyle() and imageline() instead.
imagettfbbox	;	Give the bounding box of a text using TrueType fonts	;	array imagettfbbox ( float $size, float $angle, string $fontfile, string $text )	;	This function calculates and returns the bounding box in pixels for a TrueType text.
imagettftext	;	Write text to the image using TrueType fonts	;	array imagettftext ( resource $image, float $size, float $angle, int $x, int $y, int $color, string $fontfile, string $text )	;	Writes the given text into the image using TrueType fonts.
imageftbbox	;	Give the bounding box of a text using fonts via freetype2	;	array imageftbbox ( float $size, float $angle, string $fontfile, string $text [, array $extrainfo ] )	;	This function calculates and returns the bounding box in pixels for a FreeType text.
imagefttext	;	Write text to the image using fonts using FreeType 2	;	array imagefttext ( resource $image, float $size, float $angle, int $x, int $y, int $color, string $fontfile, string $text [, array $extrainfo ] )	;	
imagetypes	;	Return the image types supported by this PHP build	;	int imagetypes ( void )	;	Returns the image types supported by the current PHP installation.
jpeg2wbmp	;	Convert JPEG image file to WBMP image file	;	bool jpeg2wbmp ( string $jpegname, string $wbmpname, int $dest_height, int $dest_width, int $threshold )	;	Converts a JPEG file into a WBMP file.
png2wbmp	;	Convert PNG image file to WBMP image file	;	bool png2wbmp ( string $pngname, string $wbmpname, int $dest_height, int $dest_width, int $threshold )	;	Converts a PNG file into a WBMP file.
image2wbmp	;	Output image to browser or file	;	bool image2wbmp ( resource $image [, string $filename [, int $threshold ]] )	;	image2wbmp() outputs or save a WBMP version of the given image.
imagelayereffect	;	Set the alpha blending flag to use the bundled libgd layering effects	;	bool imagelayereffect ( resource $image, int $effect )	;	Set the alpha blending flag to use the bundled libgd layering effects.
imagexbm	;	Output XBM image to browser or file	;	bool imagexbm ( resource $image, string $filename [, int $foreground ] )	;	Outputs or save an XBM version of the given image.
imagecolormatch	;	Makes the colors of the palette version of an image more closely match the true color version	;	bool imagecolormatch ( resource $image1, resource $image2 )	;	Makes the colors of the palette version of an image more closely match the true color version.
imagefilter	;	Applies a filter to an image	;	bool imagefilter ( resource $image, int $filtertype [, int $arg1 [, int $arg2 [, int $arg3 [, int $arg4 ]]]] )	;	imagefilter() applies the given filter filtertype on the image.
imageconvolution	;	Apply a 3x3 convolution matrix, using coefficient and offset	;	bool imageconvolution ( resource $image, array $matrix, float $div, float $offset )	;	Applies a convolution matrix on the image, using the given coefficient and offset.
hash	;	Generate a hash value (message digest)	;	string hash ( string $algo, string $data [, bool $raw_output = false ] )	;	
hash_file	;	Generate a hash value using the contents of a given file	;	string hash_file ( string $algo, string $filename [, bool $raw_output = false ] )	;	
hash_hmac	;	Generate a keyed hash value using the HMAC method	;	string hash_hmac ( string $algo, string $data, string $key [, bool $raw_output = false ] )	;	
hash_hmac_file	;	Generate a keyed hash value using the HMAC method and the contents of a given file	;	string hash_hmac_file ( string $algo, string $filename, string $key [, bool $raw_output = false ] )	;	
hash_init	;	Initialize an incremental hashing context	;	resource hash_init ( string $algo [, int $options = 0 [, string $key = NULL ]] )	;	
hash_update	;	Pump data into an active hashing context	;	bool hash_update ( resource $context, string $data )	;	
hash_update_stream	;	Pump data into an active hashing context from an open stream	;	int hash_update_stream ( resource $context, resource $handle [, int $length = -1 ] )	;	
hash_update_file	;	Pump data into an active hashing context from a file	;	bool hash_update_file ( resource $context, string $filename [, resource $context = NULL ] )	;	
hash_final	;	Finalize an incremental hash and return resulting digest	;	string hash_final ( resource $context [, bool $raw_output = false ] )	;	
hash_copy	;	Copy hashing context	;	resource hash_copy ( resource $context )	;	
hash_algos	;	Return a list of registered hashing algorithms	;	array hash_algos ( void )	;	
iconv	;	Convert string to requested character encoding	;	string iconv ( string $in_charset, string $out_charset, string $str )	;	Performs a character set conversion on the string str from in_charset to out_charset.
ob_iconv_handler	;	Convert character encoding as output buffer handler	;	string ob_iconv_handler ( string $contents, int $status )	;	Converts the string encoded in internal_encoding to output_encoding.
iconv_get_encoding	;	Retrieve internal configuration variables of iconv extension	;	mixed iconv_get_encoding ([ string $type = "all" ] )	;	Retrieve internal configuration variables of iconv extension.
iconv_set_encoding	;	Set current setting for character encoding conversion	;	bool iconv_set_encoding ( string $type, string $charset )	;	Changes the value of the internal configuration variable specified by type to charset.
iconv_strlen	;	Returns the character count of string	;	int iconv_strlen ( string $str [, string $charset = ini_get("iconv.internal_encoding") ] )	;	In contrast to strlen() , iconv_strlen() counts the occurrences of characters in the given byte sequence str on the basis of the specified character set, the result of which is not necessarily identical to the length of the string in byte.
iconv_substr	;	Cut out part of a string	;	string iconv_substr ( string $str, int $offset [, int $length = iconv_strlen($str, $charset) [, string $charset = ini_get("iconv.internal_encoding") ]] )	;	Cuts a portion of str specified by the offset and length parameters.
iconv_strpos	;	Finds position of first occurrence of a needle within a haystack	;	int iconv_strpos ( string $haystack, string $needle [, int $offset = 0 [, string $charset = ini_get("iconv.internal_encoding") ]] )	;	Finds position of first occurrence of a needle within a haystack.
iconv_strrpos	;	Finds the last occurrence of a needle within a haystack	;	int iconv_strrpos ( string $haystack, string $needle [, string $charset = ini_get("iconv.internal_encoding") ] )	;	Finds the last occurrence of a needle within a haystack.
iconv_mime_encode	;	Composes a MIME header field	;	string iconv_mime_encode ( string $field_name, string $field_value [, array $preferences = NULL ] )	;	Composes and returns a string that represents a valid MIME header field, which looks like the following: Subject: =?ISO-8859-1?Q?Pr=FCfung_f=FCr?= Entwerfen von einer MIME kopfzeile In the above example, "Subject" is the field name and the portion that begins with "=?ISO-8859-1?..." is the field value.
iconv_mime_decode	;	Decodes a MIME header field	;	string iconv_mime_decode ( string $encoded_header [, int $mode = 0 [, string $charset = ini_get("iconv.internal_encoding") ]] )	;	Decodes a MIME header field.
iconv_mime_decode_headers	;	Decodes multiple MIME header fields at once	;	array iconv_mime_decode_headers ( string $encoded_headers [, int $mode = 0 [, string $charset = ini_get("iconv.internal_encoding") ]] )	;	Decodes multiple MIME header fields at once.
json_encode	;	Returns the JSON representation of a value	;	string json_encode ( mixed $value [, int $options = 0 ] )	;	Returns a string containing the JSON representation of value.
json_decode	;	Decodes a JSON string	;	mixed json_decode ( string $json [, bool $assoc = false [, int $depth = 512 [, int $options = 0 ]]] )	;	Takes a JSON encoded string and converts it into a PHP variable.
json_last_error	;	Returns the last error occurred	;	int json_last_error ( void )	;	Returns the last error (if any) occurred during the last JSON encoding/decoding.
ldap_connect	;	Connect to an LDAP server	;	resource ldap_connect ([ string $hostname = NULL [, int $port = 389 ]] )	;	Establishes a connection to a LDAP server on a specified hostname and port.
ldap_close	;	Alias of  ldap_unbind()	;		;	
ldap_bind	;	Bind to LDAP directory	;	bool ldap_bind ( resource $link_identifier [, string $bind_rdn = NULL [, string $bind_password = NULL ]] )	;	Binds to the LDAP directory with specified RDN and password.
ldap_sasl_bind	;	Bind to LDAP directory using SASL	;	bool ldap_sasl_bind ( resource $link [, string $binddn = NULL [, string $password = NULL [, string $sasl_mech = NULL [, string $sasl_realm = NULL [, string $sasl_authc_id = NULL [, string $sasl_authz_id = NULL [, string $props = NULL ]]]]]]] )	;	
ldap_unbind	;	Unbind from LDAP directory	;	bool ldap_unbind ( resource $link_identifier )	;	Unbinds from the LDAP directory.
ldap_read	;	Read an entry	;	resource ldap_read ( resource $link_identifier, string $base_dn, string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )	;	Performs the search for a specified filter on the directory with the scope LDAP_SCOPE_BASE. So it is equivalent to reading an entry from the directory.
ldap_list	;	Single-level search	;	resource ldap_list ( resource $link_identifier, string $base_dn, string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )	;	Performs the search for a specified filter on the directory with the scope LDAP_SCOPE_ONELEVEL.
ldap_search	;	Search LDAP tree	;	resource ldap_search ( resource $link_identifier, string $base_dn, string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )	;	Performs the search for a specified filter on the directory with the scope of LDAP_SCOPE_SUBTREE. This is equivalent to searching the entire directory.
ldap_free_result	;	Free result memory	;	bool ldap_free_result ( resource $result_identifier )	;	Frees up the memory allocated internally to store the result. All result memory will be automatically freed when the script terminates.
ldap_count_entries	;	Count the number of entries in a search	;	int ldap_count_entries ( resource $link_identifier, resource $result_identifier )	;	Returns the number of entries stored in the result of previous search operations.
ldap_first_entry	;	Return first result id	;	resource ldap_first_entry ( resource $link_identifier, resource $result_identifier )	;	Returns the entry identifier for first entry in the result. This entry identifier is then supplied to ldap_next_entry() routine to get successive entries from the result.
ldap_next_entry	;	Get next result entry	;	resource ldap_next_entry ( resource $link_identifier, resource $result_entry_identifier )	;	Retrieve the entries stored in the result. Successive calls to the ldap_next_entry() return entries one by one till there are no more entries. The first call to ldap_next_entry() is made after the call to ldap_first_entry() with the result_entry_identifier as returned from the ldap_first_entry() .
ldap_get_entries	;	Get all result entries	;	array ldap_get_entries ( resource $link_identifier, resource $result_identifier )	;	Reads multiple entries from the given result, and then reading the attributes and multiple values.
ldap_first_attribute	;	Return first attribute	;	string ldap_first_attribute ( resource $link_identifier, resource $result_entry_identifier )	;	Gets the first attribute in the given entry. Remaining attributes are retrieved by calling ldap_next_attribute() successively.
ldap_next_attribute	;	Get the next attribute in result	;	string ldap_next_attribute ( resource $link_identifier, resource $result_entry_identifier )	;	Retrieves the attributes in an entry. The first call to ldap_next_attribute() is made with the result_entry_identifier returned from ldap_first_attribute() .
ldap_get_attributes	;	Get attributes from a search result entry	;	array ldap_get_attributes ( resource $link_identifier, resource $result_entry_identifier )	;	Reads attributes and values from an entry in the search result.
ldap_get_values	;	Get all values from a result entry	;	array ldap_get_values ( resource $link_identifier, resource $result_entry_identifier, string $attribute )	;	Reads all the values of the attribute in the entry in the result.
ldap_get_values_len	;	Get all binary values from a result entry	;	array ldap_get_values_len ( resource $link_identifier, resource $result_entry_identifier, string $attribute )	;	Reads all the values of the attribute in the entry in the result.
ldap_get_dn	;	Get the DN of a result entry	;	string ldap_get_dn ( resource $link_identifier, resource $result_entry_identifier )	;	Finds out the DN of an entry in the result.
ldap_explode_dn	;	Splits DN into its component parts	;	array ldap_explode_dn ( string $dn, int $with_attrib )	;	Splits the DN returned by ldap_get_dn() and breaks it up into its component parts. Each part is known as Relative Distinguished Name, or RDN.
ldap_dn2ufn	;	Convert DN to User Friendly Naming format	;	string ldap_dn2ufn ( string $dn )	;	Turns the specified dn, into a more user-friendly form, stripping off type names.
ldap_add	;	Add entries to LDAP directory	;	bool ldap_add ( resource $link_identifier, string $dn, array $entry )	;	Add entries in the LDAP directory.
ldap_delete	;	Delete an entry from a directory	;	bool ldap_delete ( resource $link_identifier, string $dn )	;	Deletes a particular entry in LDAP directory.
ldap_modify	;	Modify an LDAP entry	;	bool ldap_modify ( resource $link_identifier, string $dn, array $entry )	;	Modify the existing entries in the LDAP directory. The structure of the entry is same as in ldap_add() .
ldap_mod_add	;	Add attribute values to current attributes	;	bool ldap_mod_add ( resource $link_identifier, string $dn, array $entry )	;	Adds one or more attributes to the specified dn. It performs the modification at the attribute level as opposed to the object level. Object-level additions are done by the ldap_add() function.
ldap_mod_replace	;	Replace attribute values with new ones	;	bool ldap_mod_replace ( resource $link_identifier, string $dn, array $entry )	;	Replaces one or more attributes from the specified dn. It performs the modification at the attribute level as opposed to the object level. Object-level modifications are done by the ldap_modify() function.
ldap_mod_del	;	Delete attribute values from current attributes	;	bool ldap_mod_del ( resource $link_identifier, string $dn, array $entry )	;	Removes one or more attributes from the specified dn. It performs the modification at the attribute level as opposed to the object level. Object-level deletions are done by the ldap_delete() function.
ldap_errno	;	Return the LDAP error number of the last LDAP command	;	int ldap_errno ( resource $link_identifier )	;	Returns the standardized error number returned by the last LDAP command. This number can be converted into a textual error message using ldap_err2str() .
ldap_err2str	;	Convert LDAP error number into string error message	;	string ldap_err2str ( int $errno )	;	Returns the string error message explaining the error number errno. While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages. Never check for a specific error message text, but always use an error number to check.
ldap_error	;	Return the LDAP error message of the last LDAP command	;	string ldap_error ( resource $link_identifier )	;	Returns the string error message explaining the error generated by the last LDAP command for the given link_identifier. While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages. Never check for a specific error message text, but always use an error number to check.
ldap_compare	;	Compare value of attribute found in entry specified with DN	;	mixed ldap_compare ( resource $link_identifier, string $dn, string $attribute, string $value )	;	Compare value of attribute with value of same attribute in an LDAP directory entry.
ldap_sort	;	Sort LDAP result entries	;	bool ldap_sort ( resource $link, resource $result, string $sortfilter )	;	Sort the result of a LDAP search, returned by ldap_search() .
ldap_rename	;	Modify the name of an entry	;	bool ldap_rename ( resource $link_identifier, string $dn, string $newrdn, string $newparent, bool $deleteoldrdn )	;	The entry specified by dn is renamed/moved.
ldap_get_option	;	Get the current value for given option	;	bool ldap_get_option ( resource $link_identifier, int $option, mixed &$retval )	;	Sets retval to the value of the specified option.
ldap_set_option	;	Set the value of the given option	;	bool ldap_set_option ( resource $link_identifier, int $option, mixed $newval )	;	Sets the value of the specified option to be newval.
ldap_first_reference	;	Return first reference	;	resource ldap_first_reference ( resource $link, resource $result )	;	
ldap_next_reference	;	Get next reference	;	resource ldap_next_reference ( resource $link, resource $entry )	;	
ldap_parse_reference	;	Extract information from reference entry	;	bool ldap_parse_reference ( resource $link, resource $entry, array &$referrals )	;	
ldap_parse_result	;	Extract information from result	;	bool ldap_parse_result ( resource $link, resource $result, int &$errcode [, string &$matcheddn [, string &$errmsg [, array &$referrals ]]] )	;	
ldap_start_tls	;	Start TLS	;	bool ldap_start_tls ( resource $link )	;	
ldap_set_rebind_proc	;	Set a callback function to do re-binds on referral chasing	;	bool ldap_set_rebind_proc ( resource $link, callable $callback )	;	
mb_convert_case	;	Perform case folding on a string	;	string mb_convert_case ( string $str, int $mode = MB_CASE_UPPER [, string $encoding = mb_internal_encoding() ] )	;	Performs case folding on a string , converted in the way specified by mode.
mb_strtoupper	;	Make a string uppercase	;	string mb_strtoupper ( string $str [, string $encoding = mb_internal_encoding() ] )	;	Returns str with all alphabetic characters converted to uppercase.
mb_strtolower	;	Make a string lowercase	;	string mb_strtolower ( string $str [, string $encoding = mb_internal_encoding() ] )	;	Returns str with all alphabetic characters converted to lowercase.
mb_language	;	Set/Get current language	;	mixed mb_language ([ string $language ] )	;	Set/Get the current language.
mb_internal_encoding	;	Set/Get internal character encoding	;	mixed mb_internal_encoding ([ string $encoding = mb_internal_encoding() ] )	;	Set/Get the internal character encoding
mb_http_input	;	Detect HTTP input character encoding	;	mixed mb_http_input ([ string $type = "" ] )	;	
mb_http_output	;	Set/Get HTTP output character encoding	;	mixed mb_http_output ([ string $encoding ] )	;	Set/Get the HTTP output character encoding. Output after this function is converted to encoding.
mb_detect_order	;	Set/Get character encoding detection order	;	mixed mb_detect_order ([ mixed $encoding_list ] )	;	Sets the automatic character encoding detection order to encoding_list.
mb_substitute_character	;	Set/Get substitution character	;	mixed mb_substitute_character ([ mixed $substrchar ] )	;	Specifies a substitution character when input character encoding is invalid or character code does not exist in output character encoding. Invalid characters may be substituted NULL (no output), string or integer value (Unicode character code value).
mb_parse_str	;	Parse GET/POST/COOKIE data and set global variable	;	bool mb_parse_str ( string $encoded_string [, array &$result ] )	;	Parses GET/POST/COOKIE data and sets global variables. Since PHP does not provide raw POST/COOKIE data, it can only be used for GET data for now. It parses URL encoded data, detects encoding, converts coding to internal encoding and set values to the result array or global variables.
mb_output_handler	;	Callback function converts character encoding in output buffer	;	string mb_output_handler ( string $contents, int $status )	;	mb_output_handler() is ob_start() callback function. mb_output_handler() converts characters in the output buffer from internal character encoding to HTTP output character encoding.
mb_preferred_mime_name	;	Get MIME charset string	;	string mb_preferred_mime_name ( string $encoding )	;	Get a MIME charset string for a specific encoding.
mb_strlen	;	Get string length	;	int mb_strlen ( string $str [, string $encoding ] )	;	Gets the length of a string .
mb_strpos	;	Find position of first occurrence of string in a string	;	int mb_strpos ( string $haystack, string $needle [, int $offset = 0 [, string $encoding ]] )	;	Finds position of the first occurrence of a string in a string .
mb_strrpos	;	Find position of last occurrence of a string in a string	;	int mb_strrpos ( string $haystack, string $needle [, int $offset = 0 [, string $encoding ]] )	;	Performs a multibyte safe strrpos() operation based on the number of characters. needle position is counted from the beginning of haystack. First character's position is 0. Second character position is 1.
mb_stripos	;	Finds position of first occurrence of a string within another, case insensitive	;	int mb_stripos ( string $haystack, string $needle [, int $offset [, string $encoding ]] )	;	mb_stripos() returns the numeric position of the first occurrence of needle in the haystack string. Unlike mb_strpos() , mb_stripos() is case-insensitive. If needle is not found, it returns FALSE.
mb_strripos	;	Finds position of last occurrence of a string within another, case insensitive	;	int mb_strripos ( string $haystack, string $needle [, int $offset = 0 [, string $encoding ]] )	;	mb_strripos() performs multi-byte safe strripos() operation based on number of characters. needle position is counted from the beginning of haystack. First character's position is 0. Second character position is 1. Unlike mb_strrpos() , mb_strripos() is case-insensitive.
mb_strstr	;	Finds first occurrence of a string within another	;	string mb_strstr ( string $haystack, string $needle [, bool $before_needle = false [, string $encoding ]] )	;	mb_strstr() finds the first occurrence of needle in haystack and returns the portion of haystack. If needle is not found, it returns FALSE.
mb_strrchr	;	Finds the last occurrence of a character in a string within another	;	string mb_strrchr ( string $haystack, string $needle [, bool $part = false [, string $encoding ]] )	;	mb_strrchr() finds the last occurrence of needle in haystack and returns the portion of haystack. If needle is not found, it returns FALSE.
mb_stristr	;	Finds first occurrence of a string within another, case insensitive	;	string mb_stristr ( string $haystack, string $needle [, bool $before_needle = false [, string $encoding ]] )	;	mb_stristr() finds the first occurrence of needle in haystack and returns the portion of haystack. Unlike mb_strstr() , mb_stristr() is case-insensitive. If needle is not found, it returns FALSE.
mb_strrichr	;	Finds the last occurrence of a character in a string within another, case insensitive	;	string mb_strrichr ( string $haystack, string $needle [, bool $part = false [, string $encoding ]] )	;	mb_strrichr() finds the last occurrence of needle in haystack and returns the portion of haystack. Unlike mb_strrchr() , mb_strrichr() is case-insensitive. If needle is not found, it returns FALSE.
mb_substr_count	;	Count the number of substring occurrences	;	int mb_substr_count ( string $haystack, string $needle [, string $encoding ] )	;	Counts the number of times the needle substring occurs in the haystack string .
mb_substr	;	Get part of string	;	string mb_substr ( string $str, int $start [, int $length [, string $encoding ]] )	;	Performs a multi-byte safe substr() operation based on number of characters. Position is counted from the beginning of str. First character's position is 0. Second character position is 1, and so on.
mb_strcut	;	Get part of string	;	string mb_strcut ( string $str, int $start [, int $length [, string $encoding ]] )	;	mb_strcut() extracts a substring from a string similarly to mb_substr() , but operates on bytes instead of characters. If the cut position happens to be between two bytes of a multi-byte character, the cut is performed starting from the first byte of that character. This is also the difference to the substr() function, which would simply cut the string between the bytes and thus result in a malformed byte sequence.
mb_strwidth	;	Return width of string	;	int mb_strwidth ( string $str [, string $encoding ] )	;	Returns the width of string str.
mb_strimwidth	;	Get truncated string with specified width	;	string mb_strimwidth ( string $str, int $start, int $width [, string $trimmarker [, string $encoding ]] )	;	Truncates string str to specified width.
mb_convert_encoding	;	Convert character encoding	;	string mb_convert_encoding ( string $str, string $to_encoding [, mixed $from_encoding ] )	;	Converts the character encoding of string str to to_encoding from optionally from_encoding.
mb_detect_encoding	;	Detect character encoding	;	string mb_detect_encoding ( string $str [, mixed $encoding_list = mb_detect_order() [, bool $strict = false ]] )	;	Detects character encoding in string str.
mb_list_encodings	;	Returns an array of all supported encodings	;	array mb_list_encodings ( void )	;	Returns an array containing all supported encodings.
mb_encoding_aliases	;	Get aliases of a known encoding type	;	array mb_encoding_aliases ( string $encoding )	;	Returns an array of aliases for a known encoding type.
mb_convert_kana	;	Convert "kana" one from another ("zen-kaku", "han-kaku" and more)	;	string mb_convert_kana ( string $str [, string $option = "KV" [, string $encoding ]] )	;	Performs a "han-kaku" - "zen-kaku" conversion for string str. This function is only useful for Japanese.
mb_encode_mimeheader	;	Encode string for MIME header	;	string mb_encode_mimeheader ( string $str [, string $charset [, string $transfer_encoding [, string $linefeed = "\r\n" [, int $indent = 0 ]]]] )	;	Encodes a given string str by the MIME header encoding scheme.
mb_decode_mimeheader	;	Decode string in MIME header field	;	string mb_decode_mimeheader ( string $str )	;	Decodes encoded-word string str in MIME header.
mb_convert_variables	;	Convert character code in variable(s)	;	string mb_convert_variables ( string $to_encoding, mixed $from_encoding, mixed &$vars [, mixed &$... ] )	;	Converts character encoding of variables vars in encoding from_encoding to encoding to_encoding.
mb_encode_numericentity	;	Encode character to HTML numeric string reference	;	string mb_encode_numericentity ( string $str, array $convmap, string $encoding )	;	Converts specified character codes in string str from HTML numeric character reference to character code.
mb_decode_numericentity	;	Decode HTML numeric string reference to character	;	string mb_decode_numericentity ( string $str, array $convmap, string $encoding )	;	Convert numeric string reference of string str in a specified block to character.
mb_send_mail	;	Send encoded mail	;	bool mb_send_mail ( string $to, string $subject, string $message [, string $additional_headers = NULL [, string $additional_parameter = NULL ]] )	;	Sends email. Headers and messages are converted and encoded according to the mb_language() setting. It's a wrapper function for mail() , so see also mail() for details.
mb_get_info	;	Get internal settings of mbstring	;	mixed mb_get_info ([ string $type = "all" ] )	;	
mb_check_encoding	;	Check if the string is valid for the specified encoding	;	bool mb_check_encoding ([ string $var = NULL [, string $encoding = mb_internal_encoding() ]] )	;	Checks if the specified byte stream is valid for the specified encoding. It is useful to prevent so-called "Invalid Encoding Attack".
mb_regex_encoding	;	Returns current encoding for multibyte regex as string	;	mixed mb_regex_encoding ([ string $encoding ] )	;	Returns the current encoding for a multibyte regex as a string .
mb_regex_set_options	;	Set/Get the default options for mbregex functions	;	string mb_regex_set_options ([ string $options = "msr" ] )	;	
mb_ereg	;	Regular expression match with multibyte support	;	int mb_ereg ( string $pattern, string $string [, array $regs ] )	;	
mb_eregi	;	Regular expression match ignoring case with multibyte support	;	int mb_eregi ( string $pattern, string $string [, array $regs ] )	;	
mb_ereg_replace	;	Replace regular expression with multibyte support	;	string mb_ereg_replace ( string $pattern, string $replacement, string $string [, string $option = "msr" ] )	;	
mb_eregi_replace	;	Replace regular expression with multibyte support ignoring case	;	string mb_eregi_replace ( string $pattern, string $replace, string $string [, string $option = "msri" ] )	;	
mb_split	;	Split multibyte string using regular expression	;	array mb_split ( string $pattern, string $string [, int $limit = -1 ] )	;	
mb_ereg_match	;	Regular expression match for multibyte string	;	bool mb_ereg_match ( string $pattern, string $string [, string $option = "msr" ] )	;	A regular expression match for a multibyte string
mb_ereg_search	;	Multibyte regular expression match for predefined multibyte string	;	bool mb_ereg_search ([ string $pattern [, string $option = "ms" ]] )	;	Performs a multibyte regular expression match for a predefined multibyte string.
mb_ereg_search_pos	;	Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string	;	array mb_ereg_search_pos ([ string $pattern [, string $option = "ms" ]] )	;	Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string
mb_ereg_search_regs	;	Returns the matched part of a multibyte regular expression	;	array mb_ereg_search_regs ([ string $pattern [, string $option = "ms" ]] )	;	Returns the matched part of a multibyte regular expression.
mb_ereg_search_init	;	Setup string and regular expression for a multibyte regular expression match	;	bool mb_ereg_search_init ( string $string [, string $pattern [, string $option = "msr" ]] )	;	mb_ereg_search_init() sets string and pattern for a multibyte regular expression. These values are used for mb_ereg_search() , mb_ereg_search_pos() , and mb_ereg_search_regs() .
mb_ereg_search_getregs	;	Retrieve the result from the last multibyte regular expression match	;	array mb_ereg_search_getregs ( void )	;	
mb_ereg_search_getpos	;	Returns start point for next regular expression match	;	int mb_ereg_search_getpos ( void )	;	
mb_ereg_search_setpos	;	Set start point of next regular expression match	;	bool mb_ereg_search_setpos ( int $position )	;	
mysql_connect	;	Open a connection to a MySQL Server	;	resource mysql_connect ([ string $server = ini_get("mysql.default_host") [, string $username = ini_get("mysql.default_user") [, string $password = ini_get("mysql.default_password") [, bool $new_link = false [, int $client_flags = 0 ]]]]] )	;	Opens or reuses a connection to a MySQL server.
mysql_pconnect	;	Open a persistent connection to a MySQL server	;	resource mysql_pconnect ([ string $server = ini_get("mysql.default_host") [, string $username = ini_get("mysql.default_user") [, string $password = ini_get("mysql.default_password") [, int $client_flags = 0 ]]]] )	;	Establishes a persistent connection to a MySQL server.
mysql_close	;	Close MySQL connection	;	bool mysql_close ([ resource $link_identifier = NULL ] )	;	mysql_close() closes the non-persistent connection to the MySQL server that's associated with the specified link identifier. If link_identifier isn't specified, the last opened link is used.
mysql_select_db	;	Select a MySQL database	;	bool mysql_select_db ( string $database_name [, resource $link_identifier = NULL ] )	;	Sets the current active database on the server that's associated with the specified link identifier. Every subsequent call to mysql_query() will be made on the active database.
mysql_query	;	Send a MySQL query	;	resource mysql_query ( string $query [, resource $link_identifier = NULL ] )	;	mysql_query() sends a unique query (multiple queries are not supported) to the currently active database on the server that's associated with the specified link_identifier.
mysql_unbuffered_query	;	Send an SQL query to MySQL without fetching and buffering the result rows.	;	resource mysql_unbuffered_query ( string $query [, resource $link_identifier = NULL ] )	;	mysql_unbuffered_query() sends the SQL query query to MySQL without automatically fetching and buffering the result rows as mysql_query() does. This saves a considerable amount of memory with SQL queries that produce large result sets, and you can start working on the result set immediately after the first row has been retrieved as you don't have to wait until the complete SQL query has been performed. To use mysql_unbuffered_query() while multiple database connections are open, you must specify the optional parameter link_identifier to identify which connection you want to use.
mysql_db_query	;	Selects a database and executes a query on it	;	resource mysql_db_query ( string $database, string $query [, resource $link_identifier = NULL ] )	;	mysql_db_query() selects a database, and executes a query on it.
mysql_list_dbs	;	List databases available on a MySQL server	;	resource mysql_list_dbs ([ resource $link_identifier = NULL ] )	;	Returns a result pointer containing the databases available from the current mysql daemon.
mysql_list_tables	;	List tables in a MySQL database	;	resource mysql_list_tables ( string $database [, resource $link_identifier = NULL ] )	;	Retrieves a list of table names from a MySQL database.
mysql_list_fields	;	List MySQL table fields	;	resource mysql_list_fields ( string $database_name, string $table_name [, resource $link_identifier = NULL ] )	;	Retrieves information about the given table name.
mysql_list_processes	;	List MySQL processes	;	resource mysql_list_processes ([ resource $link_identifier = NULL ] )	;	Retrieves the current MySQL server threads.
mysql_error	;	Returns the text of the error message from previous MySQL operation	;	string mysql_error ([ resource $link_identifier = NULL ] )	;	Returns the error text from the last MySQL function. Errors coming back from the MySQL database backend no longer issue warnings. Instead, use mysql_error() to retrieve the error text. Note that this function only returns the error text from the most recently executed MySQL function (not including mysql_error() and mysql_errno() ), so if you want to use it, make sure you check the value before calling another MySQL function.
mysql_errno	;	Returns the numerical value of the error message from previous MySQL operation	;	int mysql_errno ([ resource $link_identifier = NULL ] )	;	Returns the error number from the last MySQL function.
mysql_affected_rows	;	Get number of affected rows in previous MySQL operation	;	int mysql_affected_rows ([ resource $link_identifier = NULL ] )	;	Get the number of affected rows by the last INSERT, UPDATE, REPLACE or DELETE query associated with link_identifier.
mysql_insert_id	;	Get the ID generated in the last query	;	int mysql_insert_id ([ resource $link_identifier = NULL ] )	;	Retrieves the ID generated for an AUTO_INCREMENT column by the previous query (usually INSERT).
mysql_result	;	Get result data	;	string mysql_result ( resource $result, int $row [, mixed $field = 0 ] )	;	Retrieves the contents of one cell from a MySQL result set.
mysql_num_rows	;	Get number of rows in result	;	int mysql_num_rows ( resource $result )	;	Retrieves the number of rows from a result set. This command is only valid for statements like SELECT or SHOW that return an actual result set. To retrieve the number of rows affected by a INSERT, UPDATE, REPLACE or DELETE query, use mysql_affected_rows() .
mysql_num_fields	;	Get number of fields in result	;	int mysql_num_fields ( resource $result )	;	Retrieves the number of fields from a query.
mysql_fetch_row	;	Get a result row as an enumerated array	;	array mysql_fetch_row ( resource $result )	;	Returns a numerical array that corresponds to the fetched row and moves the internal data pointer ahead.
mysql_fetch_array	;	Fetch a result row as an associative array, a numeric array, or both	;	array mysql_fetch_array ( resource $result [, int $result_type = MYSQL_BOTH ] )	;	Returns an array that corresponds to the fetched row and moves the internal data pointer ahead.
mysql_fetch_assoc	;	Fetch a result row as an associative array	;	array mysql_fetch_assoc ( resource $result )	;	Returns an associative array that corresponds to the fetched row and moves the internal data pointer ahead. mysql_fetch_assoc() is equivalent to calling mysql_fetch_array() with MYSQL_ASSOC for the optional second parameter. It only returns an associative array.
mysql_fetch_object	;	Fetch a result row as an object	;	object mysql_fetch_object ( resource $result [, string $class_name [, array $params ]] )	;	Returns an object with properties that correspond to the fetched row and moves the internal data pointer ahead.
mysql_data_seek	;	Move internal result pointer	;	bool mysql_data_seek ( resource $result, int $row_number )	;	mysql_data_seek() moves the internal row pointer of the MySQL result associated with the specified result identifier to point to the specified row number. The next call to a MySQL fetch function, such as mysql_fetch_assoc() , would return that row.
mysql_fetch_lengths	;	Get the length of each output in a result	;	array mysql_fetch_lengths ( resource $result )	;	Returns an array that corresponds to the lengths of each field in the last row fetched by MySQL.
mysql_fetch_field	;	Get column information from a result and return as an object	;	object mysql_fetch_field ( resource $result [, int $field_offset = 0 ] )	;	Returns an object containing field information. This function can be used to obtain information about fields in the provided query result.
mysql_field_seek	;	Set result pointer to a specified field offset	;	bool mysql_field_seek ( resource $result, int $field_offset )	;	Seeks to the specified field offset. If the next call to mysql_fetch_field() doesn't include a field offset, the field offset specified in mysql_field_seek() will be returned.
mysql_free_result	;	Free result memory	;	bool mysql_free_result ( resource $result )	;	mysql_free_result() will free all memory associated with the result identifier result.
mysql_field_name	;	Get the name of the specified field in a result	;	string mysql_field_name ( resource $result, int $field_offset )	;	mysql_field_name() returns the name of the specified field index.
mysql_field_table	;	Get name of the table the specified field is in	;	string mysql_field_table ( resource $result, int $field_offset )	;	Returns the name of the table that the specified field is in.
mysql_field_len	;	Returns the length of the specified field	;	int mysql_field_len ( resource $result, int $field_offset )	;	mysql_field_len() returns the length of the specified field.
mysql_field_type	;	Get the type of the specified field in a result	;	string mysql_field_type ( resource $result, int $field_offset )	;	mysql_field_type() is similar to the mysql_field_name() function. The arguments are identical, but the field type is returned instead.
mysql_field_flags	;	Get the flags associated with the specified field in a result	;	string mysql_field_flags ( resource $result, int $field_offset )	;	mysql_field_flags() returns the field flags of the specified field. The flags are reported as a single word per flag separated by a single space, so that you can split the returned value using explode() .
mysql_escape_string	;	Escapes a string for use in a mysql_query	;	string mysql_escape_string ( string $unescaped_string )	;	This function will escape the unescaped_string, so that it is safe to place it in a mysql_query() . This function is deprecated.
mysql_real_escape_string	;	Escapes special characters in a string for use in an SQL statement	;	string mysql_real_escape_string ( string $unescaped_string [, resource $link_identifier = NULL ] )	;	Escapes special characters in the unescaped_string, taking into account the current character set of the connection so that it is safe to place it in a mysql_query() . If binary data is to be inserted, this function must be used.
mysql_stat	;	Get current system status	;	string mysql_stat ([ resource $link_identifier = NULL ] )	;	mysql_stat() returns the current server status.
mysql_thread_id	;	Return the current thread ID	;	int mysql_thread_id ([ resource $link_identifier = NULL ] )	;	Retrieves the current thread ID. If the connection is lost, and a reconnect with mysql_ping() is executed, the thread ID will change. This means only retrieve the thread ID when needed.
mysql_client_encoding	;	Returns the name of the character set	;	string mysql_client_encoding ([ resource $link_identifier = NULL ] )	;	Retrieves the character_set variable from MySQL.
mysql_ping	;	Ping a server connection or reconnect if there is no connection	;	bool mysql_ping ([ resource $link_identifier = NULL ] )	;	Checks whether or not the connection to the server is working. If it has gone down, an automatic reconnection is attempted. This function can be used by scripts that remain idle for a long while, to check whether or not the server has closed the connection and reconnect if necessary.
mysql_get_client_info	;	Get MySQL client info	;	string mysql_get_client_info ( void )	;	mysql_get_client_info() returns a string that represents the client library version.
mysql_get_host_info	;	Get MySQL host info	;	string mysql_get_host_info ([ resource $link_identifier = NULL ] )	;	Describes the type of connection in use for the connection, including the server host name.
mysql_get_proto_info	;	Get MySQL protocol info	;	int mysql_get_proto_info ([ resource $link_identifier = NULL ] )	;	Retrieves the MySQL protocol.
mysql_get_server_info	;	Get MySQL server info	;	string mysql_get_server_info ([ resource $link_identifier = NULL ] )	;	Retrieves the MySQL server version.
mysql_info	;	Get information about the most recent query	;	string mysql_info ([ resource $link_identifier = NULL ] )	;	Returns detailed information about the last query.
mysql_set_charset	;	Sets the client character set	;	bool mysql_set_charset ( string $charset [, resource $link_identifier = NULL ] )	;	Sets the default character set for the current connection.
mysql_db_name	;	Retrieves database name from the call to  mysql_list_dbs()	;	string mysql_db_name ( resource $result, int $row [, mixed $field = NULL ] )	;	Retrieve the database name from a call to mysql_list_dbs() .
mysql_tablename	;	Get table name of field	;	string mysql_tablename ( resource $result, int $i )	;	Retrieves the table name from a result.
mysqli_autocommit	;	Turns on or off auto-committing database modifications	;	bool mysqli_autocommit ( mysqli $link, bool $mode )	;	Turns on or off auto-commit mode on queries for the database connection.
mysqli_close	;	Closes a previously opened database connection	;	bool mysqli_close ( mysqli $link )	;	Closes a previously opened database connection.
mysqli_commit	;	Commits the current transaction	;	bool mysqli_commit ( mysqli $link )	;	Commits the current transaction for the database connection.
mysqli_connect	;	Alias of  mysqli::__construct()	;		;	
mysqli_debug	;	Performs debugging operations	;	bool mysqli_debug ( string $message )	;	Performs debugging operations using the Fred Fish debugging library.
mysqli_errno	;	Returns the error code for the most recent function call	;	int mysqli_errno ( mysqli $link )	;	Returns the last error code for the most recent MySQLi function call that can succeed or fail.
mysqli_error	;	Returns a string description of the last error	;	string mysqli_error ( mysqli $link )	;	Returns the last error message for the most recent MySQLi function call that can succeed or fail.
mysqli_stmt_execute	;	Executes a prepared Query	;	bool mysqli_stmt_execute ( mysqli_stmt $stmt )	;	Executes a query that has been previously prepared using the mysqli_prepare() function. When executed any parameter markers which exist will automatically be replaced with the appropriate data.
mysqli_execute	;	Alias for  mysqli_stmt_execute()	;		;	
mysqli_get_cache_stats	;	Returns client Zval cache statistics	;	array mysqli_get_cache_stats ( void )	;	
mysqli_init	;	Initializes MySQLi and returns a resource for use with mysqli_real_connect()	;	mysqli mysqli_init ( void )	;	Allocates or initializes a MYSQL object suitable for mysqli_options() and mysqli_real_connect() .
mysqli_info	;	Retrieves information about the most recently executed query	;	string mysqli_info ( mysqli $link )	;	The mysqli_info() function returns a string providing information about the last query executed. The nature of this string is provided below:
mysqli_kill	;	Asks the server to kill a MySQL thread	;	bool mysqli_kill ( mysqli $link, int $processid )	;	This function is used to ask the server to kill a MySQL thread specified by the processid parameter. This value must be retrieved by calling the mysqli_thread_id() function.
mysqli_options	;	Set options	;	bool mysqli_options ( mysqli $link, int $option, mixed $value )	;	Used to set extra connect options and affect behavior for a connection.
mysqli_ping	;	Pings a server connection, or tries to reconnect if the connection has gone down	;	bool mysqli_ping ( mysqli $link )	;	Checks whether the connection to the server is working. If it has gone down, and global option mysqli.reconnect is enabled an automatic reconnection is attempted.
mysqli_poll	;	Poll connections	;	int mysqli_poll ( array &$read, array &$error, array &$reject, int $sec [, int $usec ] )	;	Procedural style
mysqli_prepare	;	Prepare an SQL statement for execution	;	mysqli_stmt mysqli_prepare ( mysqli $link, string $query )	;	Prepares the SQL query, and returns a statement handle to be used for further operations on the statement. The query must consist of a single SQL statement.
mysqli_report	;	Enables or disables internal report functions	;	bool mysqli_report ( int $flags )	;	mysqli_report() is a powerful function to improve your queries and code during development and testing phase. Depending on the flags it reports errors from mysqli function calls or queries which don't use an index (or use a bad index).
mysqli_query	;	Performs a query on the database	;	mixed mysqli_query ( mysqli $link, string $query [, int $resultmode = MYSQLI_STORE_RESULT ] )	;	Performs a query against the database.
mysqli_rollback	;	Rolls back current transaction	;	bool mysqli_rollback ( mysqli $link )	;	Rollbacks the current transaction for the database.
mysqli_stmt_close	;	Closes a prepared statement	;	bool mysqli_stmt_close ( mysqli_stmt $stmt )	;	Closes a prepared statement. mysqli_stmt_close() also deallocates the statement handle. If the current statement has pending or unread results, this function cancels them so that the next query can be executed.
mysqli_stmt_errno	;	Returns the error code for the most recent statement call	;	int mysqli_stmt_errno ( mysqli_stmt $stmt )	;	Returns the error code for the most recently invoked statement function that can succeed or fail.
mysqli_stmt_error	;	Returns a string description for last statement error	;	string mysqli_stmt_error ( mysqli_stmt $stmt )	;	Returns a containing the error message for the most recently invoked statement function that can succeed or fail.
mysqli_stmt_fetch	;	Fetch results from a prepared statement into the bound variables	;	bool mysqli_stmt_fetch ( mysqli_stmt $stmt )	;	Fetch the result from a prepared statement into the variables bound by mysqli_stmt_bind_result() .
mysqli_stmt_prepare	;	Prepare an SQL statement for execution	;	bool mysqli_stmt_prepare ( mysqli_stmt $stmt, string $query )	;	Prepares the SQL query pointed to by the null-terminated string query.
mysqli_stmt_reset	;	Resets a prepared statement	;	bool mysqli_stmt_reset ( mysqli_stmt $stmt )	;	Resets a prepared statement on client and server to state after prepare.
mysqli_stmt_sqlstate	;	Returns SQLSTATE error from previous statement operation	;	string mysqli_stmt_sqlstate ( mysqli_stmt $stmt )	;	Returns a string containing the SQLSTATE error code for the most recently invoked prepared statement function that can succeed or fail. The error code consists of five characters. '00000' means no error. The values are specified by ANSI SQL and ODBC. For a list of possible values, see &raquo;&nbsp;http://dev.mysql.com/doc/mysql/en/error-handling.html.
mysqli_sqlstate	;	Returns the SQLSTATE error from previous MySQL operation	;	string mysqli_sqlstate ( mysqli $link )	;	Returns a string containing the SQLSTATE error code for the last error. The error code consists of five characters. '00000' means no error. The values are specified by ANSI SQL and ODBC. For a list of possible values, see &raquo;&nbsp;http://dev.mysql.com/doc/mysql/en/error-handling.html.
mysqli_stat	;	Gets the current system status	;	string mysqli_stat ( mysqli $link )	;	mysqli_stat() returns a string containing information similar to that provided by the 'mysqladmin status' command. This includes uptime in seconds and the number of running threads, questions, reloads, and open tables.
mysqli_refresh	;	Refreshes	;	int mysqli_refresh ( resource $link, int $options )	;	Flushes tables or caches, or resets the replication server information.
mysqli_bind_param	;	Alias for  mysqli_stmt_bind_param()	;		;	
mysqli_bind_result	;	Alias for  mysqli_stmt_bind_result()	;		;	
mysqli_client_encoding	;	Alias of  mysqli_character_set_name()	;		;	
mysqli_escape_string	;	Alias of  mysqli_real_escape_string()	;		;	
mysqli_fetch	;	Alias for  mysqli_stmt_fetch()	;		;	
mysqli_param_count	;	Alias for  mysqli_stmt_param_count()	;		;	
mysqli_get_metadata	;	Alias for  mysqli_stmt_result_metadata()	;		;	
mysqli_send_long_data	;	Alias for  mysqli_stmt_send_long_data()	;		;	
mysqli_set_opt	;	Alias of  mysqli_options()	;		;	
odbc_autocommit	;	Toggle autocommit behaviour	;	mixed odbc_autocommit ( resource $connection_id [, bool $OnOff = false ] )	;	Toggles autocommit behaviour.
odbc_binmode	;	Handling of binary column data	;	bool odbc_binmode ( resource $result_id, int $mode )	;	Enables handling of binary column data. ODBC SQL types affected are BINARY, VARBINARY, and LONGVARBINARY.
odbc_close	;	Close an ODBC connection	;	void odbc_close ( resource $connection_id )	;	Closes down the connection to the database server.
odbc_close_all	;	Close all ODBC connections	;	void odbc_close_all ( void )	;	odbc_close_all() will close down all connections to database server(s).
odbc_columns	;	Lists the column names in specified tables	;	resource odbc_columns ( resource $connection_id [, string $qualifier [, string $schema [, string $table_name [, string $column_name ]]]] )	;	Lists all columns in the requested range.
odbc_commit	;	Commit an ODBC transaction	;	bool odbc_commit ( resource $connection_id )	;	Commits all pending transactions on the connection.
odbc_connect	;	Connect to a datasource	;	resource odbc_connect ( string $dsn, string $user, string $password [, int $cursor_type ] )	;	
odbc_cursor	;	Get cursorname	;	string odbc_cursor ( resource $result_id )	;	Gets the cursorname for the given result_id.
odbc_data_source	;	Returns information about a current connection	;	array odbc_data_source ( resource $connection_id, int $fetch_type )	;	This function will return the list of available DSN (after calling it several times).
odbc_execute	;	Execute a prepared statement	;	bool odbc_execute ( resource $result_id [, array $parameters_array ] )	;	Executes a statement prepared with odbc_prepare() .
odbc_error	;	Get the last error code	;	string odbc_error ([ resource $connection_id ] )	;	
odbc_errormsg	;	Get the last error message	;	string odbc_errormsg ([ resource $connection_id ] )	;	
odbc_exec	;	Prepare and execute an SQL statement	;	resource odbc_exec ( resource $connection_id, string $query_string [, int $flags ] )	;	Sends an SQL statement to the database server.
odbc_fetch_array	;	Fetch a result row as an associative array	;	array odbc_fetch_array ( resource $result [, int $rownumber ] )	;	Fetch an associative array from an ODBC query. See the changelog below for when this function is available.
odbc_fetch_object	;	Fetch a result row as an object	;	object odbc_fetch_object ( resource $result [, int $rownumber ] )	;	Fetch an object from an ODBC query. See the changelog below for when this function is available.
odbc_fetch_row	;	Fetch a row	;	bool odbc_fetch_row ( resource $result_id [, int $row_number ] )	;	Fetches a row of the data that was returned by odbc_do() or odbc_exec() . After odbc_fetch_row() is called, the fields of that row can be accessed with odbc_result() .
odbc_fetch_into	;	Fetch one result row into array	;	int odbc_fetch_into ( resource $result_id, array &$result_array [, int $rownumber ] )	;	Fetch one result row into array .
odbc_field_len	;	Get the length (precision) of a field	;	int odbc_field_len ( resource $result_id, int $field_number )	;	Gets the length of the field referenced by number in the given result identifier.
odbc_field_scale	;	Get the scale of a field	;	int odbc_field_scale ( resource $result_id, int $field_number )	;	Gets the scale of the field referenced by number in the given result identifier.
odbc_field_name	;	Get the columnname	;	string odbc_field_name ( resource $result_id, int $field_number )	;	Gets the name of the field occupying the given column number in the given result identifier.
odbc_field_type	;	Datatype of a field	;	string odbc_field_type ( resource $result_id, int $field_number )	;	Gets the SQL type of the field referenced by number in the given result identifier.
odbc_field_num	;	Return column number	;	int odbc_field_num ( resource $result_id, string $field_name )	;	Gets the number of the column slot that corresponds to the named field in the given result identifier.
odbc_free_result	;	Free resources associated with a result	;	bool odbc_free_result ( resource $result_id )	;	Free resources associated with a result.
odbc_gettypeinfo	;	Retrieves information about data types supported by the data source	;	resource odbc_gettypeinfo ( resource $connection_id [, int $data_type ] )	;	Retrieves information about data types supported by the data source.
odbc_longreadlen	;	Handling of LONG columns	;	bool odbc_longreadlen ( resource $result_id, int $length )	;	Enables handling of LONG and LONGVARBINARY columns.
odbc_next_result	;	Checks if multiple results are available	;	bool odbc_next_result ( resource $result_id )	;	Checks if there are more result sets available as well as allowing access to the next result set via odbc_fetch_array() , odbc_fetch_row() , odbc_result() , etc.
odbc_num_fields	;	Number of columns in a result	;	int odbc_num_fields ( resource $result_id )	;	Gets the number of fields (columns) in an ODBC result.
odbc_num_rows	;	Number of rows in a result	;	int odbc_num_rows ( resource $result_id )	;	Gets the number of rows in a result. For INSERT, UPDATE and DELETE statements odbc_num_rows() returns the number of rows affected. For a SELECT clause this can be the number of rows available.
odbc_pconnect	;	Open a persistent database connection	;	resource odbc_pconnect ( string $dsn, string $user, string $password [, int $cursor_type ] )	;	Opens a persistent database connection.
odbc_prepare	;	Prepares a statement for execution	;	resource odbc_prepare ( resource $connection_id, string $query_string )	;	Prepares a statement for execution. The result identifier can be used later to execute the statement with odbc_execute() .
odbc_result	;	Get result data	;	mixed odbc_result ( resource $result_id, mixed $field )	;	Get result data
odbc_result_all	;	Print result as HTML table	;	int odbc_result_all ( resource $result_id [, string $format ] )	;	Prints all rows from a result identifier produced by odbc_exec() . The result is printed in HTML table format.
odbc_rollback	;	Rollback a transaction	;	bool odbc_rollback ( resource $connection_id )	;	Rolls back all pending statements on the connection.
odbc_setoption	;	Adjust ODBC settings	;	bool odbc_setoption ( resource $id, int $function, int $option, int $param )	;	This function allows fiddling with the ODBC options for a particular connection or query result. It was written to help find work around to problems in quirky ODBC drivers. You should probably only use this function if you are an ODBC programmer and understand the effects the various options will have. You will certainly need a good ODBC reference to explain all the different options and values that can be used. Different driver versions support different options.
odbc_specialcolumns	;	Retrieves special columns	;	resource odbc_specialcolumns ( resource $connection_id, int $type, string $qualifier, string $owner, string $table, int $scope, int $nullable )	;	Retrieves either the optimal set of columns that uniquely identifies a row in the table, or columns that are automatically updated when any value in the row is updated by a transaction.
odbc_statistics	;	Retrieve statistics about a table	;	resource odbc_statistics ( resource $connection_id, string $qualifier, string $owner, string $table_name, int $unique, int $accuracy )	;	Get statistics about a table and its indexes.
odbc_tables	;	Get the list of table names stored in a specific data source	;	resource odbc_tables ( resource $connection_id [, string $qualifier [, string $owner [, string $name [, string $types ]]]] )	;	Lists all tables in the requested range.
odbc_primarykeys	;	Gets the primary keys for a table	;	resource odbc_primarykeys ( resource $connection_id, string $qualifier, string $owner, string $table )	;	Returns a result identifier that can be used to fetch the column names that comprise the primary key for a table.
odbc_columnprivileges	;	Lists columns and associated privileges for the given table	;	resource odbc_columnprivileges ( resource $connection_id, string $qualifier, string $owner, string $table_name, string $column_name )	;	Lists columns and associated privileges for the given table.
odbc_tableprivileges	;	Lists tables and the privileges associated with each table	;	resource odbc_tableprivileges ( resource $connection_id, string $qualifier, string $owner, string $name )	;	Lists tables in the requested range and the privileges associated with each table.
odbc_foreignkeys	;	Retrieves a list of foreign keys	;	resource odbc_foreignkeys ( resource $connection_id, string $pk_qualifier, string $pk_owner, string $pk_table, string $fk_qualifier, string $fk_owner, string $fk_table )	;	Retrieves a list of foreign keys in the specified table or a list of foreign keys in other tables that refer to the primary key in the specified table
odbc_procedures	;	Get the list of procedures stored in a specific data source	;	resource odbc_procedures ( resource $connection_id, string $qualifier, string $owner, string $name )	;	Lists all procedures in the requested range.
odbc_procedurecolumns	;	Retrieve information about parameters to procedures	;	resource odbc_procedurecolumns ( resource $connection_id, string $qualifier, string $owner, string $proc, string $column )	;	Retrieve information about parameters to procedures.
odbc_do	;	Alias of  odbc_exec()	;		;	
odbc_field_precision	;	Alias of  odbc_field_len()	;		;	
spl_classes	;	Return available SPL classes	;	array spl_classes ( void )	;	This function returns an array with the current available SPL classes.
spl_autoload	;	Default implementation for __autoload()	;	void spl_autoload ( string $class_name [, string $file_extensions = spl_autoload_extensions() ] )	;	This function is intended to be used as a default implementation for __autoload() . If nothing else is specified and spl_autoload_register() is called without any parameters then this function will be used for any later call to __autoload() .
spl_autoload_extensions	;	Register and return default file extensions for spl_autoload	;	string spl_autoload_extensions ([ string $file_extensions ] )	;	This function can modify and check the file extensions that the built in __autoload() fallback function spl_autoload() will be using.
spl_autoload_register	;	Register given function as __autoload() implementation	;	bool spl_autoload_register ([ callable $autoload_function [, bool $throw = true [, bool $prepend = false ]]] )	;	Register a function with the spl provided __autoload stack. If the stack is not yet activated it will be activated.
spl_autoload_unregister	;	Unregister given function as __autoload() implementation	;	bool spl_autoload_unregister ( mixed $autoload_function )	;	Unregister a function from the spl provided __autoload stack. If the stack is activated and empty after unregistering the given function then it will be deactivated.
spl_autoload_functions	;	Return all registered __autoload() functions	;	array spl_autoload_functions ( void )	;	Get all registered __autoload() functions.
spl_autoload_call	;	Try all registered __autoload() function to load the requested class	;	void spl_autoload_call ( string $class_name )	;	This function can be used to manually search for a class or interface using the registered __autoload functions.
class_parents	;	Return the parent classes of the given class	;	array class_parents ( mixed $class [, bool $autoload = true ] )	;	This function returns an array with the name of the parent classes of the given class.
class_implements	;	Return the interfaces which are implemented by the given class	;	array class_implements ( mixed $class [, bool $autoload = true ] )	;	This function returns an array with the names of the interfaces that the given class and its parents implement.
spl_object_hash	;	Return hash id for given object	;	string spl_object_hash ( object $obj )	;	This function returns a unique identifier for the object. This id can be used as a hash key for storing objects or for identifying an object.
iterator_to_array	;	Copy the iterator into an array	;	array iterator_to_array ( Traversable $iterator [, bool $use_keys = true ] )	;	Copy the elements of an iterator into an array.
iterator_count	;	Count the elements in an iterator	;	int iterator_count ( Traversable $iterator )	;	Count the elements in an iterator.
iterator_apply	;	Call a function for every element in an iterator	;	int iterator_apply ( Traversable $iterator, callable $function [, array $args ] )	;	Calls a function for every element in an iterator.
pdo_drivers	;		;		;	
pg_connect	;	Open a PostgreSQL connection	;	resource pg_connect ( string $connection_string [, int $connect_type ] )	;	pg_connect() opens a connection to a PostgreSQL database specified by the connection_string.
pg_pconnect	;	Open a persistent PostgreSQL connection	;	resource pg_pconnect ( string $connection_string [, int $connect_type ] )	;	pg_pconnect() opens a connection to a PostgreSQL database. It returns a connection resource that is needed by other PostgreSQL functions.
pg_close	;	Closes a PostgreSQL connection	;	bool pg_close ([ resource $connection ] )	;	pg_close() closes the non-persistent connection to a PostgreSQL database associated with the given connection resource.
pg_connection_status	;	Get connection status	;	int pg_connection_status ( resource $connection )	;	pg_connection_status() returns the status of the specified connection.
pg_connection_busy	;	Get connection is busy or not	;	bool pg_connection_busy ( resource $connection )	;	pg_connection_busy() determines whether or not a connection is busy. If it is busy, a previous query is still executing. If pg_get_result() is used on the connection, it will be blocked.
pg_connection_reset	;	Reset connection (reconnect)	;	bool pg_connection_reset ( resource $connection )	;	pg_connection_reset() resets the connection. It is useful for error recovery.
pg_host	;	Returns the host name associated with the connection	;	string pg_host ([ resource $connection ] )	;	pg_host() returns the host name of the given PostgreSQL connection resource is connected to.
pg_dbname	;	Get the database name	;	string pg_dbname ([ resource $connection ] )	;	pg_dbname() returns the name of the database that the given PostgreSQL connection resource.
pg_port	;	Return the port number associated with the connection	;	int pg_port ([ resource $connection ] )	;	pg_port() returns the port number that the given PostgreSQL connection resource is connected to.
pg_tty	;	Return the TTY name associated with the connection	;	string pg_tty ([ resource $connection ] )	;	pg_tty() returns the TTY name that server side debugging output is sent to on the given PostgreSQL connection resource.
pg_options	;	Get the options associated with the connection	;	string pg_options ([ resource $connection ] )	;	pg_options() will return a string containing the options specified on the given PostgreSQL connection resource.
pg_version	;	Returns an array with client, protocol and server version (when available)	;	array pg_version ([ resource $connection ] )	;	pg_version() returns an array with the client, protocol and server version. Protocol and server versions are only available if PHP was compiled with PostgreSQL 7.4 or later.
pg_ping	;	Ping database connection	;	bool pg_ping ([ resource $connection ] )	;	pg_ping() pings a database connection and tries to reconnect it if it is broken.
pg_parameter_status	;	Looks up a current parameter setting of the server.	;	string pg_parameter_status ([ resource $connection ], string $param_name )	;	Looks up a current parameter setting of the server.
pg_transaction_status	;	Returns the current in-transaction status of the server.	;	int pg_transaction_status ( resource $connection )	;	Returns the current in-transaction status of the server.
pg_query	;	Execute a query	;	resource pg_query ([ resource $connection ], string $query )	;	pg_query() executes the query on the specified database connection.
pg_query_params	;	Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text.	;	resource pg_query_params ([ resource $connection ], string $query, array $params )	;	Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text.
pg_prepare	;	Submits a request to create a prepared statement with the    given parameters, and waits for completion.	;	resource pg_prepare ([ resource $connection ], string $stmtname, string $query )	;	pg_prepare() creates a prepared statement for later execution with pg_execute() or pg_send_execute() . This feature allows commands that will be used repeatedly to be parsed and planned just once, rather than each time they are executed. pg_prepare() is supported only against PostgreSQL 7.4 or higher connections; it will fail when using earlier versions.
pg_execute	;	Sends a request to execute a prepared statement with given parameters, and waits for the result.	;	resource pg_execute ([ resource $connection ], string $stmtname, array $params )	;	Sends a request to execute a prepared statement with given parameters, and waits for the result.
pg_send_query	;	Sends asynchronous query	;	bool pg_send_query ( resource $connection, string $query )	;	pg_send_query() sends a query or queries asynchronously to the connection. Unlike pg_query() , it can send multiple queries at once to PostgreSQL and get the results one by one using pg_get_result() .
pg_send_query_params	;	Submits a command and separate parameters to the server without waiting for the result(s).	;	bool pg_send_query_params ( resource $connection, string $query, array $params )	;	Submits a command and separate parameters to the server without waiting for the result(s).
pg_send_prepare	;	Sends a request to create a prepared statement with the given parameters, without waiting for completion.	;	bool pg_send_prepare ( resource $connection, string $stmtname, string $query )	;	Sends a request to create a prepared statement with the given parameters, without waiting for completion.
pg_send_execute	;	Sends a request to execute a prepared statement with given parameters, without waiting for the result(s).	;	bool pg_send_execute ( resource $connection, string $stmtname, array $params )	;	Sends a request to execute a prepared statement with given parameters, without waiting for the result(s).
pg_cancel_query	;	Cancel an asynchronous query	;	bool pg_cancel_query ( resource $connection )	;	pg_cancel_query() cancels an asynchronous query sent with pg_send_query() , pg_send_query_params() or pg_send_execute() . You cannot cancel a query executed using pg_query() .
pg_fetch_result	;	Returns values from a result resource	;	string pg_fetch_result ( resource $result, mixed $field )	;	pg_fetch_result() returns the value of a particular row and field (column) in a PostgreSQL result resource.
pg_fetch_row	;	Get a row as an enumerated array	;	array pg_fetch_row ( resource $result [, int $row ] )	;	pg_fetch_row() fetches one row of data from the result associated with the specified result resource.
pg_fetch_assoc	;	Fetch a row as an associative array	;	array pg_fetch_assoc ( resource $result [, int $row ] )	;	pg_fetch_assoc() returns an associative array that corresponds to the fetched row (records).
pg_fetch_array	;	Fetch a row as an array	;	array pg_fetch_array ( resource $result [, int $row [, int $result_type = PGSQL_BOTH ]] )	;	pg_fetch_array() returns an array that corresponds to the fetched row (record).
pg_fetch_object	;	Fetch a row as an object	;	object pg_fetch_object ( resource $result [, int $row [, string $class_name [, array $params ]]] )	;	pg_fetch_object() returns an object with properties that correspond to the fetched row's field names. It can optionally instantiate an object of a specific class, and pass parameters to that class's constructor.
pg_fetch_all	;	Fetches all rows from a result as an array	;	array pg_fetch_all ( resource $result )	;	pg_fetch_all() returns an array that contains all rows (records) in the result resource.
pg_fetch_all_columns	;	Fetches all rows in a particular result column as an array	;	array pg_fetch_all_columns ( resource $result [, int $column = 0 ] )	;	pg_fetch_all_columns() returns an array that contains all rows (records) in a particular column of the result resource.
pg_affected_rows	;	Returns number of affected records (tuples)	;	int pg_affected_rows ( resource $result )	;	pg_affected_rows() returns the number of tuples (instances/records/rows) affected by INSERT, UPDATE, and DELETE queries.
pg_get_result	;	Get asynchronous query result	;	resource pg_get_result ([ resource $connection ] )	;	pg_get_result() gets the result resource from an asynchronous query executed by pg_send_query() , pg_send_query_params() or pg_send_execute() .
pg_result_seek	;	Set internal row offset in result resource	;	bool pg_result_seek ( resource $result, int $offset )	;	pg_result_seek() sets the internal row offset in a result resource.
pg_result_status	;	Get status of query result	;	mixed pg_result_status ( resource $result [, int $type = PGSQL_STATUS_LONG ] )	;	pg_result_status() returns the status of a result resource, or the PostgreSQL command completion tag associated with the result
pg_free_result	;	Free result memory	;	bool pg_free_result ( resource $result )	;	pg_free_result() frees the memory and data associated with the specified PostgreSQL query result resource .
pg_last_oid	;	Returns the last row's OID	;	string pg_last_oid ( resource $result )	;	pg_last_oid() is used to retrieve the OID assigned to an inserted row.
pg_num_rows	;	Returns the number of rows in a result	;	int pg_num_rows ( resource $result )	;	pg_num_rows() will return the number of rows in a PostgreSQL result resource.
pg_num_fields	;	Returns the number of fields in a result	;	int pg_num_fields ( resource $result )	;	pg_num_fields() returns the number of fields (columns) in a PostgreSQL result resource.
pg_field_name	;	Returns the name of a field	;	string pg_field_name ( resource $result, int $field_number )	;	pg_field_name() returns the name of the field occupying the given field_number in the given PostgreSQL result resource. Field numbering starts from 0.
pg_field_num	;	Returns the field number of the named field	;	int pg_field_num ( resource $result, string $field_name )	;	pg_field_num() will return the number of the field number that corresponds to the field_name in the given PostgreSQL result resource.
pg_field_size	;	Returns the internal storage size of the named field	;	int pg_field_size ( resource $result, int $field_number )	;	pg_field_size() returns the internal storage size (in bytes) of the field number in the given PostgreSQL result.
pg_field_type	;	Returns the type name for the corresponding field number	;	string pg_field_type ( resource $result, int $field_number )	;	pg_field_type() returns a string containing the base type name of the given field_number in the given PostgreSQL result resource.
pg_field_type_oid	;	Returns the type ID (OID) for the corresponding field number	;	int pg_field_type_oid ( resource $result, int $field_number )	;	pg_field_type_oid() returns an integer containing the OID of the base type of the given field_number in the given PostgreSQL result resource.
pg_field_prtlen	;	Returns the printed length	;	int pg_field_prtlen ( resource $result, mixed $field_name_or_number )	;	pg_field_prtlen() returns the actual printed length (number of characters) of a specific value in a PostgreSQL result. Row numbering starts at 0. This function will return FALSE on an error.
pg_field_is_null	;	Test if a field is SQL NULL	;	int pg_field_is_null ( resource $result, mixed $field )	;	pg_field_is_null() tests if a field in a PostgreSQL result resource is SQL NULL or not.
pg_field_table	;	Returns the name or oid of the tables field	;	mixed pg_field_table ( resource $result, int $field_number [, bool $oid_only = false ] )	;	pg_field_table() returns the name of the table that field belongs to, or the table's oid if oid_only is TRUE.
pg_get_notify	;	Gets SQL NOTIFY message	;	array pg_get_notify ( resource $connection [, int $result_type ] )	;	pg_get_notify() gets notifications generated by a NOTIFY SQL command. To receive notifications, the LISTEN SQL command must be issued.
pg_get_pid	;	Gets the backend's process ID	;	int pg_get_pid ( resource $connection )	;	pg_get_pid() gets the backend's (database server process) PID. The PID is useful to determine whether or not a NOTIFY message received via pg_get_notify() is sent from another process or not.
pg_result_error	;	Get error message associated with result	;	string pg_result_error ( resource $result )	;	pg_result_error() returns any error message associated with the result resource. Therefore, the user has a better chance of getting the correct error message than with pg_last_error() .
pg_result_error_field	;	Returns an individual field of an error report.	;	string pg_result_error_field ( resource $result, int $fieldcode )	;	pg_result_error_field() returns one of the detailed error message fields associated with result resource. It is only available against a PostgreSQL 7.4 or above server. The error field is specified by the fieldcode.
pg_last_error	;	Get the last error message string of a connection	;	string pg_last_error ([ resource $connection ] )	;	pg_last_error() returns the last error message for a given connection.
pg_last_notice	;	Returns the last notice message from PostgreSQL server	;	string pg_last_notice ( resource $connection )	;	pg_last_notice() returns the last notice message from the PostgreSQL server on the specified connection. The PostgreSQL server sends notice messages in several cases, for instance when creating a SERIAL column in a table.
pg_put_line	;	Send a NULL-terminated string to PostgreSQL backend	;	bool pg_put_line ([ resource $connection ], string $data )	;	pg_put_line() sends a NULL-terminated string to the PostgreSQL backend server. This is needed in conjunction with PostgreSQL's COPY FROM command.
pg_end_copy	;	Sync with PostgreSQL backend	;	bool pg_end_copy ([ resource $connection ] )	;	pg_end_copy() syncs the PostgreSQL frontend (usually a web server process) with the PostgreSQL server after doing a copy operation performed by pg_put_line() . pg_end_copy() must be issued, otherwise the PostgreSQL server may get out of sync with the frontend and will report an error.
pg_copy_to	;	Copy a table to an array	;	array pg_copy_to ( resource $connection, string $table_name [, string $delimiter [, string $null_as ]] )	;	pg_copy_to() copies a table to an array. It issues COPY TO SQL command internally to retrieve records.
pg_copy_from	;	Insert records into a table from an array	;	bool pg_copy_from ( resource $connection, string $table_name, array $rows [, string $delimiter [, string $null_as ]] )	;	pg_copy_from() inserts records into a table from rows. It issues a COPY FROM SQL command internally to insert records.
pg_trace	;	Enable tracing a PostgreSQL connection	;	bool pg_trace ( string $pathname [, string $mode = "w" [, resource $connection ]] )	;	pg_trace() enables tracing of the PostgreSQL frontend/backend communication to a file. To fully understand the results, one needs to be familiar with the internals of PostgreSQL communication protocol.
pg_untrace	;	Disable tracing of a PostgreSQL connection	;	bool pg_untrace ([ resource $connection ] )	;	Stop tracing started by pg_trace() .
pg_lo_create	;	Create a large object	;	int pg_lo_create ( mixed $object_id )	;	pg_lo_create() creates a large object and returns the OID of the large object. PostgreSQL access modes INV_READ, INV_WRITE, and INV_ARCHIVE are not supported, the object is created always with both read and write access. INV_ARCHIVE has been removed from PostgreSQL itself (version 6.3 and above).
pg_lo_unlink	;	Delete a large object	;	bool pg_lo_unlink ( resource $connection, int $oid )	;	pg_lo_unlink() deletes a large object with the oid. Returns TRUE on success or FALSE on failure.
pg_lo_open	;	Open a large object	;	resource pg_lo_open ( resource $connection, int $oid, string $mode )	;	pg_lo_open() opens a large object in the database and returns large object resource so that it can be manipulated.
pg_lo_close	;	Close a large object	;	bool pg_lo_close ( resource $large_object )	;	pg_lo_close() closes a large object. large_object is a resource for the large object from pg_lo_open() .
pg_lo_read	;	Read a large object	;	string pg_lo_read ( resource $large_object [, int $len = 8192 ] )	;	pg_lo_read() reads at most len bytes from a large object and returns it as a string .
pg_lo_write	;	Write to a large object	;	int pg_lo_write ( resource $large_object, string $data [, int $len ] )	;	pg_lo_write() writes data into a large object at the current seek position.
pg_lo_read_all	;	Reads an entire large object and send straight to browser	;	int pg_lo_read_all ( resource $large_object )	;	pg_lo_read_all() reads a large object and passes it straight through to the browser after sending all pending headers. Mainly intended for sending binary data like images or sound.
pg_lo_import	;	Import a large object from file	;	int pg_lo_import ( string $pathname [, resource $connection ] )	;	pg_lo_import() creates a new large object in the database using a file on the filesystem as its data source.
pg_lo_export	;	Export a large object to file	;	bool pg_lo_export ([ resource $connection ], int $oid, string $pathname )	;	pg_lo_export() takes a large object in a PostgreSQL database and saves its contents to a file on the local filesystem.
pg_lo_seek	;	Seeks position within a large object	;	bool pg_lo_seek ( resource $large_object, int $offset [, int $whence = PGSQL_SEEK_CUR ] )	;	pg_lo_seek() seeks a position within a large object resource.
pg_lo_tell	;	Returns current seek position a of large object	;	int pg_lo_tell ( resource $large_object )	;	pg_lo_tell() returns the current position (offset from the beginning) of a large object.
pg_escape_string	;	Escape a string for query	;	string pg_escape_string ([ resource $connection ], string $data )	;	pg_escape_string() escapes a string for querying the database. It returns an escaped string in the PostgreSQL format without quotes. pg_escape_literal() is more preferred way to escape SQL parameters for PostgreSQL. addslashes() must not be used with PostgreSQL. If the type of the column is bytea, pg_escape_bytea() must be used instead. pg_escape_identifier() must be used to escape identifiers (e.g. table names, field names)
pg_escape_bytea	;	Escape a string for insertion into a bytea field	;	string pg_escape_bytea ([ resource $connection ], string $data )	;	pg_escape_bytea() escapes string for bytea datatype. It returns escaped string.
pg_unescape_bytea	;	Unescape binary for bytea type	;	string pg_unescape_bytea ( string $data )	;	pg_unescape_bytea() unescapes PostgreSQL bytea data values. It returns the unescaped string, possibly containing binary data.
pg_set_error_verbosity	;	Determines the verbosity of messages returned by  pg_last_error()      and  pg_result_error() .	;	int pg_set_error_verbosity ([ resource $connection ], int $verbosity )	;	Determines the verbosity of messages returned by pg_last_error() and pg_result_error() .
pg_client_encoding	;	Gets the client encoding	;	string pg_client_encoding ([ resource $connection ] )	;	PostgreSQL supports automatic character set conversion between server and client for certain character sets. pg_client_encoding() returns the client encoding as a string. The returned string will be one of the standard PostgreSQL encoding identifiers.
pg_set_client_encoding	;	Set the client encoding	;	int pg_set_client_encoding ([ resource $connection ], string $encoding )	;	pg_set_client_encoding() sets the client encoding and returns 0 if success or -1 if error.
pg_meta_data	;	Get meta data for table	;	array pg_meta_data ( resource $connection, string $table_name )	;	pg_meta_data() returns table definition for table_name as an array.
pg_convert	;	Convert associative array values into suitable for SQL statement	;	array pg_convert ( resource $connection, string $table_name, array $assoc_array [, int $options = 0 ] )	;	pg_convert() checks and converts the values in assoc_array into suitable values for use in an SQL statement. Precondition for pg_convert() is the existence of a table table_name which has at least as many columns as assoc_array has elements. The fieldnames in table_name must match the indices in assoc_array and the corresponding datatypes must be compatible. Returns an array with the converted values on success, FALSE otherwise.
pg_insert	;	Insert array into table	;	mixed pg_insert ( resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC ] )	;	pg_insert() inserts the values of assoc_array into the table specified by table_name. If options is specified, pg_convert() is applied to assoc_array with the specified options.
pg_update	;	Update table	;	mixed pg_update ( resource $connection, string $table_name, array $data, array $condition [, int $options = PGSQL_DML_EXEC ] )	;	pg_update() updates records that matches condition with data. If options is specified, pg_convert() is applied to data with specified options.
pg_delete	;	Deletes records	;	mixed pg_delete ( resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC ] )	;	pg_delete() deletes records from a table specified by the keys and values in assoc_array. If options is specified, pg_convert() is applied to assoc_array with the specified options.
pg_select	;	Select records	;	mixed pg_select ( resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC ] )	;	pg_select() selects records specified by assoc_array which has field=>value. For a successful query, it returns an array containing all records and fields that match the condition specified by assoc_array.
posix_kill	;	Send a signal to a process	;	bool posix_kill ( int $pid, int $sig )	;	Send the signal sig to the process with the process identifier pid.
posix_getpid	;	Return the current process identifier	;	int posix_getpid ( void )	;	Return the process identifier of the current process.
posix_getppid	;	Return the parent process identifier	;	int posix_getppid ( void )	;	Return the process identifier of the parent process of the current process.
posix_getuid	;	Return the real user ID of the current process	;	int posix_getuid ( void )	;	Return the numeric real user ID of the current process.
posix_setuid	;	Set the UID of the current process	;	bool posix_setuid ( int $uid )	;	Set the real user ID of the current process. This is a privileged function that needs appropriate privileges (usually root) on the system to be able to perform this function.
posix_geteuid	;	Return the effective user ID of the current process	;	int posix_geteuid ( void )	;	Return the numeric effective user ID of the current process. See also posix_getpwuid() for information on how to convert this into a useable username.
posix_seteuid	;	Set the effective UID of the current process	;	bool posix_seteuid ( int $uid )	;	Set the real user ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function.
posix_getgid	;	Return the real group ID of the current process	;	int posix_getgid ( void )	;	Return the numeric real group ID of the current process.
posix_setgid	;	Set the GID of the current process	;	bool posix_setgid ( int $gid )	;	Set the real group ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function. The appropriate order of function calls is posix_setgid() first, posix_setuid() last.
posix_getegid	;	Return the effective group ID of the current process	;	int posix_getegid ( void )	;	Return the numeric effective group ID of the current process.
posix_setegid	;	Set the effective GID of the current process	;	bool posix_setegid ( int $gid )	;	Set the effective group ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function.
posix_getgroups	;	Return the group set of the current process	;	array posix_getgroups ( void )	;	Gets the group set of the current process.
posix_getlogin	;	Return login name	;	string posix_getlogin ( void )	;	Returns the login name of the user owning the current process.
posix_getpgrp	;	Return the current process group identifier	;	int posix_getpgrp ( void )	;	Return the process group identifier of the current process.
posix_setsid	;	Make the current process a session leader	;	int posix_setsid ( void )	;	Make the current process a session leader.
posix_setpgid	;	Set process group id for job control	;	bool posix_setpgid ( int $pid, int $pgid )	;	Let the process pid join the process group pgid.
posix_getpgid	;	Get process group id for job control	;	int posix_getpgid ( int $pid )	;	Returns the process group identifier of the process pid or FALSE on failure.
posix_getsid	;	Get the current sid of the process	;	int posix_getsid ( int $pid )	;	Return the session id of the process pid. The session id of a process is the process group id of the session leader.
posix_uname	;	Get system name	;	array posix_uname ( void )	;	Gets information about the system.
posix_times	;	Get process times	;	array posix_times ( void )	;	Gets information about the current CPU usage.
posix_ctermid	;	Get path name of controlling terminal	;	string posix_ctermid ( void )	;	Generates a string which is the pathname for the current controlling terminal for the process. On error this will set errno, which can be checked using posix_get_last_error()
posix_ttyname	;	Determine terminal device name	;	string posix_ttyname ( int $fd )	;	Returns a string for the absolute path to the current terminal device that is open on the file descriptor fd.
posix_isatty	;	Determine if a file descriptor is an interactive terminal	;	bool posix_isatty ( int $fd )	;	Determines if the file descriptor fd refers to a valid terminal type device.
posix_getcwd	;	Pathname of current directory	;	string posix_getcwd ( void )	;	Gets the absolute pathname of the script's current working directory. On error, it sets errno which can be checked using posix_get_last_error()
posix_mkfifo	;	Create a fifo special file (a named pipe)	;	bool posix_mkfifo ( string $pathname, int $mode )	;	posix_mkfifo() creates a special FIFO file which exists in the file system and acts as a bidirectional communication endpoint for processes.
posix_mknod	;	Create a special or ordinary file (POSIX.1)	;	bool posix_mknod ( string $pathname, int $mode [, int $major = 0 [, int $minor = 0 ]] )	;	Creates a special or ordinary file.
posix_access	;	Determine accessibility of a file	;	bool posix_access ( string $file [, int $mode = POSIX_F_OK ] )	;	posix_access() checks the user's permission of a file.
posix_getgrnam	;	Return info about a group by name	;	array posix_getgrnam ( string $name )	;	Gets information about a group provided its name.
posix_getgrgid	;	Return info about a group by group id	;	array posix_getgrgid ( int $gid )	;	Gets information about a group provided its id.
posix_getpwnam	;	Return info about a user by username	;	array posix_getpwnam ( string $username )	;	Returns an array of information about the given user.
posix_getpwuid	;	Return info about a user by user id	;	array posix_getpwuid ( int $uid )	;	Returns an array of information about the user referenced by the given user ID.
posix_getrlimit	;	Return info about system resource limits	;	array posix_getrlimit ( void )	;	posix_getrlimit() returns an array of information about the current resource's soft and hard limits.
posix_get_last_error	;	Retrieve the error number set by the last posix function that failed	;	int posix_get_last_error ( void )	;	Retrieve the error number set by the last posix function that failed. The system error message associated with the errno may be checked with posix_strerror() .
posix_errno	;	Alias of  posix_get_last_error()	;		;	
posix_strerror	;	Retrieve the system error message associated with the given errno	;	string posix_strerror ( int $errno )	;	Returns the POSIX system error message associated with the given errno. You may get the errno parameter by calling posix_get_last_error() .
posix_initgroups	;	Calculate the group access list	;	bool posix_initgroups ( string $name, int $base_group_id )	;	Calculates the group access list for the user specified in name.
readline	;	Reads a line	;	string readline ([ string $prompt ] )	;	Reads a single line from the user. You must add this line to the history yourself using readline_add_history() .
readline_info	;	Gets/sets various internal readline variables	;	mixed readline_info ([ string $varname [, string $newvalue ]] )	;	Gets or sets various internal readline variables.
readline_add_history	;	Adds a line to the history	;	bool readline_add_history ( string $line )	;	This function adds a line to the command line history.
readline_clear_history	;	Clears the history	;	bool readline_clear_history ( void )	;	This function clears the entire command line history.
readline_read_history	;	Reads the history	;	bool readline_read_history ([ string $filename ] )	;	This function reads a command history from a file.
readline_write_history	;	Writes the history	;	bool readline_write_history ([ string $filename ] )	;	This function writes the command history to a file.
readline_completion_function	;	Registers a completion function	;	bool readline_completion_function ( callable $function )	;	This function registers a completion function. This is the same kind of functionality you'd get if you hit your tab key while using Bash.
session_name	;	Get and/or set the current session name	;	string session_name ([ string $name ] )	;	session_name() returns the name of the current session. If name is given, session_name() will update the session name and return the old session name.
session_module_name	;	Get and/or set the current session module	;	string session_module_name ([ string $module ] )	;	session_module_name() gets the name of the current session module.
session_save_path	;	Get and/or set the current session save path	;	string session_save_path ([ string $path ] )	;	session_save_path() returns the path of the current directory used to save session data.
session_id	;	Get and/or set the current session id	;	string session_id ([ string $id ] )	;	session_id() is used to get or set the session id for the current session.
session_regenerate_id	;	Update the current session id with a newly generated one	;	bool session_regenerate_id ([ bool $delete_old_session = false ] )	;	session_regenerate_id() will replace the current session id with a new one, and keep the current session information.
session_decode	;	Decodes session data from a session encoded string	;	bool session_decode ( string $data )	;	session_decode() decodes the serialized session data provided in $data, and populates the $_SESSION superglobal with the result.
session_register	;	Register one or more global variables with the current session	;	bool session_register ( mixed $name [, mixed $... ] )	;	session_register() accepts a variable number of arguments, any of which can be either a string holding the name of a variable or an array consisting of variable names or other arrays. For each name, session_register() registers the global variable with that name in the current session.
session_unregister	;	Unregister a global variable from the current session	;	bool session_unregister ( string $name )	;	session_unregister() unregisters the global variable named name from the current session.
session_is_registered	;	Find out whether a global variable is registered in a session	;	bool session_is_registered ( string $name )	;	Finds out whether a global variable is registered in a session.
session_encode	;	Encodes the current session data as a session encoded string	;	string session_encode ( void )	;	session_encode() returns a serialized string of the contents of the current session data stored in the $_SESSION superglobal.
session_start	;	Start new or resume existing session	;	bool session_start ( void )	;	session_start() creates a session or resumes the current one based on a session identifier passed via a GET or POST request, or passed via a cookie.
session_destroy	;	Destroys all data registered to a session	;	bool session_destroy ( void )	;	
session_unset	;	Free all session variables	;	void session_unset ( void )	;	The session_unset() function frees all session variables currently registered.
session_set_save_handler	;	Sets user-level session storage functions	;	bool session_set_save_handler ( SessionHandlerInterface $sessionhandler [, bool $register_shutdown = true ] )	;	session_set_save_handler() sets the user-level session storage functions which are used for storing and retrieving data associated with a session. This is most useful when a storage method other than those supplied by PHP sessions is preferred. i.e. Storing the session data in a local database.
session_cache_limiter	;	Get and/or set the current cache limiter	;	string session_cache_limiter ([ string $cache_limiter ] )	;	session_cache_limiter() returns the name of the current cache limiter.
session_cache_expire	;	Return current cache expire	;	int session_cache_expire ([ string $new_cache_expire ] )	;	session_cache_expire() returns the current setting of session.cache_expire.
session_set_cookie_params	;	Set the session cookie parameters	;	void session_set_cookie_params ( int $lifetime [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]] )	;	Set cookie parameters defined in the php.ini file. The effect of this function only lasts for the duration of the script. Thus, you need to call session_set_cookie_params() for every request and before session_start() is called.
session_get_cookie_params	;	Get the session cookie parameters	;	array session_get_cookie_params ( void )	;	Gets the session cookie parameters.
session_write_close	;	Write session data and end session	;	void session_write_close ( void )	;	End the current session and store session data.
session_commit	;	Alias of  session_write_close()	;		;	
shmop_open	;	Create or open shared memory block	;	int shmop_open ( int $key, string $flags, int $mode, int $size )	;	shmop_open() can create or open a shared memory block.
shmop_read	;	Read data from shared memory block	;	string shmop_read ( int $shmid, int $start, int $count )	;	shmop_read() will read a string from shared memory block.
shmop_close	;	Close shared memory block	;	void shmop_close ( int $shmid )	;	shmop_close() is used to close a shared memory block.
shmop_size	;	Get size of shared memory block	;	int shmop_size ( int $shmid )	;	shmop_size() is used to get the size, in bytes of the shared memory block.
shmop_write	;	Write data into shared memory block	;	int shmop_write ( int $shmid, string $data, int $offset )	;	shmop_write() will write a string into shared memory block.
shmop_delete	;	Delete shared memory block	;	bool shmop_delete ( int $shmid )	;	shmop_delete() is used to delete a shared memory block.
simplexml_load_file	;	Interprets an XML file into an object	;	SimpleXMLElement simplexml_load_file ( string $filename [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = false ]]]] )	;	Convert the well-formed XML document in the given file to an object.
simplexml_load_string	;	Interprets a string of XML into an object	;	SimpleXMLElement simplexml_load_string ( string $data [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = false ]]]] )	;	Takes a well-formed XML string and returns it as an object.
simplexml_import_dom	;	Get a SimpleXMLElement object from a DOM node.	;	SimpleXMLElement simplexml_import_dom ( DOMNode $node [, string $class_name = "SimpleXMLElement" ] )	;	This function takes a node of a DOM document and makes it into a SimpleXML node. This new object can then be used as a native SimpleXML element.
snmpget	;	Fetch an SNMP object	;	string snmpget ( string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )	;	The snmpget() function is used to read the value of an SNMP object specified by the object_id.
snmpgetnext	;	Fetch the SNMP object which follows the given object id	;	string snmpgetnext ( string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )	;	The snmpgetnext() function is used to read the value of the SNMP object that follows the specified object_id.
snmpwalk	;	Fetch all the SNMP objects from an agent	;	array snmpwalk ( string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )	;	snmpwalk() function is used to read all the values from an SNMP agent specified by the hostname.
snmprealwalk	;	Return all objects including their respective object ID within the specified one	;	array snmprealwalk ( string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )	;	The snmprealwalk() function is used to traverse over a number of SNMP objects starting from object_id and return not only their values but also their object ids.
snmpwalkoid	;	Query for a tree of information about a network entity	;	array snmpwalkoid ( string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )	;	snmpwalkoid() function is used to read all object ids and their respective values from an SNMP agent specified by hostname.
snmp_get_quick_print	;	Fetches the current value of the UCD library's quick_print setting	;	bool snmp_get_quick_print ( void )	;	Returns the current value stored in the UCD Library for quick_print. quick_print is off by default.
snmp_set_quick_print	;	Set the value of quick_print within the UCD SNMP library	;	bool snmp_set_quick_print ( bool $quick_print )	;	Sets the value of quick_print within the UCD SNMP library. When this is set (1), the SNMP library will return 'quick printed' values. This means that just the value will be printed. When quick_print is not enabled (default) the UCD SNMP library prints extra information including the type of the value (i.e. IpAddress or OID). Additionally, if quick_print is not enabled, the library prints additional hex values for all strings of three characters or less.
snmp_set_enum_print	;	Return all values that are enums with their enum value instead of the raw integer	;	bool snmp_set_enum_print ( int $enum_print )	;	This function toggles if snmpwalk/snmpget etc. should automatically lookup enum values in the MIB and return them together with their human readable string.
snmp_set_oid_output_format	;	Set the OID output format	;	bool snmp_set_oid_output_format ( int $oid_format = SNMP_OID_OUTPUT_MODULE )	;	snmp_set_oid_output_format() sets the output format to be full or numeric.
snmp_set_oid_numeric_print	;	Return all objects including their respective object id within the specified one	;	void snmp_set_oid_numeric_print ( int $oid_format )	;	This function is an alias of: snmp_set_oid_output_format() .
snmpset	;	Set the value of an SNMP object	;	bool snmpset ( string $host, string $community, string $object_id, string $type, mixed $value [, int $timeout = 1000000 [, int $retries = 5 ]] )	;	snmpset() is used to set the value of an SNMP object specified by the object_id.
snmp2_get	;	Fetch an SNMP object	;	string snmp2_get ( string $host, string $community, string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )	;	The snmp2_get() function is used to read the value of an SNMP object specified by the object_id.
snmp2_getnext	;	Fetch the SNMP object which follows the given object id	;	string snmp2_getnext ( string $host, string $community, string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )	;	The snmp2_get_next() function is used to read the value of the SNMP object that follows the specified object_id.
snmp2_walk	;	Fetch all the SNMP objects from an agent	;	array snmp2_walk ( string $host, string $community, string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )	;	snmp2_walk() function is used to read all the values from an SNMP agent specified by the hostname.
snmp2_real_walk	;	Return all objects including their respective object ID within the specified one	;	array snmp2_real_walk ( string $host, string $community, string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )	;	The snmp2_real_walk() function is used to traverse over a number of SNMP objects starting from object_id and return not only their values but also their object ids.
snmp2_set	;	Set the value of an SNMP object	;	bool snmp2_set ( string $host, string $community, string $object_id, string $type, string $value [, string $timeout = 1000000 [, string $retries = 5 ]] )	;	snmp2_set() is used to set the value of an SNMP object specified by the object_id.
snmp3_get	;	Fetch an SNMP object	;	string snmp3_get ( string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )	;	The snmp3_get() function is used to read the value of an SNMP object specified by the object_id.
snmp3_getnext	;	Fetch the SNMP object which follows the given object id	;	string snmp3_getnext ( string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )	;	The snmp3_getnext() function is used to read the value of the SNMP object that follows the specified object_id.
snmp3_walk	;	Fetch all the SNMP objects from an agent	;	array snmp3_walk ( string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )	;	snmp3_walk() function is used to read all the values from an SNMP agent specified by the hostname.
snmp3_real_walk	;	Return all objects including their respective object ID within the specified one	;	array snmp3_real_walk ( string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )	;	The snmp3_real_walk() function is used to traverse over a number of SNMP objects starting from object_id and return not only their values but also their object ids.
snmp3_set	;	Set the value of an SNMP object	;	bool snmp3_set ( string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id, string $type, string $value [, int $timeout = 1000000 [, int $retries = 5 ]] )	;	snmp3_set() is used to set the value of an SNMP object specified by the object_id.
snmp_set_valueretrieval	;	Specify the method how the SNMP values will be returned	;	bool snmp_set_valueretrieval ( int $method = SNMP_VALUE_LIBRARY )	;	
snmp_get_valueretrieval	;	Return the method how the SNMP values will be returned	;	int snmp_get_valueretrieval ( void )	;	
snmp_read_mib	;	Reads and parses a MIB file into the active MIB tree	;	bool snmp_read_mib ( string $filename )	;	This function is used to load additional, e.g. vendor specific, MIBs so that human readable OIDs like VENDOR-MIB::foo.1 instead of error prone numeric OIDs can be used.
use_soap_error_handler	;	Set whether to use the SOAP error handler	;	bool use_soap_error_handler ([ bool $handler = true ] )	;	This function sets whether or not to use the SOAP error handler in the SOAP server. It will return the previous value. If set to TRUE, details of errors in a SoapServer application will be sent to the client as a SOAP fault message. If FALSE, the standard PHP error handler is used. The default is to use the standard PHP error handler.
is_soap_fault	;	Checks if a SOAP call has failed	;	bool is_soap_fault ( mixed $object )	;	This function is useful to check if the SOAP call failed, but without using exceptions. To use it, create a SoapClient object with the exceptions option set to zero or FALSE. In this case, the SOAP method will return a special SoapFault object which encapsulates the fault details (faultcode, faultstring, faultactor and faultdetails).
socket_select	;	Runs the select() system call on the given arrays of sockets with a specified timeout	;	int socket_select ( array &$read, array &$write, array &$except, int $tv_sec [, int $tv_usec = 0 ] )	;	socket_select() accepts arrays of sockets and waits for them to change status. Those coming with BSD sockets background will recognize that those socket resource arrays are in fact the so-called file descriptor sets. Three independent arrays of socket resources are watched.
socket_create	;	Create a socket (endpoint for communication)	;	resource socket_create ( int $domain, int $type, int $protocol )	;	Creates and returns a socket resource, also referred to as an endpoint of communication. A typical network connection is made up of 2 sockets, one performing the role of the client, and another performing the role of the server.
socket_create_listen	;	Opens a socket on port to accept connections	;	resource socket_create_listen ( int $port [, int $backlog = 128 ] )	;	socket_create_listen() creates a new socket resource of type AF_INET listening on all local interfaces on the given port waiting for new connections.
socket_create_pair	;	Creates a pair of indistinguishable sockets and stores them in an array	;	bool socket_create_pair ( int $domain, int $type, int $protocol, array &$fd )	;	socket_create_pair() creates two connected and indistinguishable sockets, and stores them in fd. This function is commonly used in IPC (InterProcess Communication).
socket_accept	;	Accepts a connection on a socket	;	resource socket_accept ( resource $socket )	;	After the socket socket has been created using socket_create() , bound to a name with socket_bind() , and told to listen for connections with socket_listen() , this function will accept incoming connections on that socket. Once a successful connection is made, a new socket resource is returned, which may be used for communication. If there are multiple connections queued on the socket, the first will be used. If there are no pending connections, socket_accept() will block until a connection becomes present. If socket has been made non-blocking using socket_set_blocking() or socket_set_nonblock() , FALSE will be returned.
socket_set_nonblock	;	Sets nonblocking mode for file descriptor fd	;	bool socket_set_nonblock ( resource $socket )	;	The socket_set_nonblock() function sets the O_NONBLOCK flag on the socket specified by the socket parameter.
socket_set_block	;	Sets blocking mode on a socket resource	;	bool socket_set_block ( resource $socket )	;	The socket_set_block() function removes the O_NONBLOCK flag on the socket specified by the socket parameter.
socket_listen	;	Listens for a connection on a socket	;	bool socket_listen ( resource $socket [, int $backlog = 0 ] )	;	After the socket socket has been created using socket_create() and bound to a name with socket_bind() , it may be told to listen for incoming connections on socket.
socket_close	;	Closes a socket resource	;	void socket_close ( resource $socket )	;	socket_close() closes the socket resource given by socket. This function is specific to sockets and cannot be used on any other type of resources.
socket_write	;	Write to a socket	;	int socket_write ( resource $socket, string $buffer [, int $length = 0 ] )	;	The function socket_write() writes to the socket from the given buffer.
socket_read	;	Reads a maximum of length bytes from a socket	;	string socket_read ( resource $socket, int $length [, int $type = PHP_BINARY_READ ] )	;	The function socket_read() reads from the socket resource socket created by the socket_create() or socket_accept() functions.
socket_getsockname	;	Queries the local side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type	;	bool socket_getsockname ( resource $socket, string &$addr [, int &$port ] )	;	
socket_getpeername	;	Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type	;	bool socket_getpeername ( resource $socket, string &$address [, int &$port ] )	;	Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type.
socket_connect	;	Initiates a connection on a socket	;	bool socket_connect ( resource $socket, string $address [, int $port = 0 ] )	;	Initiate a connection to address using the socket resource socket, which must be a valid socket resource created with socket_create() .
socket_strerror	;	Return a string describing a socket error	;	string socket_strerror ( int $errno )	;	socket_strerror() takes as its errno parameter a socket error code as returned by socket_last_error() and returns the corresponding explanatory text.
socket_bind	;	Binds a name to a socket	;	bool socket_bind ( resource $socket, string $address [, int $port = 0 ] )	;	Binds the name given in address to the socket described by socket. This has to be done before a connection is be established using socket_connect() or socket_listen() .
socket_recv	;	Receives data from a connected socket	;	int socket_recv ( resource $socket, string &$buf, int $len, int $flags )	;	The socket_recv() function receives len bytes of data in buf from socket. socket_recv() can be used to gather data from connected sockets. Additionally, one or more flags can be specified to modify the behaviour of the function.
socket_send	;	Sends data to a connected socket	;	int socket_send ( resource $socket, string $buf, int $len, int $flags )	;	The function socket_send() sends len bytes to the socket socket from buf.
socket_recvfrom	;	Receives data from a socket whether or not it is connection-oriented	;	int socket_recvfrom ( resource $socket, string &$buf, int $len, int $flags, string &$name [, int &$port ] )	;	The socket_recvfrom() function receives len bytes of data in buf from name on port port (if the socket is not of type AF_UNIX) using socket. socket_recvfrom() can be used to gather data from both connected and unconnected sockets. Additionally, one or more flags can be specified to modify the behaviour of the function.
socket_sendto	;	Sends a message to a socket, whether it is connected or not	;	int socket_sendto ( resource $socket, string $buf, int $len, int $flags, string $addr [, int $port = 0 ] )	;	The function socket_sendto() sends len bytes from buf through the socket socket to the port at the address addr.
socket_get_option	;	Gets socket options for the socket	;	mixed socket_get_option ( resource $socket, int $level, int $optname )	;	The socket_get_option() function retrieves the value for the option specified by the optname parameter for the specified socket.
socket_set_option	;	Sets socket options for the socket	;	bool socket_set_option ( resource $socket, int $level, int $optname, mixed $optval )	;	The socket_set_option() function sets the option specified by the optname parameter, at the specified protocol level, to the value pointed to by the optval parameter for the socket.
socket_shutdown	;	Shuts down a socket for receiving, sending, or both	;	bool socket_shutdown ( resource $socket [, int $how = 2 ] )	;	The socket_shutdown() function allows you to stop incoming, outgoing or all data (the default) from being sent through the socket
socket_last_error	;	Returns the last error on the socket	;	int socket_last_error ([ resource $socket ] )	;	If a socket resource is passed to this function, the last error which occurred on this particular socket is returned. If the socket resource is omitted, the error code of the last failed socket function is returned. The latter is particularly helpful for functions like socket_create() which don't return a socket on failure and socket_select() which can fail for reasons not directly tied to a particular socket. The error code is suitable to be fed to socket_strerror() which returns a string describing the given error code.
socket_clear_error	;	Clears the error on the socket or the last error code	;	void socket_clear_error ([ resource $socket ] )	;	This function clears the error code on the given socket or the global last socket error if no socket is specified.
sqlite_open	;	Opens an SQLite database and create the database if it does not exist	;	SQLiteDatabase::__construct() ( string $filename [, int $mode = 0666 [, string &$error_message ]] )	;	Opens an SQLite database or creates the database if it does not exist.
sqlite_popen	;	Opens a persistent handle to an SQLite database and create the database if it does not exist	;	resource sqlite_popen ( string $filename [, int $mode = 0666 [, string &$error_message ]] )	;	
sqlite_close	;	Closes an open SQLite database	;	void sqlite_close ( resource $dbhandle )	;	Closes the given db_handle database handle. If the database was persistent, it will be closed and removed from the persistent list.
sqlite_query	;	Executes a query against a given database and returns a result handle	;	SQLiteResult SQLiteDatabase::query ( string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )	;	Executes an SQL statement given by the query against a given database handle.
sqlite_exec	;	Executes a result-less query against a given database	;	bool SQLiteDatabase::queryExec ( string $query [, string &$error_msg ] )	;	Executes an SQL statement given by the query against a given database handle (specified by the dbhandle parameter).
sqlite_array_query	;	Execute a query against a given database and returns an array	;	array SQLiteDatabase::arrayQuery ( string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )	;	sqlite_array_query() executes the given query and returns an array of the entire result set. It is similar to calling sqlite_query() and then sqlite_fetch_array() for each row in the result set. sqlite_array_query() is significantly faster than the aforementioned.
sqlite_single_query	;	Executes a query and returns either an array for one single column or the value of the first row	;	array SQLiteDatabase::singleQuery ( string $query [, bool $first_row_only [, bool $decode_binary ]] )	;	Object oriented style (method):
sqlite_fetch_array	;	Fetches the next row from a result set as an array	;	array SQLiteUnbuffered::fetch ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )	;	Fetches the next row from the given result handle. If there are no more rows, returns FALSE, otherwise returns an associative array representing the row data.
sqlite_fetch_object	;	Fetches the next row from a result set as an object	;	object SQLiteUnbuffered::fetchObject ([ string $class_name [, array $ctor_params [, bool $decode_binary = true ]]] )	;	Object oriented style (method):
sqlite_fetch_single	;	Fetches the first column of a result set as a string	;	string SQLiteUnbuffered::fetchSingle ([ bool $decode_binary = true ] )	;	sqlite_fetch_single() is identical to sqlite_fetch_array() except that it returns the value of the first column of the rowset.
sqlite_fetch_string	;	Alias of  sqlite_fetch_single()	;		;	
sqlite_fetch_all	;	Fetches all rows from a result set as an array of arrays	;	array SQLiteUnbuffered::fetchAll ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )	;	sqlite_fetch_all() returns an array of the entire result set from the result resource. It is similar to calling sqlite_query() (or sqlite_unbuffered_query() ) and then sqlite_fetch_array() for each row in the result set.
sqlite_current	;	Fetches the current row from a result set as an array	;	array SQLiteUnbuffered::current ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )	;	sqlite_current() is identical to sqlite_fetch_array() except that it does not advance to the next row prior to returning the data; it returns the data from the current position only.
sqlite_column	;	Fetches a column from the current row of a result set	;	mixed SQLiteUnbuffered::column ( mixed $index_or_name [, bool $decode_binary = true ] )	;	Fetches the value of a column named index_or_name (if it is a string), or of the ordinal column numbered index_or_name (if it is an integer) from the current row of the query result handle result.
sqlite_libversion	;	Returns the version of the linked SQLite library	;	string sqlite_libversion ( void )	;	Returns the version of the linked SQLite library.
sqlite_libencoding	;	Returns the encoding of the linked SQLite library	;	string sqlite_libencoding ( void )	;	The SQLite library may be compiled in either ISO-8859-1 or UTF-8 compatible modes. This function allows you to determine which encoding scheme is used by your version of the library.
sqlite_changes	;	Returns the number of rows that were changed by the most    recent SQL statement	;	int SQLiteDatabase::changes ( void )	;	Returns the numbers of rows that were changed by the most recent SQL statement executed against the dbhandle database handle.
sqlite_last_insert_rowid	;	Returns the rowid of the most recently inserted row	;	int SQLiteDatabase::lastInsertRowid ( void )	;	Returns the rowid of the row that was most recently inserted into the database dbhandle, if it was created as an auto-increment field.
sqlite_num_rows	;	Returns the number of rows in a buffered result set	;	int SQLiteResult::numRows ( void )	;	Returns the number of rows in the buffered result set.
sqlite_num_fields	;	Returns the number of fields in a result set	;	int SQLiteUnbuffered::numFields ( void )	;	Returns the number of fields in the result set.
sqlite_field_name	;	Returns the name of a particular field	;	string SQLiteUnbuffered::fieldName ( int $field_index )	;	Given the ordinal column number, field_index, sqlite_field_name() returns the name of that field in the result set result.
sqlite_seek	;	Seek to a particular row number of a buffered result set	;	bool SQLiteResult::seek ( int $rownum )	;	sqlite_seek() seeks to the row given by the parameter rownum.
sqlite_rewind	;	Seek to the first row number	;	bool SQLiteResult::rewind ( void )	;	sqlite_rewind() seeks back to the first row in the given result set.
sqlite_next	;	Seek to the next row number	;	bool SQLiteUnbuffered::next ( void )	;	sqlite_next() advances the result handle result to the next row.
sqlite_prev	;	Seek to the previous row number of a result set	;	bool SQLiteResult::prev ( void )	;	sqlite_prev() seeks back the result handle to the previous row.
sqlite_valid	;	Returns whether more rows are available	;	bool SQLiteUnbuffered::valid ( void )	;	Finds whether more rows are available from the given result handle.
sqlite_has_more	;	Finds whether or not more rows are available	;	bool sqlite_has_more ( resource $result )	;	Finds whether more rows are available from the given result set.
sqlite_has_prev	;	Returns whether or not a previous row is available	;	bool SQLiteResult::hasPrev ( void )	;	Find whether there are more previous rows from the given result handle.
sqlite_escape_string	;	Escapes a string for use as a query parameter	;	string sqlite_escape_string ( string $item )	;	sqlite_escape_string() will correctly quote the string specified by item for use in an SQLite SQL statement. This includes doubling up single-quote characters (') and checking for binary-unsafe characters in the query string.
sqlite_busy_timeout	;	Set busy timeout duration, or disable busy handlers	;	void SQLiteDatabase::busyTimeout ( int $milliseconds )	;	Set the maximum time, in milliseconds, that SQLite will wait for a dbhandle to become ready for use.
sqlite_last_error	;	Returns the error code of the last error for a database	;	int SQLiteDatabase::lastError ( void )	;	Returns the error code from the last operation performed on dbhandle (the database handle), or 0 when no error occurred. A human readable description of the error code can be retrieved using sqlite_error_string() .
sqlite_error_string	;	Returns the textual description of an error code	;	string sqlite_error_string ( int $error_code )	;	Returns a human readable description of the error_code returned from sqlite_last_error() .
sqlite_unbuffered_query	;	Execute a query that does not prefetch and buffer all data	;	SQLiteUnbuffered SQLiteDatabase::unbufferedQuery ( string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )	;	sqlite_unbuffered_query() is identical to sqlite_query() except that the result that is returned is a sequential forward-only result set that can only be used to read each row, one after the other.
sqlite_create_aggregate	;	Register an aggregating UDF for use in SQL statements	;	void SQLiteDatabase::createAggregate ( string $function_name, callable $step_func, callable $finalize_func [, int $num_args = -1 ] )	;	sqlite_create_aggregate() is similar to sqlite_create_function() except that it registers functions that can be used to calculate a result aggregated across all the rows of a query.
sqlite_create_function	;	Registers a "regular" User Defined Function for use in SQL statements	;	void SQLiteDatabase::createFunction ( string $function_name, callable $callback [, int $num_args = -1 ] )	;	sqlite_create_function() allows you to register a PHP function with SQLite as an UDF (User Defined Function), so that it can be called from within your SQL statements.
sqlite_factory	;	Opens an SQLite database and returns an SQLiteDatabase object	;	SQLiteDatabase sqlite_factory ( string $filename [, int $mode = 0666 [, string &$error_message ]] )	;	sqlite_factory() behaves similarly to sqlite_open() in that it opens an SQLite database or attempts to create it if it does not exist. However, a SQLiteDatabase object is returned rather than a resource. Please see the sqlite_open() reference page for further usage and caveats.
sqlite_udf_encode_binary	;	Encode binary data before returning it from an UDF	;	string sqlite_udf_encode_binary ( string $data )	;	sqlite_udf_encode_binary() applies a binary encoding to the data so that it can be safely returned from queries (since the underlying libsqlite API is not binary safe).
sqlite_udf_decode_binary	;	Decode binary data passed as parameters to an UDF	;	string sqlite_udf_decode_binary ( string $data )	;	Decodes binary data passed as parameters to a UDF.
sqlite_fetch_column_types	;	Return an array of column types from a particular table	;	array SQLiteDatabase::fetchColumnTypes ( string $table_name [, int $result_type = SQLITE_ASSOC ] )	;	sqlite_fetch_column_types() returns an array of column data types from the specified table_name table.
constant	;	Returns the value of a constant	;	mixed constant ( string $name )	;	
bin2hex	;	Convert binary data into hexadecimal representation	;	string bin2hex ( string $str )	;	Returns an ASCII string containing the hexadecimal representation of str. The conversion is done byte-wise with the high-nibble first.
sleep	;	Delay execution	;	int sleep ( int $seconds )	;	
usleep	;	Delay execution in microseconds	;	void usleep ( int $micro_seconds )	;	Delays program execution for the given number of micro seconds.
time_nanosleep	;	Delay for a number of seconds and nanoseconds	;	mixed time_nanosleep ( int $seconds, int $nanoseconds )	;	Delays program execution for the given number of seconds and nanoseconds.
time_sleep_until	;	Make the script sleep until the specified time	;	bool time_sleep_until ( float $timestamp )	;	Makes the script sleep until the specified timestamp.
strptime	;	Parse a time/date generated with  strftime()	;	array strptime ( string $date, string $format )	;	strptime() returns an array with the date parsed, or FALSE on error.
flush	;	Flush the output buffer	;	void flush ( void )	;	Flushes the write buffers of PHP and whatever backend PHP is using (CGI, a web server, etc). This attempts to push current output all the way to the browser with a few caveats.
wordwrap	;	Wraps a string to a given number of characters	;	string wordwrap ( string $str [, int $width = 75 [, string $break = "\n" [, bool $cut = false ]]] )	;	Wraps a string to a given number of characters using a string break character.
htmlspecialchars	;	Convert special characters to HTML entities	;	string htmlspecialchars ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' [, bool $double_encode = true ]]] )	;	Certain characters have special significance in HTML, and should be represented by HTML entities if they are to preserve their meanings. This function returns a string with these conversions made. If you require all input substrings that have associated named entities to be translated, use htmlentities() instead.
htmlentities	;	Convert all applicable characters to HTML entities	;	string htmlentities ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' [, bool $double_encode = true ]]] )	;	This function is identical to htmlspecialchars() in all ways, except with htmlentities() , all characters which have HTML character entity equivalents are translated into these entities.
html_entity_decode	;	Convert all HTML entities to their applicable characters	;	string html_entity_decode ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' ]] )	;	html_entity_decode() is the opposite of htmlentities() in that it converts all HTML entities in the string to their applicable characters.
htmlspecialchars_decode	;	Convert special HTML entities back to characters	;	string htmlspecialchars_decode ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 ] )	;	This function is the opposite of htmlspecialchars() . It converts special HTML entities back to characters.
get_html_translation_table	;	Returns the translation table used by  htmlspecialchars()  and  htmlentities()	;	array get_html_translation_table ([ int $table = HTML_SPECIALCHARS [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' ]]] )	;	get_html_translation_table() will return the translation table that is used internally for htmlspecialchars() and htmlentities() .
sha1	;	Calculate the sha1 hash of a string	;	string sha1 ( string $str [, bool $raw_output = false ] )	;	
sha1_file	;	Calculate the sha1 hash of a file	;	string sha1_file ( string $filename [, bool $raw_output = false ] )	;	
md5	;	Calculate the md5 hash of a string	;	string md5 ( string $str [, bool $raw_output = false ] )	;	Calculates the MD5 hash of str using the &raquo;&nbsp;RSA Data Security, Inc. MD5 Message-Digest Algorithm, and returns that hash.
md5_file	;	Calculates the md5 hash of a given file	;	string md5_file ( string $filename [, bool $raw_output = false ] )	;	Calculates the MD5 hash of the file specified by the filename parameter using the &raquo;&nbsp;RSA Data Security, Inc. MD5 Message-Digest Algorithm, and returns that hash. The hash is a 32-character hexadecimal number.
crc32	;	Calculates the crc32 polynomial of a string	;	int crc32 ( string $str )	;	Generates the cyclic redundancy checksum polynomial of 32-bit lengths of the str. This is usually used to validate the integrity of data being transmitted.
iptcparse	;	Parse a binary IPTC block into single tags.	;	array iptcparse ( string $iptcblock )	;	Parses an &raquo;&nbsp;IPTC block into its single tags.
iptcembed	;	Embeds binary IPTC data into a JPEG image	;	mixed iptcembed ( string $iptcdata, string $jpeg_file_name [, int $spool ] )	;	Embeds binary IPTC data into a JPEG image.
getimagesize	;	Get the size of an image	;	array getimagesize ( string $filename [, array &$imageinfo ] )	;	The getimagesize() function will determine the size of any given image file and return the dimensions along with the file type and a height/width text string to be used inside a normal HTML IMG tag and the correspondant HTTP content type.
image_type_to_mime_type	;	Get Mime-Type for image-type returned by getimagesize,    exif_read_data, exif_thumbnail, exif_imagetype	;	string image_type_to_mime_type ( int $imagetype )	;	The image_type_to_mime_type() function will determine the Mime-Type for an IMAGETYPE constant.
image_type_to_extension	;	Get file extension for image type	;	string image_type_to_extension ( int $imagetype [, bool $include_dot = TRUE ] )	;	Returns the extension for the given IMAGETYPE_XXX constant.
phpinfo	;	Outputs information about PHP's configuration	;	bool phpinfo ([ int $what = INFO_ALL ] )	;	Outputs a large amount of information about the current state of PHP. This includes information about PHP compilation options and extensions, the PHP version, server information and environment (if compiled as a module), the PHP environment, OS version information, paths, master and local values of configuration options, HTTP headers, and the PHP License.
phpversion	;	Gets the current PHP version	;	string phpversion ([ string $extension ] )	;	Returns a string containing the version of the currently running PHP parser or extension.
phpcredits	;	Prints out the credits for PHP	;	bool phpcredits ([ int $flag = CREDITS_ALL ] )	;	This function prints out the credits listing the PHP developers, modules, etc. It generates the appropriate HTML codes to insert the information in a page.
php_logo_guid	;	Gets the logo guid	;	string php_logo_guid ( void )	;	This function returns the ID which can be used to display the PHP logo using the built-in image. Logo is displayed only if expose_php is On.
zend_logo_guid	;	Gets the Zend guid	;	string zend_logo_guid ( void )	;	This function returns the ID which can be used to display the Zend logo using the built-in image.
php_sapi_name	;	Returns the type of interface between web server and PHP	;	string php_sapi_name ( void )	;	
php_uname	;	Returns information about the operating system PHP is running on	;	string php_uname ([ string $mode = "a" ] )	;	php_uname() returns a description of the operating system PHP is running on. This is the same string you see at the very top of the phpinfo() output. For the name of just the operating system, consider using the PHP_OS constant, but keep in mind this constant will contain the operating system PHP was built on.
php_ini_scanned_files	;	Return a list of .ini files parsed from the additional ini dir	;	string php_ini_scanned_files ( void )	;	php_ini_scanned_files() returns a comma-separated list of configuration files parsed after php.ini. These files are found in a directory defined by the --with-config-file-scan-dir option which is set during compilation.
php_ini_loaded_file	;	Retrieve a path to the loaded php.ini file	;	string php_ini_loaded_file ( void )	;	Check if a php.ini file is loaded, and retrieve its path.
strnatcmp	;	String comparisons using a "natural order" algorithm	;	int strnatcmp ( string $str1, string $str2 )	;	This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would, this is described as a "natural ordering". Note that this comparison is case sensitive.
strnatcasecmp	;	Case insensitive string comparisons using a "natural order" algorithm	;	int strnatcasecmp ( string $str1, string $str2 )	;	This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would. The behaviour of this function is similar to strnatcmp() , except that the comparison is not case sensitive. For more information see: Martin Pool's &raquo;&nbsp;Natural Order String Comparison page.
substr_count	;	Count the number of substring occurrences	;	int substr_count ( string $haystack, string $needle [, int $offset = 0 [, int $length ]] )	;	substr_count() returns the number of times the needle substring occurs in the haystack string. Please note that needle is case sensitive.
strspn	;	Finds the length of the initial segment of a string consisting    entirely of characters contained within a given mask.	;	int strspn ( string $subject, string $mask [, int $start [, int $length ]] )	;	Finds the length of the initial segment of subject that contains only characters from mask.
strcspn	;	Find length of initial segment not matching mask	;	int strcspn ( string $str1, string $str2 [, int $start [, int $length ]] )	;	Returns the length of the initial segment of str1 which does not contain any of the characters in str2.
strtok	;	Tokenize string	;	string strtok ( string $token )	;	strtok() splits a string (str) into smaller strings (tokens), with each token being delimited by any character from token. That is, if you have a string like "This is an example string" you could tokenize this string into its individual words by using the space character as the token.
strtoupper	;	Make a string uppercase	;	string strtoupper ( string $string )	;	Returns string with all alphabetic characters converted to uppercase.
strtolower	;	Make a string lowercase	;	string strtolower ( string $str )	;	Returns string with all alphabetic characters converted to lowercase.
strpos	;	Find the position of the first occurrence of a substring in a string	;	int strpos ( string $haystack, mixed $needle [, int $offset = 0 ] )	;	Find the numeric position of the first occurrence of needle in the haystack string.
stripos	;	Find the position of the first occurrence of a case-insensitive substring in a string	;	int stripos ( string $haystack, string $needle [, int $offset = 0 ] )	;	Find the numeric position of the first occurrence of needle in the haystack string.
strrpos	;	Find the position of the last occurrence of a substring in a string	;	int strrpos ( string $haystack, string $needle [, int $offset = 0 ] )	;	Find the numeric position of the last occurrence of needle in the haystack string.
strripos	;	Find the position of the last occurrence of a case-insensitive substring in a string	;	int strripos ( string $haystack, string $needle [, int $offset = 0 ] )	;	Find the numeric position of the last occurrence of needle in the haystack string.
strrev	;	Reverse a string	;	string strrev ( string $string )	;	Returns string, reversed.
hebrev	;	Convert logical Hebrew text to visual text	;	string hebrev ( string $hebrew_text [, int $max_chars_per_line = 0 ] )	;	Converts logical Hebrew text to visual text.
hebrevc	;	Convert logical Hebrew text to visual text with newline conversion	;	string hebrevc ( string $hebrew_text [, int $max_chars_per_line = 0 ] )	;	This function is similar to hebrev() with the difference that it converts newlines (\n) to "<br>\n".
nl2br	;	Inserts HTML line breaks before all newlines in a string	;	string nl2br ( string $string [, bool $is_xhtml = true ] )	;	Returns string with '<br />' or '<br>' inserted before all newlines (\r\n, \n\r, \n and \r).
basename	;	Returns trailing name component of path	;	string basename ( string $path [, string $suffix ] )	;	Given a string containing the path to a file or directory, this function will return the trailing name component.
dirname	;	Returns parent directory's path	;	string dirname ( string $path )	;	Given a string containing the path of a file or directory, this function will return the parent directory's path.
pathinfo	;	Returns information about a file path	;	mixed pathinfo ( string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ] )	;	pathinfo() returns information about path: either an associative array or a string, depending on options.
stripslashes	;	Un-quotes a quoted string	;	string stripslashes ( string $str )	;	Un-quotes a quoted string.
stripcslashes	;	Un-quote string quoted with  addcslashes()	;	string stripcslashes ( string $str )	;	Returns a string with backslashes stripped off. Recognizes C-like \n, \r ..., octal and hexadecimal representation.
strstr	;	Find the first occurrence of a string	;	string strstr ( string $haystack, mixed $needle [, bool $before_needle = false ] )	;	Returns part of haystack string starting from and including the first occurrence of needle to the end of haystack.
stristr	;	Case-insensitive  strstr()	;	string stristr ( string $haystack, mixed $needle [, bool $before_needle = false ] )	;	Returns all of haystack starting from and including the first occurrence of needle to the end.
strrchr	;	Find the last occurrence of a character in a string	;	string strrchr ( string $haystack, mixed $needle )	;	This function returns the portion of haystack which starts at the last occurrence of needle and goes until the end of haystack.
str_shuffle	;	Randomly shuffles a string	;	string str_shuffle ( string $str )	;	
str_word_count	;	Return information about words used in a string	;	mixed str_word_count ( string $string [, int $format = 0 [, string $charlist ]] )	;	Counts the number of words inside string. If the optional format is not specified, then the return value will be an integer representing the number of words found. In the event the format is specified, the return value will be an array, content of which is dependent on the format. The possible value for the format and the resultant outputs are listed below.
str_split	;	Convert a string to an array	;	array str_split ( string $string [, int $split_length = 1 ] )	;	Converts a string to an array.
strpbrk	;	Search a string for any of a set of characters	;	string strpbrk ( string $haystack, string $char_list )	;	strpbrk() searches the haystack string for a char_list.
substr_compare	;	Binary safe comparison of two strings from an offset, up to length characters	;	int substr_compare ( string $main_str, string $str, int $offset [, int $length [, bool $case_insensitivity = false ]] )	;	substr_compare() compares main_str from position offset with str up to length characters.
strcoll	;	Locale based string comparison	;	int strcoll ( string $str1, string $str2 )	;	Note that this comparison is case sensitive, and unlike strcmp() this function is not binary safe.
money_format	;	Formats a number as a currency string	;	string money_format ( string $format, float $number )	;	money_format() returns a formatted version of number. This function wraps the C library function strfmon() , with the difference that this implementation converts only one number at a time.
substr	;	Return part of a string	;	string substr ( string $string, int $start [, int $length ] )	;	Returns the portion of string specified by the start and length parameters.
substr_replace	;	Replace text within a portion of a string	;	mixed substr_replace ( mixed $string, mixed $replacement, mixed $start [, mixed $length ] )	;	substr_replace() replaces a copy of string delimited by the start and (optionally) length parameters with the string given in replacement.
quotemeta	;	Quote meta characters	;	string quotemeta ( string $str )	;	Returns a version of str with a backslash character (\) before every character that is among these: . \ + * ? [ ^ ] ( $ )
ucfirst	;	Make a string's first character uppercase	;	string ucfirst ( string $str )	;	Returns a string with the first character of str capitalized, if that character is alphabetic.
lcfirst	;	Make a string's first character lowercase	;	string lcfirst ( string $str )	;	Returns a string with the first character of str , lowercased if that character is alphabetic.
ucwords	;	Uppercase the first character of each word in a string	;	string ucwords ( string $str )	;	Returns a string with the first character of each word in str capitalized, if that character is alphabetic.
strtr	;	Translate characters or replace substrings	;	string strtr ( string $str, array $replace_pairs )	;	If given three arguments, this function returns a copy of str where all occurrences of each (single-byte) character in from have been translated to the corresponding character in to, i.e., every occurrence of $from[$n] has been replaced with $to[$n], where $n is a valid offset in both arguments.
addslashes	;	Quote string with slashes	;	string addslashes ( string $str )	;	Returns a string with backslashes before characters that need to be quoted in database queries etc. These characters are single quote ('), double quote ("), backslash (\) and NUL (the NULL byte).
addcslashes	;	Quote string with slashes in a C style	;	string addcslashes ( string $str, string $charlist )	;	Returns a string with backslashes before characters that are listed in charlist parameter.
rtrim	;	Strip whitespace (or other characters) from the end of a string	;	string rtrim ( string $str [, string $charlist ] )	;	This function returns a string with whitespace stripped from the end of str.
str_replace	;	Replace all occurrences of the search string with the replacement string	;	mixed str_replace ( mixed $search, mixed $replace, mixed $subject [, int &$count ] )	;	This function returns a string or an array with all occurrences of search in subject replaced with the given replace value.
str_ireplace	;	Case-insensitive version of  str_replace() .	;	mixed str_ireplace ( mixed $search, mixed $replace, mixed $subject [, int &$count ] )	;	This function returns a string or an array with all occurrences of search in subject (ignoring case) replaced with the given replace value. If you don't need fancy replacing rules, you should generally use this function instead of preg_replace() with the i modifier.
str_repeat	;	Repeat a string	;	string str_repeat ( string $input, int $multiplier )	;	Returns input repeated multiplier times.
count_chars	;	Return information about characters used in a string	;	mixed count_chars ( string $string [, int $mode = 0 ] )	;	Counts the number of occurrences of every byte-value (0..255) in string and returns it in various ways.
chunk_split	;	Split a string into smaller chunks	;	string chunk_split ( string $body [, int $chunklen = 76 [, string $end = "\r\n" ]] )	;	Can be used to split a string into smaller chunks which is useful for e.g. converting base64_encode() output to match RFC 2045 semantics. It inserts end every chunklen characters.
trim	;	Strip whitespace (or other characters) from the beginning and end of a string	;	string trim ( string $str [, string $charlist ] )	;	This function returns a string with whitespace stripped from the beginning and end of str. Without the second parameter, trim() will strip these characters: " " (ASCII 32 (0x20)), an ordinary space. "\t" (ASCII 9 (0x09)), a tab. "\n" (ASCII 10 (0x0A)), a new line (line feed). "\r" (ASCII 13 (0x0D)), a carriage return. "\0" (ASCII 0 (0x00)), the NUL-byte. "\x0B" (ASCII 11 (0x0B)), a vertical tab.
ltrim	;	Strip whitespace (or other characters) from the beginning of a string	;	string ltrim ( string $str [, string $charlist ] )	;	Strip whitespace (or other characters) from the beginning of a string.
strip_tags	;	Strip HTML and PHP tags from a string	;	string strip_tags ( string $str [, string $allowable_tags ] )	;	This function tries to return a string with all NUL bytes, HTML and PHP tags stripped from a given str. It uses the same tag stripping state machine as the fgetss() function.
similar_text	;	Calculate the similarity between two strings	;	int similar_text ( string $first, string $second [, float &$percent ] )	;	This calculates the similarity between two strings as described in Programming Classics: Implementing the World's Best Algorithms by Oliver (ISBN 0-131-00413-1). Note that this implementation does not use a stack as in Oliver's pseudo code, but recursive calls which may or may not speed up the whole process. Note also that the complexity of this algorithm is O(N**3) where N is the length of the longest string.
explode	;	Split a string by string	;	array explode ( string $delimiter, string $string [, int $limit ] )	;	Returns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by the string delimiter.
implode	;	Join array elements with a string	;	string implode ( array $pieces )	;	Join array elements with a glue string.
join	;	Alias of  implode()	;		;	
setlocale	;	Set locale information	;	string setlocale ( int $category, array $locale )	;	Sets locale information.
localeconv	;	Get numeric formatting information	;	array localeconv ( void )	;	Returns an associative array containing localized numeric and monetary formatting information.
nl_langinfo	;	Query language and locale information	;	string nl_langinfo ( int $item )	;	nl_langinfo() is used to access individual elements of the locale categories. Unlike localeconv() , which returns all of the elements, nl_langinfo() allows you to select any specific element.
soundex	;	Calculate the soundex key of a string	;	string soundex ( string $str )	;	Calculates the soundex key of str.
levenshtein	;	Calculate Levenshtein distance between two strings	;	int levenshtein ( string $str1, string $str2, int $cost_ins, int $cost_rep, int $cost_del )	;	The Levenshtein distance is defined as the minimal number of characters you have to replace, insert or delete to transform str1 into str2. The complexity of the algorithm is O(m*n), where n and m are the length of str1 and str2 (rather good when compared to similar_text() , which is O(max(n,m)**3), but still expensive).
chr	;	Return a specific character	;	string chr ( int $ascii )	;	Returns a one-character string containing the character specified by ascii.
ord	;	Return ASCII value of character	;	int ord ( string $string )	;	Returns the ASCII value of the first character of string.
parse_str	;	Parses the string into variables	;	void parse_str ( string $str [, array &$arr ] )	;	Parses str as if it were the query string passed via a URL and sets variables in the current scope.
str_getcsv	;	Parse a CSV string into an array	;	array str_getcsv ( string $input [, string $delimiter = ',' [, string $enclosure = '"' [, string $escape = '\\' ]]] )	;	Parses a string input for fields in CSV format and returns an array containing the fields read.
str_pad	;	Pad a string to a certain length with another string	;	string str_pad ( string $input, int $pad_length [, string $pad_string = " " [, int $pad_type = STR_PAD_RIGHT ]] )	;	This functions returns the input string padded on the left, the right, or both sides to the specified padding length. If the optional argument pad_string is not supplied, the input is padded with spaces, otherwise it is padded with characters from pad_string up to the limit.
chop	;	Alias of  rtrim()	;		;	
strchr	;	Alias of  strstr()	;		;	
sprintf	;	Return a formatted string	;	string sprintf ( string $format [, mixed $args [, mixed $... ]] )	;	Returns a string produced according to the formatting string format.
printf	;	Output a formatted string	;	int printf ( string $format [, mixed $args [, mixed $... ]] )	;	
vprintf	;	Output a formatted string	;	int vprintf ( string $format, array $args )	;	Display array values as a formatted string according to format (which is described in the documentation for sprintf() ).
vsprintf	;	Return a formatted string	;	string vsprintf ( string $format, array $args )	;	Operates as sprintf() but accepts an array of arguments, rather than a variable number of arguments.
fprintf	;	Write a formatted string to a stream	;	int fprintf ( resource $handle, string $format [, mixed $args [, mixed $... ]] )	;	Write a string produced according to format to the stream resource specified by handle.
vfprintf	;	Write a formatted string to a stream	;	int vfprintf ( resource $handle, string $format, array $args )	;	Write a string produced according to format to the stream resource specified by handle.
sscanf	;	Parses input from a string according to a format	;	mixed sscanf ( string $str, string $format [, mixed &$... ] )	;	The function sscanf() is the input analog of printf() . sscanf() reads from the string str and interprets it according to the specified format, which is described in the documentation for sprintf() .
fscanf	;	Parses input from a file according to a format	;	mixed fscanf ( resource $handle, string $format [, mixed &$... ] )	;	The function fscanf() is similar to sscanf() , but it takes its input from a file associated with handle and interprets the input according to the specified format, which is described in the documentation for sprintf() .
parse_url	;	Parse a URL and return its components	;	mixed parse_url ( string $url [, int $component = -1 ] )	;	This function parses a URL and returns an associative array containing any of the various components of the URL that are present.
urlencode	;	URL-encodes string	;	string urlencode ( string $str )	;	This function is convenient when encoding a string to be used in a query part of a URL, as a convenient way to pass variables to the next page.
urldecode	;	Decodes URL-encoded string	;	string urldecode ( string $str )	;	Decodes any %## encoding in the given string. Plus symbols ('+') are decoded to a space character.
rawurlencode	;	URL-encode according to RFC 3986	;	string rawurlencode ( string $str )	;	Encodes the given string according to &raquo;&nbsp;RFC 3986.
rawurldecode	;	Decode URL-encoded strings	;	string rawurldecode ( string $str )	;	Returns a string in which the sequences with percent (%) signs followed by two hex digits have been replaced with literal characters.
http_build_query	;	Generate URL-encoded query string	;	string http_build_query ( mixed $query_data [, string $numeric_prefix [, string $arg_separator [, int $enc_type = PHP_QUERY_RFC1738 ]]] )	;	Generates a URL-encoded query string from the associative (or indexed) array provided.
readlink	;	Returns the target of a symbolic link	;	string readlink ( string $path )	;	readlink() does the same as the readlink C function.
linkinfo	;	Gets information about a link	;	int linkinfo ( string $path )	;	Gets information about a link.
symlink	;	Creates a symbolic link	;	bool symlink ( string $target, string $link )	;	symlink() creates a symbolic link to the existing target with the specified name link.
link	;	Create a hard link	;	bool link ( string $target, string $link )	;	link() creates a hard link.
unlink	;	Deletes a file	;	bool unlink ( string $filename [, resource $context ] )	;	Deletes filename. Similar to the Unix C unlink() function. A E_WARNING level error will be generated on failure.
exec	;	Execute an external program	;	string exec ( string $command [, array &$output [, int &$return_var ]] )	;	exec() executes the given command.
system	;	Execute an external program and display the output	;	string system ( string $command [, int &$return_var ] )	;	system() is just like the C version of the function in that it executes the given command and outputs the result.
escapeshellcmd	;	Escape shell metacharacters	;	string escapeshellcmd ( string $command )	;	escapeshellcmd() escapes any characters in a string that might be used to trick a shell command into executing arbitrary commands. This function should be used to make sure that any data coming from user input is escaped before this data is passed to the exec() or system() functions, or to the backtick operator.
escapeshellarg	;	Escape a string to be used as a shell argument	;	string escapeshellarg ( string $arg )	;	escapeshellarg() adds single quotes around a string and quotes/escapes any existing single quotes allowing you to pass a string directly to a shell function and having it be treated as a single safe argument. This function should be used to escape individual arguments to shell functions coming from user input. The shell functions include exec() , system() and the backtick operator.
passthru	;	Execute an external program and display raw output	;	void passthru ( string $command [, int &$return_var ] )	;	The passthru() function is similar to the exec() function in that it executes a command. This function should be used in place of exec() or system() when the output from the Unix command is binary data which needs to be passed directly back to the browser. A common use for this is to execute something like the pbmplus utilities that can output an image stream directly. By setting the Content-type to image/gif and then calling a pbmplus program to output a gif, you can create PHP scripts that output images directly.
shell_exec	;	Execute command via shell and return the complete output as a string	;	string shell_exec ( string $cmd )	;	This function is identical to the backtick operator.
proc_open	;	Execute a command and open file pointers for input/output	;	resource proc_open ( string $cmd, array $descriptorspec, array &$pipes [, string $cwd [, array $env [, array $other_options ]]] )	;	proc_open() is similar to popen() but provides a much greater degree of control over the program execution.
proc_close	;	Close a process opened by  proc_open()  and return the exit code of that process	;	int proc_close ( resource $process )	;	proc_close() is similar to pclose() except that it only works on processes opened by proc_open() . proc_close() waits for the process to terminate, and returns its exit code. If you have open pipes to that process, you should fclose() them prior to calling this function in order to avoid a deadlock - the child process may not be able to exit while the pipes are open.
proc_terminate	;	Kills a process opened by proc_open	;	bool proc_terminate ( resource $process [, int $signal = 15 ] )	;	Signals a process (created using proc_open() ) that it should terminate. proc_terminate() returns immediately and does not wait for the process to terminate.
proc_get_status	;	Get information about a process opened by  proc_open()	;	array proc_get_status ( resource $process )	;	proc_get_status() fetches data about a process opened using proc_open() .
proc_nice	;	Change the priority of the current process	;	bool proc_nice ( int $increment )	;	proc_nice() changes the priority of the current process by the amount specified in increment. A positive increment will lower the priority of the current process, whereas a negative increment will raise the priority.
rand	;	Generate a random integer	;	int rand ( int $min, int $max )	;	
srand	;	Seed the random number generator	;	void srand ([ int $seed ] )	;	Seeds the random number generator with seed or with a random value if no seed is given.
getrandmax	;	Show largest possible random value	;	int getrandmax ( void )	;	
mt_rand	;	Generate a better random value	;	int mt_rand ( int $min, int $max )	;	
mt_srand	;	Seed the better random number generator	;	void mt_srand ([ int $seed ] )	;	Seeds the random number generator with seed or with a random value if no seed is given.
mt_getrandmax	;	Show largest possible random value	;	int mt_getrandmax ( void )	;	
getservbyname	;	Get port number associated with an Internet service and protocol	;	int getservbyname ( string $service, string $protocol )	;	getservbyname() returns the Internet port which corresponds to service for the specified protocol as per /etc/services.
getservbyport	;	Get Internet service which corresponds to port and protocol	;	string getservbyport ( int $port, string $protocol )	;	getservbyport() returns the Internet service associated with port for the specified protocol as per /etc/services.
getprotobyname	;	Get protocol number associated with protocol name	;	int getprotobyname ( string $name )	;	getprotobyname() returns the protocol number associated with the protocol name as per /etc/protocols.
getprotobynumber	;	Get protocol name associated with protocol number	;	string getprotobynumber ( int $number )	;	getprotobynumber() returns the protocol name associated with protocol number as per /etc/protocols.
getmyuid	;	Gets PHP script owner's UID	;	int getmyuid ( void )	;	
getmygid	;	Get PHP script owner's GID	;	int getmygid ( void )	;	
getmypid	;	Gets PHP's process ID	;	int getmypid ( void )	;	Gets the current PHP process ID.
getmyinode	;	Gets the inode of the current script	;	int getmyinode ( void )	;	Gets the inode of the current script.
getlastmod	;	Gets time of last page modification	;	int getlastmod ( void )	;	Gets the time of the last modification of the current page.
base64_decode	;	Decodes data encoded with MIME base64	;	string base64_decode ( string $data [, bool $strict = false ] )	;	Decodes a base64 encoded data.
base64_encode	;	Encodes data with MIME base64	;	string base64_encode ( string $data )	;	Encodes the given data with base64.
convert_uuencode	;	Uuencode a string	;	string convert_uuencode ( string $data )	;	convert_uuencode() encodes a string using the uuencode algorithm.
convert_uudecode	;	Decode a uuencoded string	;	string convert_uudecode ( string $data )	;	convert_uudecode() decodes a uuencoded string.
abs	;	Absolute value	;	number abs ( mixed $number )	;	Returns the absolute value of number.
ceil	;	Round fractions up	;	float ceil ( float $value )	;	
floor	;	Round fractions down	;	float floor ( float $value )	;	
round	;	Rounds a float	;	float round ( float $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP ]] )	;	Returns the rounded value of val to specified precision (number of digits after the decimal point). precision can also be negative or zero (default).
sin	;	Sine	;	float sin ( float $arg )	;	sin() returns the sine of the arg parameter. The arg parameter is in radians.
cos	;	Cosine	;	float cos ( float $arg )	;	cos() returns the cosine of the arg parameter. The arg parameter is in radians.
tan	;	Tangent	;	float tan ( float $arg )	;	tan() returns the tangent of the arg parameter. The arg parameter is in radians.
asin	;	Arc sine	;	float asin ( float $arg )	;	Returns the arc sine of arg in radians. asin() is the complementary function of sin() , which means that a==sin(asin(a)) for every value of a that is within asin() 's range.
acos	;	Arc cosine	;	float acos ( float $arg )	;	Returns the arc cosine of arg in radians. acos() is the complementary function of cos() , which means that a==cos(acos(a)) for every value of a that is within acos() ' range.
atan	;	Arc tangent	;	float atan ( float $arg )	;	Returns the arc tangent of arg in radians. atan() is the complementary function of tan() , which means that a==tan(atan(a)) for every value of a that is within atan() 's range.
atanh	;	Inverse hyperbolic tangent	;	float atanh ( float $arg )	;	Returns the inverse hyperbolic tangent of arg, i.e. the value whose hyperbolic tangent is arg.
atan2	;	Arc tangent of two variables	;	float atan2 ( float $y, float $x )	;	
sinh	;	Hyperbolic sine	;	float sinh ( float $arg )	;	Returns the hyperbolic sine of arg, defined as (exp(arg) - exp(-arg))/2.
cosh	;	Hyperbolic cosine	;	float cosh ( float $arg )	;	Returns the hyperbolic cosine of arg, defined as (exp(arg) + exp(-arg))/2.
tanh	;	Hyperbolic tangent	;	float tanh ( float $arg )	;	Returns the hyperbolic tangent of arg, defined as sinh(arg)/cosh(arg).
asinh	;	Inverse hyperbolic sine	;	float asinh ( float $arg )	;	Returns the inverse hyperbolic sine of arg, i.e. the value whose hyperbolic sine is arg.
acosh	;	Inverse hyperbolic cosine	;	float acosh ( float $arg )	;	Returns the inverse hyperbolic cosine of arg, i.e. the value whose hyperbolic cosine is arg.
expm1	;	Returns exp(number) - 1, computed in a way that is accurate even    when the value of number is close to zero	;	float expm1 ( float $arg )	;	expm1() returns the equivalent to 'exp(arg) - 1' computed in a way that is accurate even if the value of arg is near zero, a case where 'exp (arg) - 1' would be inaccurate due to subtraction of two numbers that are nearly equal.
log1p	;	Returns log(1 + number), computed in a way that is accurate even when    the value of number is close to zero	;	float log1p ( float $number )	;	log1p() returns log(1 + number) computed in a way that is accurate even when the value of number is close to zero. log() might only return log(1) in this case due to lack of precision.
pi	;	Get value of pi	;	float pi ( void )	;	
is_finite	;	Finds whether a value is a legal finite number	;	bool is_finite ( float $val )	;	Checks whether val is a legal finite on this platform.
is_nan	;	Finds whether a value is not a number	;	bool is_nan ( float $val )	;	Checks whether val is 'not a number', like the result of acos(1.01).
is_infinite	;	Finds whether a value is infinite	;	bool is_infinite ( float $val )	;	Returns TRUE if val is infinite (positive or negative), like the result of log(0) or any value too big to fit into a float on this platform.
pow	;	Exponential expression	;	number pow ( number $base, number $exp )	;	Returns base raised to the power of exp.
exp	;	Calculates the exponent of e	;	float exp ( float $arg )	;	Returns e raised to the power of arg.
log	;	Natural logarithm	;	float log ( float $arg [, float $base = M_E ] )	;	If the optional base parameter is specified, log() returns logbase arg, otherwise log() returns the natural logarithm of arg.
log10	;	Base-10 logarithm	;	float log10 ( float $arg )	;	Returns the base-10 logarithm of arg.
sqrt	;	Square root	;	float sqrt ( float $arg )	;	Returns the square root of arg.
hypot	;	Calculate the length of the hypotenuse of a right-angle triangle	;	float hypot ( float $x, float $y )	;	hypot() returns the length of the hypotenuse of a right-angle triangle with sides of length x and y, or the distance of the point (x, y) from the origin. This is equivalent to sqrt(x*x + y*y).
deg2rad	;	Converts the number in degrees to the radian equivalent	;	float deg2rad ( float $number )	;	This function converts number from degrees to the radian equivalent.
rad2deg	;	Converts the radian number to the equivalent number in degrees	;	float rad2deg ( float $number )	;	This function converts number from radian to degrees.
bindec	;	Binary to decimal	;	number bindec ( string $binary_string )	;	Returns the decimal equivalent of the binary number represented by the binary_string argument.
hexdec	;	Hexadecimal to decimal	;	number hexdec ( string $hex_string )	;	Returns the decimal equivalent of the hexadecimal number represented by the hex_string argument. hexdec() converts a hexadecimal string to a decimal number.
octdec	;	Octal to decimal	;	number octdec ( string $octal_string )	;	Returns the decimal equivalent of the octal number represented by the octal_string argument.
decbin	;	Decimal to binary	;	string decbin ( int $number )	;	Returns a string containing a binary representation of the given number argument.
decoct	;	Decimal to octal	;	string decoct ( int $number )	;	Returns a string containing an octal representation of the given number argument. The largest number that can be converted is 4294967295 in decimal resulting to "37777777777".
dechex	;	Decimal to hexadecimal	;	string dechex ( int $number )	;	Returns a string containing a hexadecimal representation of the given unsigned number argument.
base_convert	;	Convert a number between arbitrary bases	;	string base_convert ( string $number, int $frombase, int $tobase )	;	Returns a string containing number represented in base tobase. The base in which number is given is specified in frombase. Both frombase and tobase have to be between 2 and 36, inclusive. Digits in numbers with a base higher than 10 will be represented with the letters a-z, with a meaning 10, b meaning 11 and z meaning 35.
number_format	;	Format a number with grouped thousands	;	string number_format ( float $number, int $decimals = 0, string $dec_point = '.' , string $thousands_sep = ',' )	;	This function accepts either one, two, or four parameters (not three):
fmod	;	Returns the floating point remainder (modulo) of the division   of the arguments	;	float fmod ( float $x, float $y )	;	Returns the floating point remainder of dividing the dividend (x) by the divisor (y). The reminder (r) is defined as: x = i * y + r, for some integer i. If y is non-zero, r has the same sign as x and a magnitude less than the magnitude of y.
inet_ntop	;	Converts a packed internet address to a human readable representation	;	string inet_ntop ( string $in_addr )	;	
inet_pton	;	Converts a human readable IP address to its packed in_addr representation	;	string inet_pton ( string $address )	;	This function converts a human readable IPv4 or IPv6 address (if PHP was built with IPv6 support enabled) into an address family appropriate 32bit or 128bit binary structure.
ip2long	;	Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address	;	int ip2long ( string $ip_address )	;	The function ip2long() generates an IPv4 Internet network address from its Internet standard format (dotted string) representation.
long2ip	;	Converts an (IPv4) Internet network address into a string in Internet standard dotted format	;	string long2ip ( string $proper_address )	;	The function long2ip() generates an Internet address in dotted format (i.e.: aaa.bbb.ccc.ddd) from the proper address representation.
getenv	;	Gets the value of an environment variable	;	string getenv ( string $varname )	;	Gets the value of an environment variable.
putenv	;	Sets the value of an environment variable	;	bool putenv ( string $setting )	;	Adds setting to the server environment. The environment variable will only exist for the duration of the current request. At the end of the request the environment is restored to its original state.
getopt	;	Gets options from the command line argument list	;	array getopt ( string $options [, array $longopts ] )	;	Parses options passed to the script.
sys_getloadavg	;	Gets system load average	;	array sys_getloadavg ( void )	;	Returns three samples representing the average system load (the number of processes in the system run queue) over the last 1, 5 and 15 minutes, respectively.
microtime	;	Return current Unix timestamp with microseconds	;	mixed microtime ([ bool $get_as_float = false ] )	;	microtime() returns the current Unix timestamp with microseconds. This function is only available on operating systems that support the gettimeofday() system call.
gettimeofday	;	Get current time	;	mixed gettimeofday ([ bool $return_float = false ] )	;	This is an interface to gettimeofday(2). It returns an associative array containing the data returned from the system call.
getrusage	;	Gets the current resource usages	;	array getrusage ([ int $who = 0 ] )	;	This is an interface to getrusage(2). It gets data returned from the system call.
uniqid	;	Generate a unique ID	;	string uniqid ([ string $prefix = "" [, bool $more_entropy = false ]] )	;	Gets a prefixed unique identifier based on the current time in microseconds.
quoted_printable_decode	;	Convert a quoted-printable string to an 8 bit string	;	string quoted_printable_decode ( string $str )	;	This function returns an 8-bit binary string corresponding to the decoded quoted printable string (according to &raquo;&nbsp;RFC2045, section 6.7, not &raquo;&nbsp;RFC2821, section 4.5.2, so additional periods are not stripped from the beginning of line).
quoted_printable_encode	;	Convert a 8 bit string to a quoted-printable string	;	string quoted_printable_encode ( string $str )	;	Returns a quoted printable string created according to &raquo;&nbsp;RFC2045, section 6.7.
convert_cyr_string	;	Convert from one Cyrillic character set to another	;	string convert_cyr_string ( string $str, string $from, string $to )	;	Converts from one Cyrillic character set to another.
get_current_user	;	Gets the name of the owner of the current PHP script	;	string get_current_user ( void )	;	
set_time_limit	;	Limits the maximum execution time	;	void set_time_limit ( int $seconds )	;	Set the number of seconds a script is allowed to run. If this is reached, the script returns a fatal error. The default limit is 30 seconds or, if it exists, the max_execution_time value defined in the php.ini.
get_cfg_var	;	Gets the value of a PHP configuration option	;	string get_cfg_var ( string $option )	;	Gets the value of a PHP configuration option.
magic_quotes_runtime	;	Alias of  set_magic_quotes_runtime()	;		;	
set_magic_quotes_runtime	;	Sets the current active configuration setting of magic_quotes_runtime	;	bool set_magic_quotes_runtime ( bool $new_setting )	;	Set the current active configuration setting of magic_quotes_runtime.
get_magic_quotes_gpc	;	Gets the current configuration setting of magic_quotes_gpc	;	bool get_magic_quotes_gpc ( void )	;	Returns the current configuration setting of magic_quotes_gpc
get_magic_quotes_runtime	;	Gets the current active configuration setting of magic_quotes_runtime	;	bool get_magic_quotes_runtime ( void )	;	
import_request_variables	;	Import GET/POST/Cookie variables into the global scope	;	bool import_request_variables ( string $types [, string $prefix ] )	;	Imports GET/POST/Cookie variables into the global scope. It is useful if you disabled register_globals, but would like to see some variables in the global scope.
error_log	;	Send an error message somewhere	;	bool error_log ( string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]] )	;	Sends an error message to the web server's error log or to a file.
error_get_last	;	Get the last occurred error	;	array error_get_last ( void )	;	Gets information about the last error that occurred.
call_user_func	;	Call the callback given by the first parameter	;	mixed call_user_func ( callable $callback [, mixed $parameter [, mixed $... ]] )	;	Calls the callback given by the first parameter and passes the remaining parameters as arguments.
call_user_func_array	;	Call a callback with an array of parameters	;	mixed call_user_func_array ( callable $callback, array $param_arr )	;	Calls the callback given by the first parameter with the parameters in param_arr.
call_user_method	;	Call a user method on an specific object [deprecated]	;	mixed call_user_method ( string $method_name, object &$obj [, mixed $parameter [, mixed $... ]] )	;	
call_user_method_array	;	Call a user method given with an array of parameters [deprecated]	;	mixed call_user_method_array ( string $method_name, object &$obj, array $params )	;	
forward_static_call	;	Call a static method	;	mixed forward_static_call ( callable $function [, mixed $parameter [, mixed $... ]] )	;	Calls a user defined function or method given by the function parameter, with the following arguments. This function must be called within a method context, it can't be used outside a class. It uses the late static binding.
forward_static_call_array	;	Call a static method and pass the arguments as array	;	mixed forward_static_call_array ( callable $function, array $parameters )	;	Calls a user defined function or method given by the function parameter. This function must be called within a method context, it can't be used outside a class. It uses the late static binding. All arguments of the forwarded method are passed as values, and as an array, similarly to call_user_func_array() .
serialize	;	Generates a storable representation of a value	;	string serialize ( mixed $value )	;	Generates a storable representation of a value.
unserialize	;	Creates a PHP value from a stored representation	;	mixed unserialize ( string $str )	;	
var_dump	;	Dumps information about a variable	;	void var_dump ( mixed $expression [, mixed $... ] )	;	
var_export	;	Outputs or returns a parsable string representation of a variable	;	mixed var_export ( mixed $expression [, bool $return = false ] )	;	
debug_zval_dump	;	Dumps a string representation of an internal zend value to output	;	void debug_zval_dump ( mixed $variable )	;	Dumps a string representation of an internal zend value to output.
print_r	;	Prints human-readable information about a variable	;	mixed print_r ( mixed $expression [, bool $return = false ] )	;	print_r() displays information about a variable in a way that's readable by humans.
memory_get_usage	;	Returns the amount of memory allocated to PHP	;	int memory_get_usage ([ bool $real_usage = false ] )	;	Returns the amount of memory, in bytes, that's currently being allocated to your PHP script.
memory_get_peak_usage	;	Returns the peak of memory allocated by PHP	;	int memory_get_peak_usage ([ bool $real_usage = false ] )	;	Returns the peak of memory, in bytes, that's been allocated to your PHP script.
register_shutdown_function	;	Register a function for execution on shutdown	;	void register_shutdown_function ( callable $callback [, mixed $parameter [, mixed $... ]] )	;	Registers a callback to be executed after script execution finishes or exit() is called.
register_tick_function	;	Register a function for execution on each tick	;	bool register_tick_function ( callable $function [, mixed $arg [, mixed $... ]] )	;	
unregister_tick_function	;	De-register a function for execution on each tick	;	void unregister_tick_function ( string $function_name )	;	
highlight_file	;	Syntax highlighting of a file	;	mixed highlight_file ( string $filename [, bool $return = false ] )	;	Prints out or returns a syntax highlighted version of the code contained in filename using the colors defined in the built-in syntax highlighter for PHP.
show_source	;	Alias of  highlight_file()	;		;	
highlight_string	;	Syntax highlighting of a string	;	mixed highlight_string ( string $str [, bool $return = false ] )	;	
php_strip_whitespace	;	Return source with stripped comments and whitespace	;	string php_strip_whitespace ( string $filename )	;	Returns the PHP source code in filename with PHP comments and whitespace removed. This may be useful for determining the amount of actual code in your scripts compared with the amount of comments. This is similar to using php -w from the commandline.
ini_get	;	Gets the value of a configuration option	;	string ini_get ( string $varname )	;	Returns the value of the configuration option on success.
ini_get_all	;	Gets all configuration options	;	array ini_get_all ([ string $extension [, bool $details = true ]] )	;	Returns all the registered configuration options.
ini_set	;	Sets the value of a configuration option	;	string ini_set ( string $varname, string $newvalue )	;	Sets the value of the given configuration option. The configuration option will keep this new value during the script's execution, and will be restored at the script's ending.
ini_alter	;	Alias of  ini_set()	;		;	
ini_restore	;	Restores the value of a configuration option	;	void ini_restore ( string $varname )	;	Restores a given configuration option to its original value.
get_include_path	;	Gets the current include_path configuration option	;	string get_include_path ( void )	;	
set_include_path	;	Sets the include_path configuration option	;	string set_include_path ( string $new_include_path )	;	Sets the include_path configuration option for the duration of the script.
restore_include_path	;	Restores the value of the include_path configuration option	;	void restore_include_path ( void )	;	
setcookie	;	Send a cookie	;	bool setcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]] )	;	setcookie() defines a cookie to be sent along with the rest of the HTTP headers. Like other headers, cookies must be sent before any output from your script (this is a protocol restriction). This requires that you place calls to this function prior to any output, including <html> and <head> tags as well as any whitespace.
setrawcookie	;	Send a cookie without urlencoding the cookie value	;	bool setrawcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]] )	;	setrawcookie() is exactly the same as setcookie() except that the cookie value will not be automatically urlencoded when sent to the browser.
header	;	Send a raw HTTP header	;	void header ( string $string [, bool $replace = true [, int $http_response_code ]] )	;	header() is used to send a raw HTTP header. See the &raquo;&nbsp;HTTP/1.1 specification for more information on HTTP headers.
header_remove	;	Remove previously set headers	;	void header_remove ([ string $name ] )	;	Removes an HTTP header previously set using header() .
headers_sent	;	Checks if or where headers have been sent	;	bool headers_sent ([ string &$file [, int &$line ]] )	;	Checks if or where headers have been sent.
headers_list	;	Returns a list of response headers sent (or ready to send)	;	array headers_list ( void )	;	headers_list() will return a list of headers to be sent to the browser / client. To determine whether or not these headers have been sent yet, use headers_sent() .
connection_aborted	;	Check whether client disconnected	;	int connection_aborted ( void )	;	Checks whether the client disconnected.
connection_status	;	Returns connection status bitfield	;	int connection_status ( void )	;	Gets the connection status bitfield.
ignore_user_abort	;	Set whether a client disconnect should abort script execution	;	int ignore_user_abort ([ string $value ] )	;	Sets whether a client disconnect should cause a script to be aborted.
parse_ini_file	;	Parse a configuration file	;	array parse_ini_file ( string $filename [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]] )	;	parse_ini_file() loads in the ini file specified in filename, and returns the settings in it in an associative array.
parse_ini_string	;	Parse a configuration string	;	array parse_ini_string ( string $ini [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]] )	;	parse_ini_string() returns the settings in string ini in an associative array.
is_uploaded_file	;	Tells whether the file was uploaded via HTTP POST	;	bool is_uploaded_file ( string $filename )	;	Returns TRUE if the file named by filename was uploaded via HTTP POST. This is useful to help ensure that a malicious user hasn't tried to trick the script into working on files upon which it should not be working--for instance, /etc/passwd.
move_uploaded_file	;	Moves an uploaded file to a new location	;	bool move_uploaded_file ( string $filename, string $destination )	;	This function checks to ensure that the file designated by filename is a valid upload file (meaning that it was uploaded via PHP's HTTP POST upload mechanism). If the file is valid, it will be moved to the filename given by destination.
gethostbyaddr	;	Get the Internet host name corresponding to a given IP address	;	string gethostbyaddr ( string $ip_address )	;	Returns the host name of the Internet host specified by ip_address.
gethostbyname	;	Get the IPv4 address corresponding to a given Internet host name	;	string gethostbyname ( string $hostname )	;	Returns the IPv4 address of the Internet host specified by hostname.
gethostbynamel	;	Get a list of IPv4 addresses corresponding to a given Internet host    name	;	array gethostbynamel ( string $hostname )	;	Returns a list of IPv4 addresses to which the Internet host specified by hostname resolves.
gethostname	;	Gets the host name	;	string gethostname ( void )	;	gethostname() gets the standard host name for the local machine.
dns_check_record	;	Alias of  checkdnsrr()	;		;	
checkdnsrr	;	Check DNS records corresponding to a given Internet host name or IP address	;	bool checkdnsrr ( string $host [, string $type = "MX" ] )	;	Searches DNS for records of type type corresponding to host.
dns_get_mx	;	Alias of  getmxrr()	;		;	
getmxrr	;	Get MX records corresponding to a given Internet host name	;	bool getmxrr ( string $hostname, array &$mxhosts [, array &$weight ] )	;	Searches DNS for MX records corresponding to hostname.
dns_get_record	;	Fetch DNS Resource Records associated with a hostname	;	array dns_get_record ( string $hostname [, int $type = DNS_ANY [, array &$authns [, array &$addtl ]]] )	;	Fetch DNS Resource Records associated with the given hostname.
intval	;	Get the integer value of a variable	;	int intval ( mixed $var [, int $base = 10 ] )	;	Returns the integer value of var, using the specified base for the conversion (the default is base 10). intval() should not be used on objects, as doing so will emit an E_NOTICE level error and return 1.
floatval	;	Get float value of a variable	;	float floatval ( mixed $var )	;	Gets the float value of var.
doubleval	;	Alias of  floatval()	;		;	
strval	;	Get string value of a variable	;	string strval ( mixed $var )	;	
gettype	;	Get the type of a variable	;	string gettype ( mixed $var )	;	Returns the type of the PHP variable var. For type checking, use is_* functions.
settype	;	Set the type of a variable	;	bool settype ( mixed &$var, string $type )	;	Set the type of variable var to type.
is_null	;	Finds whether a variable is NULL	;	bool is_null ( mixed $var )	;	Finds whether the given variable is NULL.
is_resource	;	Finds whether a variable is a resource	;	bool is_resource ( mixed $var )	;	Finds whether the given variable is a resource.
is_bool	;	Finds out whether a variable is a boolean	;	bool is_bool ( mixed $var )	;	Finds whether the given variable is a boolean.
is_long	;	Alias of  is_int()	;		;	
is_float	;	Finds whether the type of a variable is float	;	bool is_float ( mixed $var )	;	Finds whether the type of the given variable is float.
is_int	;	Find whether the type of a variable is integer	;	bool is_int ( mixed $var )	;	Finds whether the type of the given variable is integer.
is_integer	;	Alias of  is_int()	;		;	
is_double	;	Alias of  is_float()	;		;	
is_real	;	Alias of  is_float()	;		;	
is_numeric	;	Finds whether a variable is a number or a numeric string	;	bool is_numeric ( mixed $var )	;	Finds whether the given variable is numeric. Numeric strings consist of optional sign, any number of digits, optional decimal part and optional exponential part. Thus +0123.45e6 is a valid numeric value. Hexadecimal notation (0xFF) is allowed too but only without sign, decimal and exponential part.
is_string	;	Find whether the type of a variable is string	;	bool is_string ( mixed $var )	;	Finds whether the type given variable is string.
is_array	;	Finds whether a variable is an array	;	bool is_array ( mixed $var )	;	Finds whether the given variable is an array.
is_object	;	Finds whether a variable is an object	;	bool is_object ( mixed $var )	;	Finds whether the given variable is an object.
is_scalar	;	Finds whether a variable is a scalar	;	bool is_scalar ( mixed $var )	;	Finds whether the given variable is a scalar.
is_callable	;	Verify that the contents of a variable can be called as a function	;	bool is_callable ( callable $name [, bool $syntax_only = false [, string &$callable_name ]] )	;	Verify that the contents of a variable can be called as a function. This can check that a simple variable contains the name of a valid function, or that an array contains a properly encoded object and function name.
pclose	;	Closes process file pointer	;	int pclose ( resource $handle )	;	Closes a file pointer to a pipe opened by popen() .
popen	;	Opens process file pointer	;	resource popen ( string $command, string $mode )	;	Opens a pipe to a process executed by forking the command given by command.
readfile	;	Outputs a file	;	int readfile ( string $filename [, bool $use_include_path = false [, resource $context ]] )	;	Reads a file and writes it to the output buffer.
rewind	;	Rewind the position of a file pointer	;	bool rewind ( resource $handle )	;	Sets the file position indicator for handle to the beginning of the file stream.
rmdir	;	Removes directory	;	bool rmdir ( string $dirname [, resource $context ] )	;	Attempts to remove the directory named by dirname. The directory must be empty, and the relevant permissions must permit this. A E_WARNING level error will be generated on failure.
umask	;	Changes the current umask	;	int umask ([ int $mask ] )	;	umask() sets PHP's umask to mask & 0777 and returns the old umask. When PHP is being used as a server module, the umask is restored when each request is finished.
fclose	;	Closes an open file pointer	;	bool fclose ( resource $handle )	;	The file pointed to by handle is closed.
feof	;	Tests for end-of-file on a file pointer	;	bool feof ( resource $handle )	;	Tests for end-of-file on a file pointer.
fgetc	;	Gets character from file pointer	;	string fgetc ( resource $handle )	;	Gets a character from the given file pointer.
fgets	;	Gets line from file pointer	;	string fgets ( resource $handle [, int $length ] )	;	Gets a line from file pointer.
fgetss	;	Gets line from file pointer and strip HTML tags	;	string fgetss ( resource $handle [, int $length [, string $allowable_tags ]] )	;	Identical to fgets() , except that fgetss() attempts to strip any NUL bytes, HTML and PHP tags from the text it reads.
fread	;	Binary-safe file read	;	string fread ( resource $handle, int $length )	;	fread() reads up to length bytes from the file pointer referenced by handle. Reading stops as soon as one of the following conditions is met: length bytes have been read EOF (end of file) is reached a packet becomes available or the socket timeout occurs (for network streams) if the stream is read buffered and it does not represent a plain file, at most one read of up to a number of bytes equal to the chunk size (usually 8192) is made; depending on the previously buffered data, the size of the returned data may be larger than the chunk size.
fopen	;	Opens file or URL	;	resource fopen ( string $filename, string $mode [, bool $use_include_path = false [, resource $context ]] )	;	fopen() binds a named resource, specified by filename, to a stream.
fpassthru	;	Output all remaining data on a file pointer	;	int fpassthru ( resource $handle )	;	Reads to EOF on the given file pointer from the current position and writes the results to the output buffer.
ftruncate	;	Truncates a file to a given length	;	bool ftruncate ( resource $handle, int $size )	;	Takes the filepointer, handle, and truncates the file to length, size.
fstat	;	Gets information about a file using an open file pointer	;	array fstat ( resource $handle )	;	Gathers the statistics of the file opened by the file pointer handle. This function is similar to the stat() function except that it operates on an open file pointer instead of a filename.
fseek	;	Seeks on a file pointer	;	int fseek ( resource $handle, int $offset [, int $whence = SEEK_SET ] )	;	Sets the file position indicator for the file referenced by handle. The new position, measured in bytes from the beginning of the file, is obtained by adding offset to the position specified by whence.
ftell	;	Returns the current position of the file read/write pointer	;	int ftell ( resource $handle )	;	Returns the position of the file pointer referenced by handle.
fflush	;	Flushes the output to a file	;	bool fflush ( resource $handle )	;	This function forces a write of all buffered output to the resource pointed to by the file handle.
fwrite	;	Binary-safe file write	;	int fwrite ( resource $handle, string $string [, int $length ] )	;	
fputs	;	Alias of  fwrite()	;		;	
mkdir	;	Makes directory	;	bool mkdir ( string $pathname [, int $mode = 0777 [, bool $recursive = false [, resource $context ]]] )	;	Attempts to create the directory specified by pathname.
rename	;	Renames a file or directory	;	bool rename ( string $oldname, string $newname [, resource $context ] )	;	Attempts to rename oldname to newname, moving it between directories if necessary. If newname exists, it will be overwritten.
copy	;	Copies file	;	bool copy ( string $source, string $dest [, resource $context ] )	;	Makes a copy of the file source to dest.
tempnam	;	Create file with unique file name	;	string tempnam ( string $dir, string $prefix )	;	Creates a file with a unique filename, with access permission set to 0600, in the specified directory. If the directory does not exist, tempnam() may generate a file in the system's temporary directory, and return the name of that.
tmpfile	;	Creates a temporary file	;	resource tmpfile ( void )	;	Creates a temporary file with a unique name in read-write (w+) mode and returns a file handle .
file	;	Reads entire file into an array	;	array file ( string $filename [, int $flags = 0 [, resource $context ]] )	;	Reads an entire file into an array.
file_get_contents	;	Reads entire file into a string	;	string file_get_contents ( string $filename [, bool $use_include_path = false [, resource $context [, int $offset = -1 [, int $maxlen ]]]] )	;	This function is similar to file() , except that file_get_contents() returns the file in a string , starting at the specified offset up to maxlen bytes. On failure, file_get_contents() will return FALSE.
file_put_contents	;	Write a string to a file	;	int file_put_contents ( string $filename, mixed $data [, int $flags = 0 [, resource $context ]] )	;	This function is identical to calling fopen() , fwrite() and fclose() successively to write data to a file.
stream_select	;	Runs the equivalent of the select() system call on the given    arrays of streams with a timeout specified by tv_sec and tv_usec	;	int stream_select ( array &$read, array &$write, array &$except, int $tv_sec [, int $tv_usec = 0 ] )	;	The stream_select() function accepts arrays of streams and waits for them to change status. Its operation is equivalent to that of the socket_select() function except in that it acts on streams.
stream_context_create	;	Creates a stream context	;	resource stream_context_create ([ array $options [, array $params ]] )	;	Creates and returns a stream context with any options supplied in options preset.
stream_context_set_params	;	Set parameters for a stream/wrapper/context	;	bool stream_context_set_params ( resource $stream_or_context, array $params )	;	Sets parameters on the specified context.
stream_context_get_params	;	Retrieves parameters from a context	;	array stream_context_get_params ( resource $stream_or_context )	;	Retrieves parameter and options information from the stream or context.
stream_context_set_option	;	Sets an option for a stream/wrapper/context	;	bool stream_context_set_option ( resource $stream_or_context, array $options )	;	
stream_context_get_options	;	Retrieve options for a stream/wrapper/context	;	array stream_context_get_options ( resource $stream_or_context )	;	
stream_context_get_default	;	Retrieve the default stream context	;	resource stream_context_get_default ([ array $options ] )	;	
stream_context_set_default	;	Set the default stream context	;	resource stream_context_set_default ( array $options )	;	
stream_filter_prepend	;	Attach a filter to a stream	;	resource stream_filter_prepend ( resource $stream, string $filtername [, int $read_write [, mixed $params ]] )	;	Adds filtername to the list of filters attached to stream.
stream_filter_append	;	Attach a filter to a stream	;	resource stream_filter_append ( resource $stream, string $filtername [, int $read_write [, mixed $params ]] )	;	Adds filtername to the list of filters attached to stream.
stream_filter_remove	;	Remove a filter from a stream	;	bool stream_filter_remove ( resource $stream_filter )	;	Removes a stream filter previously added to a stream with stream_filter_prepend() or stream_filter_append() . Any data remaining in the filter's internal buffer will be flushed through to the next filter before removing it.
stream_socket_client	;	Open Internet or Unix domain socket connection	;	resource stream_socket_client ( string $remote_socket [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") [, int $flags = STREAM_CLIENT_CONNECT [, resource $context ]]]]] )	;	Initiates a stream or datagram connection to the destination specified by remote_socket. The type of socket created is determined by the transport specified using standard URL formatting: transport://target. For Internet Domain sockets (AF_INET) such as TCP and UDP, the target portion of the remote_socket parameter should consist of a hostname or IP address followed by a colon and a port number. For Unix domain sockets, the target portion should point to the socket file on the filesystem.
stream_socket_server	;	Create an Internet or Unix domain server socket	;	resource stream_socket_server ( string $local_socket [, int &$errno [, string &$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context ]]]] )	;	Creates a stream or datagram socket on the specified local_socket.
stream_socket_accept	;	Accept a connection on a socket created by  stream_socket_server()	;	resource stream_socket_accept ( resource $server_socket [, float $timeout = ini_get("default_socket_timeout") [, string &$peername ]] )	;	Accept a connection on a socket previously created by stream_socket_server() .
stream_socket_get_name	;	Retrieve the name of the local or remote sockets	;	string stream_socket_get_name ( resource $handle, bool $want_peer )	;	Returns the local or remote name of a given socket connection.
stream_socket_recvfrom	;	Receives data from a socket, connected or not	;	string stream_socket_recvfrom ( resource $socket, int $length [, int $flags = 0 [, string &$address ]] )	;	stream_socket_recvfrom() accepts data from a remote socket up to length bytes.
stream_socket_sendto	;	Sends a message to a socket, whether it is connected or not	;	int stream_socket_sendto ( resource $socket, string $data [, int $flags = 0 [, string $address ]] )	;	Sends the specified data through the socket.
stream_socket_enable_crypto	;	Turns encryption on/off on an already connected socket	;	mixed stream_socket_enable_crypto ( resource $stream, bool $enable [, int $crypto_type [, resource $session_stream ]] )	;	
stream_socket_shutdown	;	Shutdown a full-duplex connection	;	bool stream_socket_shutdown ( resource $stream, int $how )	;	Shutdowns (partially or not) a full-duplex connection.
stream_socket_pair	;	Creates a pair of connected, indistinguishable socket streams	;	array stream_socket_pair ( int $domain, int $type, int $protocol )	;	stream_socket_pair() creates a pair of connected, indistinguishable socket streams. This function is commonly used in IPC (Inter-Process Communication).
stream_copy_to_stream	;	Copies data from one stream to another	;	int stream_copy_to_stream ( resource $source, resource $dest [, int $maxlength = -1 [, int $offset = 0 ]] )	;	Makes a copy of up to maxlength bytes of data from the current position (or from the offset position, if specified) in source to dest. If maxlength is not specified, all remaining content in source will be copied.
stream_get_contents	;	Reads remainder of a stream into a string	;	string stream_get_contents ( resource $handle [, int $maxlength = -1 [, int $offset = -1 ]] )	;	Identical to file_get_contents() , except that stream_get_contents() operates on an already open stream resource and returns the remaining contents in a string, up to maxlength bytes and starting at the specified offset.
stream_supports_lock	;	Tells whether the stream supports locking.	;	bool stream_supports_lock ( resource $stream )	;	Tells whether the stream supports locking through flock() .
fgetcsv	;	Gets line from file pointer and parse for CSV fields	;	array fgetcsv ( resource $handle [, int $length = 0 [, string $delimiter = ',' [, string $enclosure = '"' [, string $escape = '\\' ]]]] )	;	Similar to fgets() except that fgetcsv() parses the line it reads for fields in CSV format and returns an array containing the fields read.
fputcsv	;	Format line as CSV and write to file pointer	;	int fputcsv ( resource $handle, array $fields [, string $delimiter = ',' [, string $enclosure = '"' ]] )	;	fputcsv() formats a line (passed as a fields array) as CSV and write it (terminated by a newline) to the specified file handle.
flock	;	Portable advisory file locking	;	bool flock ( resource $handle, int $operation [, int &$wouldblock ] )	;	flock() allows you to perform a simple reader/writer model which can be used on virtually every platform (including most Unix derivatives and even Windows).
get_meta_tags	;	Extracts all meta tag content attributes from a file and returns an array	;	array get_meta_tags ( string $filename [, bool $use_include_path = false ] )	;	Opens filename and parses it line by line for <meta> tags in the file. The parsing stops at </head>.
stream_set_read_buffer	;	Set read file buffering on the given stream	;	int stream_set_read_buffer ( resource $stream, int $buffer )	;	Sets the read buffer. It's the equivalent of stream_set_write_buffer() , but for read operations.
stream_set_write_buffer	;	Sets write file buffering on the given stream	;	int stream_set_write_buffer ( resource $stream, int $buffer )	;	Sets the buffering for write operations on the given stream to buffer bytes.
set_file_buffer	;	Alias of  stream_set_write_buffer()	;		;	
set_socket_blocking	;	Alias of  stream_set_blocking()	;		;	
stream_set_blocking	;	Set blocking/non-blocking mode on a stream	;	bool stream_set_blocking ( resource $stream, int $mode )	;	Sets blocking or non-blocking mode on a stream.
socket_set_blocking	;	Alias of  stream_set_blocking()	;		;	
stream_get_meta_data	;	Retrieves header/meta data from streams/file pointers	;	array stream_get_meta_data ( resource $stream )	;	Returns information about an existing stream.
stream_get_line	;	Gets line from stream resource up to a given delimiter	;	string stream_get_line ( resource $handle, int $length [, string $ending ] )	;	Gets a line from the given handle.
stream_wrapper_register	;	Register a URL wrapper implemented as a PHP class	;	bool stream_wrapper_register ( string $protocol, string $classname [, int $flags = 0 ] )	;	Allows you to implement your own protocol handlers and streams for use with all the other filesystem functions (such as fopen() , fread() etc.).
stream_register_wrapper	;	Alias of  stream_wrapper_register()	;		;	
stream_wrapper_unregister	;	Unregister a URL wrapper	;	bool stream_wrapper_unregister ( string $protocol )	;	Allows you to disable an already defined stream wrapper. Once the wrapper has been disabled you may override it with a user-defined wrapper using stream_wrapper_register() or reenable it later on with stream_wrapper_restore() .
stream_wrapper_restore	;	Restores a previously unregistered built-in wrapper	;	bool stream_wrapper_restore ( string $protocol )	;	Restores a built-in wrapper previously unregistered with stream_wrapper_unregister() .
stream_get_wrappers	;	Retrieve list of registered streams	;	array stream_get_wrappers ( void )	;	Retrieve list of registered streams available on the running system.
stream_get_transports	;	Retrieve list of registered socket transports	;	array stream_get_transports ( void )	;	
stream_resolve_include_path	;	Resolve filename against the include path	;	string stream_resolve_include_path ( string $filename )	;	Resolve filename against the include path according to the same rules as fopen() / include .
stream_is_local	;	Checks if a stream is a local stream	;	bool stream_is_local ( mixed $stream_or_url )	;	Checks if a stream, or a URL, is a local one or not.
get_headers	;	Fetches all the headers sent by the server in response to a HTTP request	;	array get_headers ( string $url [, int $format = 0 ] )	;	get_headers() returns an array with the headers sent by the server in response to a HTTP request.
stream_set_timeout	;	Set timeout period on a stream	;	bool stream_set_timeout ( resource $stream, int $seconds [, int $microseconds = 0 ] )	;	Sets the timeout value on stream, expressed in the sum of seconds and microseconds.
socket_set_timeout	;	Alias of  stream_set_timeout()	;		;	
socket_get_status	;	Alias of  stream_get_meta_data()	;		;	
realpath	;	Returns canonicalized absolute pathname	;	string realpath ( string $path )	;	realpath() expands all symbolic links and resolves references to '/./', '/../' and extra '/' characters in the input path and return the canonicalized absolute pathname.
fnmatch	;	Match filename against a pattern	;	bool fnmatch ( string $pattern, string $string [, int $flags = 0 ] )	;	fnmatch() checks if the passed string would match the given shell wildcard pattern.
fsockopen	;	Open Internet or Unix domain socket connection	;	resource fsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") ]]]] )	;	Initiates a socket connection to the resource specified by hostname.
pfsockopen	;	Open persistent Internet or Unix domain socket connection	;	resource pfsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") ]]]] )	;	This function behaves exactly as fsockopen() with the difference that the connection is not closed after the script finishes. It is the persistent version of fsockopen() .
pack	;	Pack data into binary string	;	string pack ( string $format [, mixed $args [, mixed $... ]] )	;	Pack given arguments into binary string according to format.
unpack	;	Unpack data from binary string	;	array unpack ( string $format, string $data )	;	Unpacks from a binary string into an array according to the given format.
get_browser	;	Tells what the user's browser is capable of	;	mixed get_browser ([ string $user_agent [, bool $return_array = false ]] )	;	Attempts to determine the capabilities of the user's browser, by looking up the browser's information in the browscap.ini file.
crypt	;	One-way string hashing	;	string crypt ( string $str [, string $salt ] )	;	crypt() will return a hashed string using the standard Unix DES-based algorithm or alternative algorithms that may be available on the system.
opendir	;	Open directory handle	;	resource opendir ( string $path [, resource $context ] )	;	Opens up a directory handle to be used in subsequent closedir() , readdir() , and rewinddir() calls.
closedir	;	Close directory handle	;	void closedir ([ resource $dir_handle ] )	;	Closes the directory stream indicated by dir_handle. The stream must have previously been opened by opendir() .
chdir	;	Change directory	;	bool chdir ( string $directory )	;	Changes PHP's current directory to directory.
getcwd	;	Gets the current working directory	;	string getcwd ( void )	;	Gets the current working directory.
rewinddir	;	Rewind directory handle	;	void rewinddir ([ resource $dir_handle ] )	;	Resets the directory stream indicated by dir_handle to the beginning of the directory.
readdir	;	Read entry from directory handle	;	string readdir ([ resource $dir_handle ] )	;	Returns the name of the next entry in the directory. The entries are returned in the order in which they are stored by the filesystem.
dir	;	Return an instance of the Directory class	;	Directory dir ( string $directory [, resource $context ] )	;	A pseudo-object oriented mechanism for reading a directory. The given directory is opened.
scandir	;	List files and directories inside the specified path	;	array scandir ( string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context ]] )	;	Returns an array of files and directories from the directory.
glob	;	Find pathnames matching a pattern	;	array glob ( string $pattern [, int $flags = 0 ] )	;	The glob() function searches for all the pathnames matching pattern according to the rules used by the libc glob() function, which is similar to the rules used by common shells.
fileatime	;	Gets last access time of file	;	int fileatime ( string $filename )	;	
filectime	;	Gets inode change time of file	;	int filectime ( string $filename )	;	Gets the inode change time of a file.
filegroup	;	Gets file group	;	int filegroup ( string $filename )	;	Gets the file group. The group ID is returned in numerical format, use posix_getgrgid() to resolve it to a group name.
fileinode	;	Gets file inode	;	int fileinode ( string $filename )	;	Gets the file inode.
filemtime	;	Gets file modification time	;	int filemtime ( string $filename )	;	This function returns the time when the data blocks of a file were being written to, that is, the time when the content of the file was changed.
fileowner	;	Gets file owner	;	int fileowner ( string $filename )	;	Gets the file owner.
fileperms	;	Gets file permissions	;	int fileperms ( string $filename )	;	Gets permissions for the given file.
filesize	;	Gets file size	;	int filesize ( string $filename )	;	Gets the size for the given file.
filetype	;	Gets file type	;	string filetype ( string $filename )	;	Returns the type of the given file.
file_exists	;	Checks whether a file or directory exists	;	bool file_exists ( string $filename )	;	Checks whether a file or directory exists.
is_writable	;	Tells whether the filename is writable	;	bool is_writable ( string $filename )	;	Returns TRUE if the filename exists and is writable. The filename argument may be a directory name allowing you to check if a directory is writable.
is_writeable	;	Alias of  is_writable()	;		;	
is_readable	;	Tells whether a file exists and is readable	;	bool is_readable ( string $filename )	;	Tells whether a file exists and is readable.
is_executable	;	Tells whether the filename is executable	;	bool is_executable ( string $filename )	;	Tells whether the filename is executable.
is_file	;	Tells whether the filename is a regular file	;	bool is_file ( string $filename )	;	Tells whether the given file is a regular file.
is_dir	;	Tells whether the filename is a directory	;	bool is_dir ( string $filename )	;	Tells whether the given filename is a directory.
is_link	;	Tells whether the filename is a symbolic link	;	bool is_link ( string $filename )	;	Tells whether the given file is a symbolic link.
stat	;	Gives information about a file	;	array stat ( string $filename )	;	Gathers the statistics of the file named by filename. If filename is a symbolic link, statistics are from the file itself, not the symlink.
lstat	;	Gives information about a file or symbolic link	;	array lstat ( string $filename )	;	Gathers the statistics of the file or symbolic link named by filename.
chown	;	Changes file owner	;	bool chown ( string $filename, mixed $user )	;	Attempts to change the owner of the file filename to user user. Only the superuser may change the owner of a file.
chgrp	;	Changes file group	;	bool chgrp ( string $filename, mixed $group )	;	Attempts to change the group of the file filename to group.
lchown	;	Changes user ownership of symlink	;	bool lchown ( string $filename, mixed $user )	;	Attempts to change the owner of the symlink filename to user user.
lchgrp	;	Changes group ownership of symlink	;	bool lchgrp ( string $filename, mixed $group )	;	Attempts to change the group of the symlink filename to group.
chmod	;	Changes file mode	;	bool chmod ( string $filename, int $mode )	;	Attempts to change the mode of the specified file to that given in mode.
touch	;	Sets access and modification time of file	;	bool touch ( string $filename [, int $time = time() [, int $atime ]] )	;	Attempts to set the access and modification times of the file named in the filename parameter to the value given in time. Note that the access time is always modified, regardless of the number of parameters.
clearstatcache	;	Clears file status cache	;	void clearstatcache ([ bool $clear_realpath_cache = false [, string $filename ]] )	;	When you use stat() , lstat() , or any of the other functions listed in the affected functions list (below), PHP caches the information those functions return in order to provide faster performance. However, in certain cases, you may want to clear the cached information. For instance, if the same file is being checked multiple times within a single script, and that file is in danger of being removed or changed during that script's operation, you may elect to clear the status cache. In these cases, you can use the clearstatcache() function to clear the information that PHP caches about a file.
disk_total_space	;	Returns the total size of a filesystem or disk partition	;	float disk_total_space ( string $directory )	;	Given a string containing a directory, this function will return the total number of bytes on the corresponding filesystem or disk partition.
disk_free_space	;	Returns available space on filesystem or disk partition	;	float disk_free_space ( string $directory )	;	Given a string containing a directory, this function will return the number of bytes available on the corresponding filesystem or disk partition.
diskfreespace	;	Alias of  disk_free_space()	;		;	
realpath_cache_size	;	Get realpath cache size	;	int realpath_cache_size ( void )	;	Get the amount of memory used by the realpath cache.
realpath_cache_get	;	Get realpath cache entries	;	array realpath_cache_get ( void )	;	Get the contents of the realpath cache.
mail	;	Send mail	;	bool mail ( string $to, string $subject, string $message [, string $additional_headers [, string $additional_parameters ]] )	;	Sends an email.
ezmlm_hash	;	Calculate the hash value needed by EZMLM	;	int ezmlm_hash ( string $addr )	;	
openlog	;	Open connection to system logger	;	bool openlog ( string $ident, int $option, int $facility )	;	openlog() opens a connection to the system logger for a program.
syslog	;	Generate a system log message	;	bool syslog ( int $priority, string $message )	;	syslog() generates a log message that will be distributed by the system logger.
closelog	;	Close connection to system logger	;	bool closelog ( void )	;	closelog() closes the descriptor being used to write to the system logger. The use of closelog() is optional.
define_syslog_variables	;	Initializes all syslog related variables	;	void define_syslog_variables ( void )	;	Initializes all variables used in the syslog functions.
lcg_value	;	Combined linear congruential generator	;	float lcg_value ( void )	;	lcg_value() returns a pseudo random number in the range of (0, 1). The function combines two CGs with periods of 2^31 - 85 and 2^31 - 249. The period of this function is equal to the product of both primes.
metaphone	;	Calculate the metaphone key of a string	;	string metaphone ( string $str [, int $phonemes = 0 ] )	;	Calculates the metaphone key of str.
ob_start	;	Turn on output buffering	;	bool ob_start ([ callable $output_callback [, int $chunk_size = 0 [, bool $erase = true ]]] )	;	This function will turn output buffering on. While output buffering is active no output is sent from the script (other than headers), instead the output is stored in an internal buffer.
ob_flush	;	Flush (send) the output buffer	;	void ob_flush ( void )	;	This function will send the contents of the output buffer (if any). If you want to further process the buffer's contents you have to call ob_get_contents() before ob_flush() as the buffer contents are discarded after ob_flush() is called.
ob_clean	;	Clean (erase) the output buffer	;	void ob_clean ( void )	;	This function discards the contents of the output buffer.
ob_end_flush	;	Flush (send) the output buffer and turn off output buffering	;	bool ob_end_flush ( void )	;	This function will send the contents of the topmost output buffer (if any) and turn this output buffer off. If you want to further process the buffer's contents you have to call ob_get_contents() before ob_end_flush() as the buffer contents are discarded after ob_end_flush() is called.
ob_end_clean	;	Clean (erase) the output buffer and turn off output buffering	;	bool ob_end_clean ( void )	;	This function discards the contents of the topmost output buffer and turns off this output buffering. If you want to further process the buffer's contents you have to call ob_get_contents() before ob_end_clean() as the buffer contents are discarded when ob_end_clean() is called.
ob_get_flush	;	Flush the output buffer, return it as a string and turn off output buffering	;	string ob_get_flush ( void )	;	ob_get_flush() flushes the output buffer, return it as a string and turns off output buffering.
ob_get_clean	;	Get current buffer contents and delete current output buffer	;	string ob_get_clean ( void )	;	Gets the current buffer contents and delete current output buffer.
ob_get_length	;	Return the length of the output buffer	;	int ob_get_length ( void )	;	This will return the length of the contents in the output buffer.
ob_get_level	;	Return the nesting level of the output buffering mechanism	;	int ob_get_level ( void )	;	Returns the nesting level of the output buffering mechanism.
ob_get_status	;	Get status of output buffers	;	array ob_get_status ([ bool $full_status = FALSE ] )	;	ob_get_status() returns status information on either the top level output buffer or all active output buffer levels if full_status is set to TRUE.
ob_get_contents	;	Return the contents of the output buffer	;	string ob_get_contents ( void )	;	Gets the contents of the output buffer without clearing it.
ob_implicit_flush	;	Turn implicit flush on/off	;	void ob_implicit_flush ([ int $flag = true ] )	;	ob_implicit_flush() will turn implicit flushing on or off. Implicit flushing will result in a flush operation after every output call, so that explicit calls to flush() will no longer be needed.
ob_list_handlers	;	List all output handlers in use	;	array ob_list_handlers ( void )	;	Lists all output handlers in use.
ksort	;	Sort an array by key	;	bool ksort ( array &$array [, int $sort_flags = SORT_REGULAR ] )	;	Sorts an array by key, maintaining key to data correlations. This is useful mainly for associative arrays.
krsort	;	Sort an array by key in reverse order	;	bool krsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )	;	Sorts an array by key in reverse order, maintaining key to data correlations. This is useful mainly for associative arrays.
natsort	;	Sort an array using a "natural order" algorithm	;	bool natsort ( array &$array )	;	This function implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a "natural ordering". An example of the difference between this algorithm and the regular computer string sorting algorithms (used in sort() ) can be seen in the example below.
natcasesort	;	Sort an array using a case insensitive "natural order" algorithm	;	bool natcasesort ( array &$array )	;	natcasesort() is a case insensitive version of natsort() .
asort	;	Sort an array and maintain index association	;	bool asort ( array &$array [, int $sort_flags = SORT_REGULAR ] )	;	This function sorts an array such that array indices maintain their correlation with the array elements they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant.
arsort	;	Sort an array in reverse order and maintain index association	;	bool arsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )	;	This function sorts an array such that array indices maintain their correlation with the array elements they are associated with.
sort	;	Sort an array	;	bool sort ( array &$array [, int $sort_flags = SORT_REGULAR ] )	;	This function sorts an array. Elements will be arranged from lowest to highest when this function has completed.
rsort	;	Sort an array in reverse order	;	bool rsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )	;	This function sorts an array in reverse order (highest to lowest).
usort	;	Sort an array by values using a user-defined comparison function	;	int callback ( mixed $a, mixed $b )	;	This function will sort an array by its values using a user-supplied comparison function. If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function.
uasort	;	Sort an array with a user-defined comparison function and maintain index association	;	bool uasort ( array &$array, callable $cmp_function )	;	This function sorts an array such that array indices maintain their correlation with the array elements they are associated with, using a user-defined comparison function.
uksort	;	Sort an array by keys using a user-defined comparison function	;	int callback ( mixed $a, mixed $b )	;	uksort() will sort the keys of an array using a user-supplied comparison function. If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function.
shuffle	;	Shuffle an array	;	bool shuffle ( array &$array )	;	This function shuffles (randomizes the order of the elements in) an array.
array_walk	;	Apply a user function to every member of an array	;	bool array_walk ( array &$array, callable $funcname [, mixed $userdata = NULL ] )	;	
array_walk_recursive	;	Apply a user function recursively to every member of an array	;	bool array_walk_recursive ( array &$input, callable $funcname [, mixed $userdata = NULL ] )	;	Applies the user-defined function funcname to each element of the input array. This function will recurse into deeper arrays.
count	;	Count all elements in an array, or something in an object	;	int count ( mixed $var [, int $mode = COUNT_NORMAL ] )	;	Counts all elements in an array, or something in an object.
end	;	Set the internal pointer of an array to its last element	;	mixed end ( array &$array )	;	end() advances array's internal pointer to the last element, and returns its value.
prev	;	Rewind the internal array pointer	;	mixed prev ( array &$array )	;	Rewind the internal array pointer.
next	;	Advance the internal array pointer of an array	;	mixed next ( array &$array )	;	next() behaves like current() , with one difference. It advances the internal array pointer one place forward before returning the element value. That means it returns the next array value and advances the internal array pointer by one.
reset	;	Set the internal pointer of an array to its first element	;	mixed reset ( array &$array )	;	reset() rewinds array's internal pointer to the first element and returns the value of the first array element.
current	;	Return the current element in an array	;	mixed current ( array &$array )	;	Every array has an internal pointer to its "current" element, which is initialized to the first element inserted into the array.
key	;	Fetch a key from an array	;	mixed key ( array &$array )	;	key() returns the index element of the current array position.
min	;	Find lowest value	;	mixed min ( mixed $value1, mixed $value2 [, mixed $... ] )	;	If the first and only parameter is an array, min() returns the lowest value in that array. If at least two parameters are provided, min() returns the smallest of these values.
max	;	Find highest value	;	mixed max ( mixed $value1, mixed $value2 [, mixed $... ] )	;	If the first and only parameter is an array, max() returns the highest value in that array. If at least two parameters are provided, max() returns the biggest of these values.
in_array	;	Checks if a value exists in an array	;	bool in_array ( mixed $needle, array $haystack [, bool $strict = FALSE ] )	;	Searches haystack for needle using loose comparison unless strict is set.
array_search	;	Searches the array for a given value and returns the corresponding key if successful	;	mixed array_search ( mixed $needle, array $haystack [, bool $strict = false ] )	;	Searches haystack for needle.
extract	;	Import variables into the current symbol table from an array	;	int extract ( array &$var_array [, int $extract_type = EXTR_OVERWRITE [, string $prefix = NULL ]] )	;	Import variables from an array into the current symbol table.
compact	;	Create array containing variables and their values	;	array compact ( mixed $varname [, mixed $... ] )	;	Creates an array containing variables and their values.
array_fill	;	Fill an array with values	;	array array_fill ( int $start_index, int $num, mixed $value )	;	Fills an array with num entries of the value of the value parameter, keys starting at the start_index parameter.
array_fill_keys	;	Fill an array with values, specifying keys	;	array array_fill_keys ( array $keys, mixed $value )	;	Fills an array with the value of the value parameter, using the values of the keys array as keys.
range	;	Create an array containing a range of elements	;	array range ( mixed $start, mixed $end [, number $step = 1 ] )	;	Create an array containing a range of elements.
array_multisort	;	Sort multiple or multi-dimensional arrays	;	bool array_multisort ( array &$arr [, mixed $arg = SORT_ASC [, mixed $arg = SORT_REGULAR [, mixed $... ]]] )	;	array_multisort() can be used to sort several arrays at once, or a multi-dimensional array by one or more dimensions.
array_push	;	Push one or more elements onto the end of array	;	int array_push ( array &$array, mixed $var [, mixed $... ] )	;	array_push() treats array as a stack, and pushes the passed variables onto the end of array. The length of array increases by the number of variables pushed. Has the same effect as: <span style="color: #000000"> <span style="color: #0000BB"><?php<br />$array</span><span style="color: #007700">[]&nbsp;=&nbsp;</span><span style="color: #0000BB">$var</span><span style="color: #007700">;<br /></span><span style="color: #0000BB">?></span> </span> repeated for each var.
array_pop	;	Pop the element off the end of array	;	mixed array_pop ( array &$array )	;	array_pop() pops and returns the last value of the array, shortening the array by one element. If array is empty (or is not an array), NULL will be returned. Will additionally produce a Warning when called on a non-array.
array_shift	;	Shift an element off the beginning of array	;	mixed array_shift ( array &$array )	;	array_shift() shifts the first value of the array off and returns it, shortening the array by one element and moving everything down. All numerical array keys will be modified to start counting from zero while literal keys won't be touched.
array_unshift	;	Prepend one or more elements to the beginning of an array	;	int array_unshift ( array &$array, mixed $var [, mixed $... ] )	;	array_unshift() prepends passed elements to the front of the array. Note that the list of elements is prepended as a whole, so that the prepended elements stay in the same order. All numerical array keys will be modified to start counting from zero while literal keys won't be touched.
array_splice	;	Remove a portion of the array and replace it with something else	;	array array_splice ( array &$input, int $offset [, int $length = 0 [, mixed $replacement ]] )	;	Removes the elements designated by offset and length from the input array, and replaces them with the elements of the replacement array, if supplied.
array_slice	;	Extract a slice of the array	;	array array_slice ( array $array, int $offset [, int $length = NULL [, bool $preserve_keys = false ]] )	;	array_slice() returns the sequence of elements from the array array as specified by the offset and length parameters.
array_merge	;	Merge one or more arrays	;	array array_merge ( array $array1 [, array $... ] )	;	Merges the elements of one or more arrays together so that the values of one are appended to the end of the previous one. It returns the resulting array.
array_merge_recursive	;	Merge two or more arrays recursively	;	array array_merge_recursive ( array $array1 [, array $... ] )	;	array_merge_recursive() merges the elements of one or more arrays together so that the values of one are appended to the end of the previous one. It returns the resulting array.
array_replace	;	Replaces elements from passed arrays into the first array	;	array array_replace ( array $array, array $array1 [, array $... ] )	;	array_replace() replaces the values of the first array with the same values from all the following arrays. If a key from the first array exists in the second array, its value will be replaced by the value from the second array. If the key exists in the second array, and not the first, it will be created in the first array. If a key only exists in the first array, it will be left as is. If several arrays are passed for replacement, they will be processed in order, the later arrays overwriting the previous values.
array_replace_recursive	;	Replaces elements from passed arrays into the first array recursively	;	array array_replace_recursive ( array $array, array $array1 [, array $... ] )	;	array_replace_recursive() replaces the values of the first array with the same values from all the following arrays. If a key from the first array exists in the second array, its value will be replaced by the value from the second array. If the key exists in the second array, and not the first, it will be created in the first array. If a key only exists in the first array, it will be left as is. If several arrays are passed for replacement, they will be processed in order, the later array overwriting the previous values.
array_keys	;	Return all the keys or a subset of the keys of an array	;	array array_keys ( array $input [, mixed $search_value = NULL [, bool $strict = false ]] )	;	array_keys() returns the keys, numeric and string, from the input array.
array_values	;	Return all the values of an array	;	array array_values ( array $input )	;	array_values() returns all the values from the input array and indexes the array numerically.
array_count_values	;	Counts all the values of an array	;	array array_count_values ( array $input )	;	array_count_values() returns an array using the values of the input array as keys and their frequency in input as values.
array_reverse	;	Return an array with elements in reverse order	;	array array_reverse ( array $array [, bool $preserve_keys = false ] )	;	Takes an input array and returns a new array with the order of the elements reversed.
array_reduce	;	Iteratively reduce the array to a single value using a callback function	;	mixed callback ( mixed &$result, mixed $item )	;	array_reduce() applies iteratively the function function to the elements of the array input, so as to reduce the array to a single value.
array_pad	;	Pad array to the specified length with a value	;	array array_pad ( array $input, int $pad_size, mixed $pad_value )	;	array_pad() returns a copy of the input padded to size specified by pad_size with value pad_value. If pad_size is positive then the array is padded on the right, if it's negative then on the left. If the absolute value of pad_size is less than or equal to the length of the input then no padding takes place. It is possible to add at most 1048576 elements at a time.
array_flip	;	Exchanges all keys with their associated values in an array	;	array array_flip ( array $trans )	;	array_flip() returns an array in flip order, i.e. keys from trans become values and values from trans become keys.
array_change_key_case	;	Changes all keys in an array	;	array array_change_key_case ( array $input [, int $case = CASE_LOWER ] )	;	Returns an array with all keys from input lowercased or uppercased. Numbered indices are left as is.
array_rand	;	Pick one or more random entries out of an array	;	mixed array_rand ( array $input [, int $num_req = 1 ] )	;	Picks one or more random entries out of an array, and returns the key (or keys) of the random entries.
array_unique	;	Removes duplicate values from an array	;	array array_unique ( array $array [, int $sort_flags = SORT_STRING ] )	;	Takes an input array and returns a new array without duplicate values.
array_intersect	;	Computes the intersection of arrays	;	array array_intersect ( array $array1, array $array2 [, array $ ... ] )	;	array_intersect() returns an array containing all the values of array1 that are present in all the arguments. Note that keys are preserved.
array_intersect_key	;	Computes the intersection of arrays using keys for comparison	;	array array_intersect_key ( array $array1, array $array2 [, array $ ... ] )	;	array_intersect_key() returns an array containing all the entries of array1 which have keys that are present in all the arguments.
array_intersect_ukey	;	Computes the intersection of arrays using a callback function on the keys for comparison	;	int callback ( mixed $a, mixed $b )	;	array_intersect_ukey() returns an array containing all the values of array1 which have matching keys that are present in all the arguments.
array_uintersect	;	Computes the intersection of arrays, compares data by a callback function	;	int callback ( mixed $a, mixed $b )	;	Computes the intersection of arrays, compares data by a callback function.
array_intersect_assoc	;	Computes the intersection of arrays with additional index check	;	array array_intersect_assoc ( array $array1, array $array2 [, array $ ... ] )	;	
array_uintersect_assoc	;	Computes the intersection of arrays with additional index check, compares data by a callback function	;	int callback ( mixed $a, mixed $b )	;	Computes the intersection of arrays with additional index check, compares data by a callback function.
array_intersect_uassoc	;	Computes the intersection of arrays with additional index check, compares indexes by a callback function	;	int callback ( mixed $a, mixed $b )	;	array_intersect_uassoc() returns an array containing all the values of array1 that are present in all the arguments. Note that the keys are used in the comparison unlike in array_intersect() .
array_uintersect_uassoc	;	Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions	;	int callback ( mixed $a, mixed $b )	;	Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions Note that the keys are used in the comparison unlike in array_uintersect() . Both the data and the indexes are compared by using separate callback functions.
array_diff	;	Computes the difference of arrays	;	array array_diff ( array $array1, array $array2 [, array $... ] )	;	Compares array1 against array2 and returns the difference.
array_diff_key	;	Computes the difference of arrays using keys for comparison	;	array array_diff_key ( array $array1, array $array2 [, array $... ] )	;	Compares the keys from array1 against the keys from array2 and returns the difference. This function is like array_diff() except the comparison is done on the keys instead of the values.
array_diff_ukey	;	Computes the difference of arrays using a callback function on the keys for comparison	;	int callback ( mixed $a, mixed $b )	;	Compares the keys from array1 against the keys from array2 and returns the difference. This function is like array_diff() except the comparison is done on the keys instead of the values.
array_udiff	;	Computes the difference of arrays by using a callback function for data comparison	;	int callback ( mixed $a, mixed $b )	;	Computes the difference of arrays by using a callback function for data comparison. This is unlike array_diff() which uses an internal function for comparing the data.
array_diff_assoc	;	Computes the difference of arrays with additional index check	;	array array_diff_assoc ( array $array1, array $array2 [, array $... ] )	;	Compares array1 against array2 and returns the difference. Unlike array_diff() the array keys are also used in the comparison.
array_udiff_assoc	;	Computes the difference of arrays with additional index check, compares data by a callback function	;	int callback ( mixed $a, mixed $b )	;	Computes the difference of arrays with additional index check, compares data by a callback function.
array_diff_uassoc	;	Computes the difference of arrays with additional index check which is performed by a user supplied callback function	;	int callback ( mixed $a, mixed $b )	;	Compares array1 against array2 and returns the difference. Unlike array_diff() the array keys are used in the comparison.
array_udiff_uassoc	;	Computes the difference of arrays with additional index check, compares data and indexes by a callback function	;	int callback ( mixed $a, mixed $b )	;	Computes the difference of arrays with additional index check, compares data and indexes by a callback function.
array_sum	;	Calculate the sum of values in an array	;	number array_sum ( array $array )	;	array_sum() returns the sum of values in an array.
array_product	;	Calculate the product of values in an array	;	number array_product ( array $array )	;	array_product() returns the product of values in an array.
array_filter	;	Filters elements of an array using a callback function	;	array array_filter ( array $input [, callable $callback = "" ] )	;	Iterates over each value in the input array passing them to the callback function. If the callback function returns true, the current value from input is returned into the result array. Array keys are preserved.
array_map	;	Applies the callback to the elements of the given arrays	;	array array_map ( callable $callback, array $arr1 [, array $... ] )	;	array_map() returns an array containing all the elements of arr1 after applying the callback function to each one. The number of parameters that the callback function accepts should match the number of arrays passed to the array_map()
array_chunk	;	Split an array into chunks	;	array array_chunk ( array $input, int $size [, bool $preserve_keys = false ] )	;	Chunks an array into size large chunks. The last chunk may contain less than size elements.
array_combine	;	Creates an array by using one array for keys and another for its values	;	array array_combine ( array $keys, array $values )	;	Creates an array by using the values from the keys array as keys and the values from the values array as the corresponding values.
array_key_exists	;	Checks if the given key or index exists in the array	;	bool array_key_exists ( mixed $key, array $search )	;	array_key_exists() returns TRUE if the given key is set in the array. key can be any value possible for an array index.
pos	;	Alias of  current()	;		;	
sizeof	;	Alias of  count()	;		;	
assert	;	Checks if assertion is FALSE	;	bool assert ( mixed $assertion [, string $description ] )	;	assert() will check the given assertion and take appropriate action if its result is FALSE.
assert_options	;	Set/get the various assert flags	;	mixed assert_options ( int $what [, mixed $value ] )	;	Set the various assert() control options or just query their current settings.
version_compare	;	Compares two "PHP-standardized" version number strings	;	mixed version_compare ( string $version1, string $version2 [, string $operator ] )	;	version_compare() compares two "PHP-standardized" version number strings. This is useful if you would like to write programs working only on some versions of PHP.
ftok	;	Convert a pathname and a project identifier to a System V IPC key	;	int ftok ( string $pathname, string $proj )	;	The function converts the pathname of an existing accessible file and a project identifier into an integer for use with for example shmop_open() and other System V IPC keys.
str_rot13	;	Perform the rot13 transform on a string	;	string str_rot13 ( string $str )	;	Performs the ROT13 encoding on the str argument and returns the resulting string.
stream_get_filters	;	Retrieve list of registered filters	;	array stream_get_filters ( void )	;	
stream_filter_register	;	Register a user defined stream filter	;	bool stream_filter_register ( string $filtername, string $classname )	;	stream_filter_register() allows you to implement your own filter on any registered stream used with all the other filesystem functions (such as fopen() , fread() etc.).
stream_bucket_make_writeable	;	Return a bucket object from the brigade for operating on	;	object stream_bucket_make_writeable ( resource $brigade )	;	
stream_bucket_prepend	;	Prepend bucket to brigade	;	void stream_bucket_prepend ( resource $brigade, resource $bucket )	;	This function can be called to prepend a bucket to a bucket brigade. It is typically called from php_user_filter::filter() .
stream_bucket_append	;	Append bucket to brigade	;	void stream_bucket_append ( resource $brigade, resource $bucket )	;	
stream_bucket_new	;	Create a new bucket for use on the current stream	;	object stream_bucket_new ( resource $stream, string $buffer )	;	
output_add_rewrite_var	;	Add URL rewriter values	;	bool output_add_rewrite_var ( string $name, string $value )	;	This function adds another name/value pair to the URL rewrite mechanism. The name and value will be added to URLs (as GET parameter) and forms (as hidden input fields) the same way as the session ID when transparent URL rewriting is enabled with session.use_trans_sid. Please note that absolute URLs (http://example.com/..) aren't rewritten.
output_reset_rewrite_vars	;	Reset URL rewriter values	;	bool output_reset_rewrite_vars ( void )	;	This function resets the URL rewriter and removes all rewrite variables previously set by the output_add_rewrite_var() function or the session mechanism (if session.use_trans_sid was set on session_start() ).
sys_get_temp_dir	;	Returns directory path used for temporary files	;	string sys_get_temp_dir ( void )	;	Returns the path of the directory PHP stores temporary files in by default.
msg_get_queue	;	Create or attach to a message queue	;	resource msg_get_queue ( int $key [, int $perms = 0666 ] )	;	msg_get_queue() returns an id that can be used to access the System V message queue with the given key. The first call creates the message queue with the optional perms. A second call to msg_get_queue() for the same key will return a different message queue identifier, but both identifiers access the same underlying message queue.
msg_send	;	Send a message to a message queue	;	bool msg_send ( resource $queue, int $msgtype, mixed $message [, bool $serialize = true [, bool $blocking = true [, int &$errorcode ]]] )	;	msg_send() sends a message of type msgtype (which MUST be greater than 0) to the message queue specified by queue.
msg_receive	;	Receive a message from a message queue	;	bool msg_receive ( resource $queue, int $desiredmsgtype, int &$msgtype, int $maxsize, mixed &$message [, bool $unserialize = true [, int $flags = 0 [, int &$errorcode ]]] )	;	msg_receive() will receive the first message from the specified queue of the type specified by desiredmsgtype.
msg_remove_queue	;	Destroy a message queue	;	bool msg_remove_queue ( resource $queue )	;	msg_remove_queue() destroys the message queue specified by the queue. Only use this function when all processes have finished working with the message queue and you need to release the system resources held by it.
msg_stat_queue	;	Returns information from the message queue data structure	;	array msg_stat_queue ( resource $queue )	;	msg_stat_queue() returns the message queue meta data for the message queue specified by the queue. This is useful, for example, to determine which process sent the message that was just received.
msg_set_queue	;	Set information in the message queue data structure	;	bool msg_set_queue ( resource $queue, array $data )	;	msg_set_queue() allows you to change the values of the msg_perm.uid, msg_perm.gid, msg_perm.mode and msg_qbytes fields of the underlying message queue data structure.
msg_queue_exists	;	Check whether a message queue exists	;	bool msg_queue_exists ( int $key )	;	Checks whether the message queue key exists.
sem_get	;	Get a semaphore id	;	resource sem_get ( int $key [, int $max_acquire = 1 [, int $perm = 0666 [, int $auto_release = 1 ]]] )	;	sem_get() returns an id that can be used to access the System V semaphore with the given key.
sem_acquire	;	Acquire a semaphore	;	bool sem_acquire ( resource $sem_identifier )	;	sem_acquire() blocks (if necessary) until the semaphore can be acquired. A process attempting to acquire a semaphore which it has already acquired will block forever if acquiring the semaphore would cause its maximum number of semaphore to be exceeded.
sem_release	;	Release a semaphore	;	bool sem_release ( resource $sem_identifier )	;	sem_release() releases the semaphore if it is currently acquired by the calling process, otherwise a warning is generated.
sem_remove	;	Remove a semaphore	;	bool sem_remove ( resource $sem_identifier )	;	sem_remove() removes the given semaphore.
shm_attach	;	Creates or open a shared memory segment	;	resource shm_attach ( int $key [, int $memsize [, int $perm = 0666 ]] )	;	shm_attach() returns an id that can be used to access the System V shared memory with the given key, the first call creates the shared memory segment with memsize and the optional perm-bits perm.
shm_remove	;	Removes shared memory from Unix systems	;	bool shm_remove ( resource $shm_identifier )	;	shm_remove() removes the shared memory shm_identifier. All data will be destroyed.
shm_detach	;	Disconnects from shared memory segment	;	bool shm_detach ( resource $shm_identifier )	;	shm_detach() disconnects from the shared memory given by the shm_identifier created by shm_attach() . Remember, that shared memory still exist in the Unix system and the data is still present.
shm_put_var	;	Inserts or updates a variable in shared memory	;	bool shm_put_var ( resource $shm_identifier, int $variable_key, mixed $variable )	;	shm_put_var() inserts or updates the variable with the given variable_key.
shm_has_var	;	Check whether a specific entry exists	;	bool shm_has_var ( resource $shm_identifier, int $variable_key )	;	Checks whether a specific key exists inside a shared memory segment.
shm_get_var	;	Returns a variable from shared memory	;	mixed shm_get_var ( resource $shm_identifier, int $variable_key )	;	shm_get_var() returns the variable with a given variable_key, in the given shared memory segment. The variable is still present in the shared memory.
shm_remove_var	;	Removes a variable from shared memory	;	bool shm_remove_var ( resource $shm_identifier, int $variable_key )	;	Removes a variable with a given variable_key and frees the occupied memory.
tidy_getopt	;	Returns the value of the specified configuration option for the tidy document	;	mixed tidy_getopt ( tidy $object, string $option )	;	Returns the value of the specified option for the specified tidy object.
tidy_get_output	;	Return a string representing the parsed tidy markup	;	string tidy_get_output ( tidy $object )	;	Gets a string with the repaired html.
tidy_diagnose	;	Run configured diagnostics on parsed and repaired markup	;	bool tidy_diagnose ( tidy $object )	;	Runs diagnostic tests on the given tidy object, adding some more information about the document in the error buffer.
tidy_error_count	;	Returns the Number of Tidy errors encountered for specified document	;	int tidy_error_count ( tidy $object )	;	Returns the number of Tidy errors encountered for the specified document.
tidy_warning_count	;	Returns the Number of Tidy warnings encountered for specified document	;	int tidy_warning_count ( tidy $object )	;	Returns the number of Tidy warnings encountered for the specified document.
tidy_access_count	;	Returns the Number of Tidy accessibility warnings encountered for specified document	;	int tidy_access_count ( tidy $object )	;	tidy_access_count() returns the number of accessibility warnings found for the specified document.
tidy_config_count	;	Returns the Number of Tidy configuration errors encountered for specified document	;	int tidy_config_count ( tidy $object )	;	Returns the number of errors encountered in the configuration of the specified tidy object.
ob_tidyhandler	;	ob_start callback function to repair the buffer	;	string ob_tidyhandler ( string $input [, int $mode ] )	;	Callback function for ob_start() to repair the buffer.
token_get_all	;	Split given source into PHP tokens	;	array token_get_all ( string $source )	;	token_get_all() parses the given source string into PHP language tokens using the Zend engine's lexical scanner.
token_name	;	Get the symbolic name of a given PHP token	;	string token_name ( int $token )	;	token_name() gets the symbolic name for a PHP token value.
wddx_serialize_value	;	Serialize a single value into a WDDX packet	;	string wddx_serialize_value ( mixed $var [, string $comment ] )	;	Creates a WDDX packet from a single given value.
wddx_serialize_vars	;	Serialize variables into a WDDX packet	;	string wddx_serialize_vars ( mixed $var_name [, mixed $... ] )	;	Creates a WDDX packet with a structure that contains the serialized representation of the passed variables.
wddx_packet_start	;	Starts a new WDDX packet with structure inside it	;	resource wddx_packet_start ([ string $comment ] )	;	Start a new WDDX packet for incremental addition of variables. It automatically creates a structure definition inside the packet to contain the variables.
wddx_packet_end	;	Ends a WDDX packet with the specified ID	;	string wddx_packet_end ( resource $packet_id )	;	Ends and returns the given WDDX packet.
wddx_add_vars	;	Add variables to a WDDX packet with the specified ID	;	bool wddx_add_vars ( resource $packet_id, mixed $var_name [, mixed $... ] )	;	Serializes the passed variables and add the result to the given packet.
wddx_deserialize	;	Unserializes a WDDX packet	;	mixed wddx_deserialize ( string $packet )	;	Unserializes a WDDX packet.
xml_parser_create	;	Create an XML parser	;	resource xml_parser_create ([ string $encoding ] )	;	xml_parser_create() creates a new XML parser and returns a resource handle referencing it to be used by the other XML functions.
xml_parser_create_ns	;	Create an XML parser with namespace support	;	resource xml_parser_create_ns ([ string $encoding [, string $separator = ':' ]] )	;	xml_parser_create_ns() creates a new XML parser with XML namespace support and returns a resource handle referencing it to be used by the other XML functions.
xml_set_object	;	Use XML Parser within an object	;	bool xml_set_object ( resource $parser, object &$object )	;	This function allows to use parser inside object. All callback functions could be set with xml_set_element_handler() etc and assumed to be methods of object.
xml_set_element_handler	;	Set up start and end element handlers	;	end_element_handler ( resource $parser, string $name )	;	Sets the element handler functions for the XML parser. start_element_handler and end_element_handler are strings containing the names of functions that must exist when xml_parse() is called for parser.
xml_set_character_data_handler	;	Set up character data handler	;	handler ( resource $parser, string $data )	;	Sets the character data handler function for the XML parser parser.
xml_set_processing_instruction_handler	;	Set up processing instruction (PI) handler	;	handler ( resource $parser, string $target, string $data )	;	Sets the processing instruction (PI) handler function for the XML parser parser.
xml_set_default_handler	;	Set up default handler	;	handler ( resource $parser, string $data )	;	Sets the default handler function for the XML parser parser.
xml_set_unparsed_entity_decl_handler	;	Set up unparsed entity declaration handler	;	handler ( resource $parser, string $entity_name, string $base, string $system_id, string $public_id, string $notation_name )	;	Sets the unparsed entity declaration handler function for the XML parser parser.
xml_set_notation_decl_handler	;	Set up notation declaration handler	;	handler ( resource $parser, string $notation_name, string $base, string $system_id, string $public_id )	;	Sets the notation declaration handler function for the XML parser parser.
xml_set_external_entity_ref_handler	;	Set up external entity reference handler	;	handler ( resource $parser, string $open_entity_names, string $base, string $system_id, string $public_id )	;	Sets the external entity reference handler function for the XML parser parser.
xml_set_start_namespace_decl_handler	;	Set up start namespace declaration handler	;	handler ( resource $parser, string $prefix, string $uri )	;	Set a handler to be called when a namespace is declared. Namespace declarations occur inside start tags. But the namespace declaration start handler is called before the start tag handler for each namespace declared in that start tag.
xml_set_end_namespace_decl_handler	;	Set up end namespace declaration handler	;	handler ( resource $parser, string $prefix )	;	Set a handler to be called when leaving the scope of a namespace declaration. This will be called, for each namespace declaration, after the handler for the end tag of the element in which the namespace was declared.
xml_parse	;	Start parsing an XML document	;	int xml_parse ( resource $parser, string $data [, bool $is_final = false ] )	;	xml_parse() parses an XML document. The handlers for the configured events are called as many times as necessary.
xml_parse_into_struct	;	Parse XML data into an array structure	;	int xml_parse_into_struct ( resource $parser, string $data, array &$values [, array &$index ] )	;	This function parses an XML string into 2 parallel array structures, one (index) containing pointers to the location of the appropriate values in the values array. These last two parameters must be passed by reference.
xml_get_error_code	;	Get XML parser error code	;	int xml_get_error_code ( resource $parser )	;	Gets the XML parser error code.
xml_error_string	;	Get XML parser error string	;	string xml_error_string ( int $code )	;	Gets the XML parser error string associated with the given code.
xml_get_current_line_number	;	Get current line number for an XML parser	;	int xml_get_current_line_number ( resource $parser )	;	Gets the current line number for the given XML parser.
xml_get_current_column_number	;	Get current column number for an XML parser	;	int xml_get_current_column_number ( resource $parser )	;	Gets the current column number of the given XML parser.
xml_get_current_byte_index	;	Get current byte index for an XML parser	;	int xml_get_current_byte_index ( resource $parser )	;	Gets the current byte index of the given XML parser.
xml_parser_free	;	Free an XML parser	;	bool xml_parser_free ( resource $parser )	;	Frees the given XML parser.
xml_parser_set_option	;	Set options in an XML parser	;	bool xml_parser_set_option ( resource $parser, int $option, mixed $value )	;	Sets an option in an XML parser.
xml_parser_get_option	;	Get options from an XML parser	;	mixed xml_parser_get_option ( resource $parser, int $option )	;	Gets an option value from an XML parser.
utf8_encode	;	Encodes an ISO-8859-1 string to UTF-8	;	string utf8_encode ( string $data )	;	This function encodes the string data to UTF-8, and returns the encoded version. UTF-8 is a standard mechanism used by Unicode for encoding wide character values into a byte stream. UTF-8 is transparent to plain ASCII characters, is self-synchronized (meaning it is possible for a program to figure out where in the bytestream characters start) and can be used with normal string comparison functions for sorting and such. PHP encodes UTF-8 characters in up to four bytes, like this: UTF-8 encoding bytes bits representation 1 7 0bbbbbbb 2 11 110bbbbb 10bbbbbb 3 16 1110bbbb 10bbbbbb 10bbbbbb 4 21 11110bbb 10bbbbbb 10bbbbbb 10bbbbbb Each b represents a bit that can be used to store character data.
utf8_decode	;	Converts a string with ISO-8859-1 characters encoded with UTF-8    to single-byte ISO-8859-1	;	string utf8_decode ( string $data )	;	This function decodes data, assumed to be UTF-8 encoded, to ISO-8859-1.
xmlrpc_encode	;	Generates XML for a PHP value	;	string xmlrpc_encode ( mixed $value )	;	
xmlrpc_decode	;	Decodes XML into native PHP types	;	mixed xmlrpc_decode ( string $xml [, string $encoding = "iso-8859-1" ] )	;	
xmlrpc_decode_request	;	Decodes XML into native PHP types	;	mixed xmlrpc_decode_request ( string $xml, string &$method [, string $encoding ] )	;	
xmlrpc_encode_request	;	Generates XML for a method request	;	string xmlrpc_encode_request ( string $method, mixed $params [, array $output_options ] )	;	
xmlrpc_get_type	;	Gets xmlrpc type for a PHP value	;	string xmlrpc_get_type ( mixed $value )	;	
xmlrpc_set_type	;	Sets xmlrpc type, base64 or datetime, for a PHP string value	;	bool xmlrpc_set_type ( string &$value, string $type )	;	Sets xmlrpc type, base64 or datetime, for a PHP string value.
xmlrpc_is_fault	;	Determines if an array value represents an XMLRPC fault	;	bool xmlrpc_is_fault ( array $arg )	;	
xmlrpc_server_create	;	Creates an xmlrpc server	;	resource xmlrpc_server_create ( void )	;	
xmlrpc_server_destroy	;	Destroys server resources	;	int xmlrpc_server_destroy ( resource $server )	;	
xmlrpc_server_register_method	;	Register a PHP function to resource method matching method_name	;	bool xmlrpc_server_register_method ( resource $server, string $method_name, string $function )	;	
xmlrpc_server_call_method	;	Parses XML requests and call methods	;	string xmlrpc_server_call_method ( resource $server, string $xml, mixed $user_data [, array $output_options ] )	;	
xmlrpc_parse_method_descriptions	;	Decodes XML into a list of method descriptions	;	array xmlrpc_parse_method_descriptions ( string $xml )	;	
xmlrpc_server_add_introspection_data	;	Adds introspection documentation	;	int xmlrpc_server_add_introspection_data ( resource $server, array $desc )	;	
xmlrpc_server_register_introspection_callback	;	Register a PHP function to generate documentation	;	bool xmlrpc_server_register_introspection_callback ( resource $server, string $function )	;	
xmlwriter_open_uri	;	Create new xmlwriter using source uri for output	;	resource xmlwriter_open_uri ( string $uri )	;	Creates a new XMLWriter using uri for the output.
xmlwriter_open_memory	;	Create new xmlwriter using memory for string output	;	resource xmlwriter_open_memory ( void )	;	Creates a new XMLWriter using memory for string output.
xmlwriter_set_indent	;	Toggle indentation on/off	;	bool xmlwriter_set_indent ( resource $xmlwriter, bool $indent )	;	Toggles indentation on or off.
xmlwriter_set_indent_string	;	Set string used for indenting	;	bool xmlwriter_set_indent_string ( resource $xmlwriter, string $indentString )	;	Sets the string which will be used to indent each element/attribute of the resulting xml.
xmlwriter_start_comment	;	Create start comment	;	bool xmlwriter_start_comment ( resource $xmlwriter )	;	Starts a comment.
xmlwriter_end_comment	;	Create end comment	;	bool xmlwriter_end_comment ( resource $xmlwriter )	;	Ends the current comment.
xmlwriter_start_attribute	;	Create start attribute	;	bool xmlwriter_start_attribute ( resource $xmlwriter, string $name )	;	Starts an attribute.
xmlwriter_end_attribute	;	End attribute	;	bool xmlwriter_end_attribute ( resource $xmlwriter )	;	Ends the current attribute.
xmlwriter_write_attribute	;	Write full attribute	;	bool xmlwriter_write_attribute ( resource $xmlwriter, string $name, string $value )	;	Writes a full attribute.
xmlwriter_start_attribute_ns	;	Create start namespaced attribute	;	bool xmlwriter_start_attribute_ns ( resource $xmlwriter, string $prefix, string $name, string $uri )	;	Starts a namespaced attribute.
xmlwriter_write_attribute_ns	;	Write full namespaced attribute	;	bool xmlwriter_write_attribute_ns ( resource $xmlwriter, string $prefix, string $name, string $uri, string $content )	;	Writes a full namespaced attribute.
xmlwriter_start_element	;	Create start element tag	;	bool xmlwriter_start_element ( resource $xmlwriter, string $name )	;	Starts an element.
xmlwriter_end_element	;	End current element	;	bool xmlwriter_end_element ( resource $xmlwriter )	;	Ends the current element.
xmlwriter_full_end_element	;	End current element	;	bool xmlwriter_full_end_element ( resource $xmlwriter )	;	End the current xml element. Writes an end tag even if the element is empty.
xmlwriter_start_element_ns	;	Create start namespaced element tag	;	bool xmlwriter_start_element_ns ( resource $xmlwriter, string $prefix, string $name, string $uri )	;	Starts a namespaced element.
xmlwriter_write_element	;	Write full element tag	;	bool xmlwriter_write_element ( resource $xmlwriter, string $name [, string $content ] )	;	Writes a full element tag.
xmlwriter_write_element_ns	;	Write full namespaced element tag	;	bool xmlwriter_write_element_ns ( resource $xmlwriter, string $prefix, string $name, string $uri [, string $content ] )	;	Writes a full namespaced element tag.
xmlwriter_start_pi	;	Create start PI tag	;	bool xmlwriter_start_pi ( resource $xmlwriter, string $target )	;	Starts a processing instruction tag.
xmlwriter_end_pi	;	End current PI	;	bool xmlwriter_end_pi ( resource $xmlwriter )	;	Ends the current processing instruction.
xmlwriter_write_pi	;	Writes a PI	;	bool xmlwriter_write_pi ( resource $xmlwriter, string $target, string $content )	;	Writes a processing instruction.
xmlwriter_start_cdata	;	Create start CDATA tag	;	bool xmlwriter_start_cdata ( resource $xmlwriter )	;	Starts a CDATA.
xmlwriter_end_cdata	;	End current CDATA	;	bool xmlwriter_end_cdata ( resource $xmlwriter )	;	Ends the current CDATA section.
xmlwriter_write_cdata	;	Write full CDATA tag	;	bool xmlwriter_write_cdata ( resource $xmlwriter, string $content )	;	Writes a full CDATA.
xmlwriter_text	;	Write text	;	bool xmlwriter_text ( resource $xmlwriter, string $content )	;	Writes a text.
xmlwriter_write_raw	;	Write a raw XML text	;	bool xmlwriter_write_raw ( resource $xmlwriter, string $content )	;	Writes a raw xml text.
xmlwriter_start_document	;	Create document tag	;	bool xmlwriter_start_document ( resource $xmlwriter [, string $version = 1.0 [, string $encoding = NULL [, string $standalone ]]] )	;	Starts a document.
xmlwriter_end_document	;	End current document	;	bool xmlwriter_end_document ( resource $xmlwriter )	;	Ends the current document.
xmlwriter_write_comment	;	Write full comment tag	;	bool xmlwriter_write_comment ( resource $xmlwriter, string $content )	;	Writes a full comment.
xmlwriter_start_dtd	;	Create start DTD tag	;	bool xmlwriter_start_dtd ( resource $xmlwriter, string $qualifiedName [, string $publicId [, string $systemId ]] )	;	Starts a DTD.
xmlwriter_end_dtd	;	End current DTD	;	bool xmlwriter_end_dtd ( resource $xmlwriter )	;	Ends the DTD of the document.
xmlwriter_write_dtd	;	Write full DTD tag	;	bool xmlwriter_write_dtd ( resource $xmlwriter, string $name [, string $publicId [, string $systemId [, string $subset ]]] )	;	Writes a full DTD.
xmlwriter_start_dtd_element	;	Create start DTD element	;	bool xmlwriter_start_dtd_element ( resource $xmlwriter, string $qualifiedName )	;	Starts a DTD element.
xmlwriter_end_dtd_element	;	End current DTD element	;	bool xmlwriter_end_dtd_element ( resource $xmlwriter )	;	Ends the current DTD element.
xmlwriter_write_dtd_element	;	Write full DTD element tag	;	bool xmlwriter_write_dtd_element ( resource $xmlwriter, string $name, string $content )	;	Writes a full DTD element.
xmlwriter_start_dtd_attlist	;	Create start DTD AttList	;	bool xmlwriter_start_dtd_attlist ( resource $xmlwriter, string $name )	;	Starts a DTD attribute list.
xmlwriter_end_dtd_attlist	;	End current DTD AttList	;	bool xmlwriter_end_dtd_attlist ( resource $xmlwriter )	;	Ends the current DTD attribute list.
xmlwriter_write_dtd_attlist	;	Write full DTD AttList tag	;	bool xmlwriter_write_dtd_attlist ( resource $xmlwriter, string $name, string $content )	;	Writes a DTD attribute list.
xmlwriter_start_dtd_entity	;	Create start DTD Entity	;	bool xmlwriter_start_dtd_entity ( resource $xmlwriter, string $name, bool $isparam )	;	Starts a DTD entity.
xmlwriter_end_dtd_entity	;	End current DTD Entity	;	bool xmlwriter_end_dtd_entity ( resource $xmlwriter )	;	Ends the current DTD entity.
xmlwriter_write_dtd_entity	;	Write full DTD Entity tag	;	bool xmlwriter_write_dtd_entity ( resource $xmlwriter, string $name, string $content, bool $pe, string $pubid, string $sysid, string $ndataid )	;	Writes a full DTD entity.
xmlwriter_output_memory	;	Returns current buffer	;	string xmlwriter_output_memory ( resource $xmlwriter [, bool $flush = true ] )	;	Returns the current buffer.
xmlwriter_flush	;	Flush current buffer	;	mixed xmlwriter_flush ( resource $xmlwriter [, bool $empty = true ] )	;	Flushes the current buffer.
zip_open	;	Open a ZIP file archive	;	resource zip_open ( string $filename )	;	Opens a new zip archive for reading.
zip_close	;	Close a ZIP file archive	;	void zip_close ( resource $zip )	;	Closes the given ZIP file archive.
zip_read	;	Read next entry in a ZIP file archive	;	resource zip_read ( resource $zip )	;	Reads the next entry in a zip file archive.
zip_entry_open	;	Open a directory entry for reading	;	bool zip_entry_open ( resource $zip, resource $zip_entry [, string $mode ] )	;	Opens a directory entry in a zip file for reading.
zip_entry_close	;	Close a directory entry	;	bool zip_entry_close ( resource $zip_entry )	;	Closes the specified directory entry.
zip_entry_read	;	Read from an open directory entry	;	string zip_entry_read ( resource $zip_entry [, int $length ] )	;	Reads from an open directory entry.
zip_entry_filesize	;	Retrieve the actual file size of a directory entry	;	int zip_entry_filesize ( resource $zip_entry )	;	Returns the actual size of the specified directory entry.
zip_entry_name	;	Retrieve the name of a directory entry	;	string zip_entry_name ( resource $zip_entry )	;	Returns the name of the specified directory entry.
zip_entry_compressedsize	;	Retrieve the compressed size of a directory entry	;	int zip_entry_compressedsize ( resource $zip_entry )	;	Returns the compressed size of the specified directory entry.
zip_entry_compressionmethod	;	Retrieve the compression method of a directory entry	;	string zip_entry_compressionmethod ( resource $zip_entry )	;	Returns the compression method of the directory entry specified by zip_entry.
dl	;	Loads a PHP extension at runtime	;	bool dl ( string $library )	;	Loads the PHP extension given by the parameter library.
